/**
 * BaaSCaradhrasAPIDocumentationLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const BaseModel = require('./BaseModel');

/**
 * Creates an instance of Address23
 */
class Address23 extends BaseModel {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.typology = this.constructor.getValue(obj.typology || obj.Typology);
        this.title = this.constructor.getValue(obj.title || obj.Title);
        this.addressMain = this.constructor.getValue(obj.addressMain || obj.AddressMain);
        this.number = this.constructor.getValue(obj.number || obj.Number);
        this.complement = this.constructor.getValue(obj.complement || obj.Complement);
        this.neighborhood = this.constructor.getValue(obj.neighborhood || obj.Neighborhood);
        this.zipCode = this.constructor.getValue(obj.zipCode || obj.ZipCode);
        this.city = this.constructor.getValue(obj.city || obj.City);
        this.state = this.constructor.getValue(obj.state || obj.State);
        this.country = this.constructor.getValue(obj.country || obj.Country);
        this.type = this.constructor.getValue(obj.type || obj.Type);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'typology', realName: 'Typology' },
            { name: 'title', realName: 'Title' },
            { name: 'addressMain', realName: 'AddressMain' },
            { name: 'number', realName: 'Number' },
            { name: 'complement', realName: 'Complement' },
            { name: 'neighborhood', realName: 'Neighborhood' },
            { name: 'zipCode', realName: 'ZipCode' },
            { name: 'city', realName: 'City' },
            { name: 'state', realName: 'State' },
            { name: 'country', realName: 'Country' },
            { name: 'type', realName: 'Type' },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {};
    }
}

module.exports = Address23;
