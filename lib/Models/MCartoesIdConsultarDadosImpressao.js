/**
 * BaaSCaradhrasAPIDocumentationLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const BaseModel = require('./BaseModel');

/**
 * Creates an instance of MCartoesIdConsultarDadosImpressao
 */
class MCartoesIdConsultarDadosImpressao extends BaseModel {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.idConta = this.constructor.getValue(obj.idConta);
        this.idPessoa = this.constructor.getValue(obj.idPessoa);
        this.idCartao = this.constructor.getValue(obj.idCartao);
        this.idBandeira = this.constructor.getValue(obj.idBandeira);
        this.idTipoCartao = this.constructor.getValue(obj.idTipoCartao);
        this.numeroCartao = this.constructor.getValue(obj.numeroCartao);
        this.nomePlastico = this.constructor.getValue(obj.nomePlastico);
        this.cvv2 = this.constructor.getValue(obj.cvv2);
        this.dataGeracao = this.constructor.getValue(obj.dataGeracao);
        this.dataValidade = this.constructor.getValue(obj.dataValidade);
        this.cpf = this.constructor.getValue(obj.cpf);
        this.tipoPortador = this.constructor.getValue(obj.tipoPortador);
        this.trilha1 = this.constructor.getValue(obj.trilha1);
        this.trilha2 = this.constructor.getValue(obj.trilha2);
        this.trilhaCVV1 = this.constructor.getValue(obj.trilhaCVV1);
        this.trilhaCVV2 = this.constructor.getValue(obj.trilhaCVV2);
        this.flagVirtual = this.constructor.getValue(obj.flagVirtual);
        this.nomeBandeira = this.constructor.getValue(obj.nomeBandeira);
        this.flagTitular = this.constructor.getValue(obj.flagTitular);
        this.sequencialCartao = this.constructor.getValue(obj.sequencialCartao);
        this.idStatus = this.constructor.getValue(obj.idStatus);
        this.descricaoStatusCartao = this.constructor.getValue(obj.descricaoStatusCartao);
        this.dataStatus = this.constructor.getValue(obj.dataStatus);
        this.idEstagio = this.constructor.getValue(obj.idEstagio);
        this.descricaoEstagio = this.constructor.getValue(obj.descricaoEstagio);
        this.dataEstagio = this.constructor.getValue(obj.dataEstagio);
        this.numeroBin = this.constructor.getValue(obj.numeroBin);
        this.idProduto = this.constructor.getValue(obj.idProduto);
        this.descricaoProduto = this.constructor.getValue(obj.descricaoProduto);
        this.idStatusConta = this.constructor.getValue(obj.idStatusConta);
        this.descricaoStatusConta = this.constructor.getValue(obj.descricaoStatusConta);
        this.dataEmbossing = this.constructor.getValue(obj.dataEmbossing);
        this.codigoDesbloqueio = this.constructor.getValue(obj.codigoDesbloqueio);
        this.nomePessoa = this.constructor.getValue(obj.nomePessoa);
        this.tipoPessoa = this.constructor.getValue(obj.tipoPessoa);
        this.dataNascimento = this.constructor.getValue(obj.dataNascimento);
        this.idEndereco = this.constructor.getValue(obj.idEndereco);
        this.idTipoEndereco = this.constructor.getValue(obj.idTipoEndereco);
        this.descricaoTipoEndereco = this.constructor.getValue(obj.descricaoTipoEndereco);
        this.cep = this.constructor.getValue(obj.cep);
        this.logradouro = this.constructor.getValue(obj.logradouro);
        this.numeroEndereco = this.constructor.getValue(obj.numeroEndereco);
        this.complementoEndereco = this.constructor.getValue(obj.complementoEndereco);
        this.bairro = this.constructor.getValue(obj.bairro);
        this.cidade = this.constructor.getValue(obj.cidade);
        this.uf = this.constructor.getValue(obj.uf);
        this.pais = this.constructor.getValue(obj.pais);
        this.senhaCriptografada = this.constructor.getValue(obj.senhaCriptografada);
        this.icvv = this.constructor.getValue(obj.icvv);
        this.idStatusImpressao = this.constructor.getValue(obj.idStatusImpressao);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'idConta', realName: 'idConta' },
            { name: 'idPessoa', realName: 'idPessoa' },
            { name: 'idCartao', realName: 'idCartao' },
            { name: 'idBandeira', realName: 'idBandeira' },
            { name: 'idTipoCartao', realName: 'idTipoCartao' },
            { name: 'numeroCartao', realName: 'numeroCartao' },
            { name: 'nomePlastico', realName: 'nomePlastico' },
            { name: 'cvv2', realName: 'cvv2' },
            { name: 'dataGeracao', realName: 'dataGeracao' },
            { name: 'dataValidade', realName: 'dataValidade' },
            { name: 'cpf', realName: 'cpf' },
            { name: 'tipoPortador', realName: 'tipoPortador' },
            { name: 'trilha1', realName: 'trilha1' },
            { name: 'trilha2', realName: 'trilha2' },
            { name: 'trilhaCVV1', realName: 'trilhaCVV1' },
            { name: 'trilhaCVV2', realName: 'trilhaCVV2' },
            { name: 'flagVirtual', realName: 'flagVirtual' },
            { name: 'nomeBandeira', realName: 'nomeBandeira' },
            { name: 'flagTitular', realName: 'flagTitular' },
            { name: 'sequencialCartao', realName: 'sequencialCartao' },
            { name: 'idStatus', realName: 'idStatus' },
            { name: 'descricaoStatusCartao', realName: 'descricaoStatusCartao' },
            { name: 'dataStatus', realName: 'dataStatus' },
            { name: 'idEstagio', realName: 'idEstagio' },
            { name: 'descricaoEstagio', realName: 'descricaoEstagio' },
            { name: 'dataEstagio', realName: 'dataEstagio' },
            { name: 'numeroBin', realName: 'numeroBin' },
            { name: 'idProduto', realName: 'idProduto' },
            { name: 'descricaoProduto', realName: 'descricaoProduto' },
            { name: 'idStatusConta', realName: 'idStatusConta' },
            { name: 'descricaoStatusConta', realName: 'descricaoStatusConta' },
            { name: 'dataEmbossing', realName: 'dataEmbossing' },
            { name: 'codigoDesbloqueio', realName: 'codigoDesbloqueio' },
            { name: 'nomePessoa', realName: 'nomePessoa' },
            { name: 'tipoPessoa', realName: 'tipoPessoa' },
            { name: 'dataNascimento', realName: 'dataNascimento' },
            { name: 'idEndereco', realName: 'idEndereco' },
            { name: 'idTipoEndereco', realName: 'idTipoEndereco' },
            { name: 'descricaoTipoEndereco', realName: 'descricaoTipoEndereco' },
            { name: 'cep', realName: 'cep' },
            { name: 'logradouro', realName: 'logradouro' },
            { name: 'numeroEndereco', realName: 'numeroEndereco' },
            { name: 'complementoEndereco', realName: 'complementoEndereco' },
            { name: 'bairro', realName: 'bairro' },
            { name: 'cidade', realName: 'cidade' },
            { name: 'uf', realName: 'uf' },
            { name: 'pais', realName: 'pais' },
            { name: 'senhaCriptografada', realName: 'senhaCriptografada' },
            { name: 'icvv', realName: 'icvv' },
            { name: 'idStatusImpressao', realName: 'idStatusImpressao' },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {};
    }
}

module.exports = MCartoesIdConsultarDadosImpressao;
