/**
 * BaaSCaradhrasAPIDocumentationLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const BaseModel = require('./BaseModel');

/**
 * Creates an instance of Content4
 */
class Content4 extends BaseModel {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.idConta = this.constructor.getValue(obj.idConta);
        this.idTipoRegistro = this.constructor.getValue(obj.idTipoRegistro);
        this.ordem = this.constructor.getValue(obj.ordem);
        this.idTransacao = this.constructor.getValue(obj.idTransacao);
        this.descricao = this.constructor.getValue(obj.descricao);
        this.status = this.constructor.getValue(obj.status);
        this.descricaoStatus = this.constructor.getValue(obj.descricaoStatus);
        this.valor = this.constructor.getValue(obj.valor);
        this.valorDolar = this.constructor.getValue(obj.valorDolar);
        this.quantidadeParcelas = this.constructor.getValue(obj.quantidadeParcelas);
        this.valorParcela = this.constructor.getValue(obj.valorParcela);
        this.dataEvento = this.constructor.getValue(obj.dataEvento);
        this.estabelecimento = this.constructor.getValue(obj.estabelecimento);
        this.flagCredito = this.constructor.getValue(obj.flagCredito);
        this.tipoEstabelecimento = this.constructor.getValue(obj.tipoEstabelecimento);
        this.idGrupoMCC = this.constructor.getValue(obj.idGrupoMCC);
        this.flagSolicitouContestacao = this.constructor.getValue(obj.flagSolicitouContestacao);
        this.tipoTransacao = this.constructor.getValue(obj.tipoTransacao);
        this.idEventoAjuste = this.constructor.getValue(obj.idEventoAjuste);
        this.ultimaParcelaLancada = this.constructor.getValue(obj.ultimaParcelaLancada);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'idConta', realName: 'idConta' },
            { name: 'idTipoRegistro', realName: 'idTipoRegistro' },
            { name: 'ordem', realName: 'ordem' },
            { name: 'idTransacao', realName: 'idTransacao' },
            { name: 'descricao', realName: 'descricao' },
            { name: 'status', realName: 'status' },
            { name: 'descricaoStatus', realName: 'descricaoStatus' },
            { name: 'valor', realName: 'valor' },
            { name: 'valorDolar', realName: 'valorDolar' },
            { name: 'quantidadeParcelas', realName: 'quantidadeParcelas' },
            { name: 'valorParcela', realName: 'valorParcela' },
            { name: 'dataEvento', realName: 'dataEvento' },
            { name: 'estabelecimento', realName: 'estabelecimento' },
            { name: 'flagCredito', realName: 'flagCredito' },
            { name: 'tipoEstabelecimento', realName: 'tipoEstabelecimento' },
            { name: 'idGrupoMCC', realName: 'idGrupoMCC' },
            { name: 'flagSolicitouContestacao', realName: 'flagSolicitouContestacao' },
            { name: 'tipoTransacao', realName: 'tipoTransacao' },
            { name: 'idEventoAjuste', realName: 'idEventoAjuste' },
            { name: 'ultimaParcelaLancada', realName: 'ultimaParcelaLancada' },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {};
    }
}

module.exports = Content4;
