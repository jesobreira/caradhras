/**
 * BaaSCaradhrasAPIDocumentationLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const _request = require('../Http/Client/RequestClient');
const _configuration = require('../configuration');
const _servers = require('../Servers');
const _apiHelper = require('../APIHelper');
const _baseController = require('./BaseController');

class KYCController {
    /**
     * <p>This method allows to retrieve dates of a determined Physical Person existent using
     * name or document.</p>
     * <p>"resources" returns: </p>
     * <table>
     * <tr>
     * <th>Resources</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>1</td>
     * <td>Dados básicos</td>
     * </tr>
     * <tr>
     * <td>2</td>
     * <td>Sanções</td>
     * </tr>
     * <tr>
     * <td>3</td>
     * <td>Creditício (presença em cobrança)</td>
     * </tr>
     * <tr>
     * <td>4</td>
     * <td>Creditício (Score SPC)</td>
     * </tr>
     * </table>
     * 
     * <p>"IsCurrentlyPEP" returns:</p>
     * <table>
     * <tr>
     * <th>Resources</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>true</td>
     * <td>The "SanctionsHistory" information is about the "Name" (Physical Person searched)
     * </td>
     * </tr>
     * <tr>
     * <td>false</td>
     * <td>The "SanctionsHistory" information is about a person whose name is similar to
     * "Name" (Physical Person searched), so you can ignore this information.</td>
     * </tr>
     * <tr>
     * </tr></table>
     *
     * @param {string} contentType TODO: type description here
     * @param {string} authorization TODO: type description here
     * @param {string} body TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createKnowyourclientPeople(contentType, authorization, body, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.getBaseUri(_servers.SERVER_3);

        const _pathUrl = '/knowyourclient/people';
        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'content-type': 'text/plain; charset=utf-8',
            'Content-Type': contentType,
            Authorization: authorization,
            'user-agent': 'APIMATIC 2.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
            body: body,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'MKnowyourclientPeople');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
}
module.exports = KYCController;
