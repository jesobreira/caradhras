/**
 * BaaSCaradhrasAPIDocumentationLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const _request = require('../Http/Client/RequestClient');
const _configuration = require('../configuration');
const _servers = require('../Servers');
const _apiHelper = require('../APIHelper');
const _baseController = require('./BaseController');

class OAuth20Controller {
    /**
     * <p>OAuth 2.0 is the industry-standard protocol for authorization. OAuth 2.0 focuses on
     * client developer simplicity while providing specific authorization flows for web
     * applications, desktop applications, mobile phones, and living room devices.</p>
     * <p>For the consumption of our API's, we chose the <code>client_credentials</code> stream.
     * We will provide the credentials in the form <code>client_id</code>,
     * <code>client_secret</code>.</p>
     * <p>At the first call of our API's, your application must authenticate with our credentials
     * provider through a POST request at url <code>https://auth.hml.caradhras.io/oauth2/token?
     * grant_type=client_credentials</code> using the form of authentication Basic Auth with the
     * credentials we provided in the previous step, including the <code>Content-Type</code>
     * header with the <code>application/x-www-form-urlencoded</code> value. Content will be
     * returned as follows:</p>
     * <pre class="click-to-expand-wrapper is-snippet-wrapper"><code>{
     * "access_token": "eyJraWQiOiXXXXXXXXXXXXXX.eyJziI2cXXXXXXXXXXXXXXXXXXXXQ.
     * PSvxxxxxxxxxxxxxxxxxxM23GPFNuA",
     * "expires_in": 3600,
     * "token_type": "Bearer"
     * }
     * </code></pre><ul>
     * <li><p>The <code>expires_in</code> field determines the validity time of the token in
     * seconds. When it is close to expiration, a new call must be made to obtain a new token.
     * </p>
     * </li>
     * <li><p>Once this is done, simply call the desired resource by passing the contents of the
     * access_token to a Header of the request named Authorization in the following:</p>
     * </li>
     * </ul>
     * <pre class="click-to-expand-wrapper is-snippet-wrapper"><code>{
     * "Authorization": "Bearer eyJraWQiOiXXXXXXXXXXXXXX.eyJziI2cXXXXXXXXXXXXXXXQ.
     * PSvxxxxxxxxxxxxxxxxxxM23GPFNuA"
     * }
     * </code></pre><h4 id="safety-recommendations">Safety Recommendations</h4>
     * <p>Here are some recommendations for use:</p>
     * <ul>
     * <li>Do not store the client_id and client_secret in the same application database that
     * will consume resources.</li>
     * <li>Do not in any way leave the credentials available to people / systems that should not
     * have access to them.</li>
     * <li>Do not version the credentials along with the application source code.</li>
     * <li>In case of compromise of the credentials, you must immediately let our team know to
     * revoke them.</li>
     * <li>The custody of the credentials is the responsibility of the client.</li>
     * <li></li>
     * </ul>
     *
     * @param {string} grantType TODO: type description here
     * @param {string} contentType TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createOauth2Token(grantType, contentType, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.getBaseUri(_servers.SERVER_1);

        const _pathUrl = '/token';
        let _queryBuilder = `${_baseUri}${_pathUrl}`;

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            grant_type: grantType,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'Content-Type': contentType,
            'user-agent': 'APIMATIC 2.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
            username: _configuration.username,
            password: _configuration.password,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'MOauth2Token');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
}
module.exports = OAuth20Controller;
