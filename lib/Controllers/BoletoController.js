/**
 * BaaSCaradhrasAPIDocumentationLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const _request = require('../Http/Client/RequestClient');
const _configuration = require('../configuration');
const _servers = require('../Servers');
const _apiHelper = require('../APIHelper');
const _baseController = require('./BaseController');

class BoletoController {
    /**
     * <p>Create and register a boleto</p>
     * <blockquote>
     * <p>Check the FAQ below:</p>
     * <ul>
     * <li><a href="https://baas-cdt.zendesk.com/hc/pt-br/articles/360018887592-Estou-com-
     * problemas-para-emitir-ou-registrar-um-boleto-o-que-fa%C3%A7o-">I have problems to issue or
     * record a bank slip, what should I do?</a></li>
     * <li><a href="https://baas-cdt.zendesk.com/hc/pt-br/articles/360030823631">How to identify
     * a paid Recharge Bank Slip?</a></li>
     * <li><a href="https://baas-cdt.zendesk.com/hc/pt-br/articles/360031595611">How to create a
     * bank slip linked to a third party (idPessoaFontePagadora)?</a></li>
     * </ul>
     * </blockquote>
     * <p>"tipoBoleto" returns: </p>
     * <table>
     * <tr>
     * <th>Parameters</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>9</td>
     * <td>Recarga</td>
     * </tr>
     * </table>
     *
     * @param {string} idConta TODO: type description here
     * @param {string} tipoBoleto TODO: type description here
     * @param {string} valor TODO: type description here
     * @param {string} dataVencimento TODO: type description here
     * @param {string} idPessoafontePagadora TODO: type description here
     * @param {string} contentType TODO: type description here
     * @param {string} authorization TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getBillet(idConta,
        tipoBoleto,
        valor,
        dataVencimento,
        idPessoafontePagadora,
        contentType,
        authorization,
        callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.getBaseUri(_servers.SERVER_3);

        const _pathUrl = '/billet';
        let _queryBuilder = `${_baseUri}${_pathUrl}`;

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            idConta,
            tipoBoleto,
            valor,
            dataVencimento,
            idPessoafontePagadora,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'Content-Type': contentType,
            Authorization: authorization,
            'user-agent': 'APIMATIC 2.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'MBillet');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * <p>Create and register a boleto.</p>
     * <blockquote>
     * <p>Check the FAQ below:</p>
     * <ul>
     * <li><a href="https://baas-cdt.zendesk.com/hc/pt-br/articles/360018887592-Estou-com-
     * problemas-para-emitir-ou-registrar-um-boleto-o-que-fa%C3%A7o-">I have problems to issue or
     * record a bank slip, what should I do?</a></li>
     * <li><a href="https://baas-cdt.zendesk.com/hc/pt-br/articles/360030823631">How to identify
     * a paid Recharge Bank Slip?</a></li>
     * <li><a href="https://baas-cdt.zendesk.com/hc/pt-br/articles/360031595611">How to create a
     * bank slip linked to a third party (idPessoaFontePagadora)?</a></li>
     * </ul>
     * </blockquote>
     * <p>"tipoBoleto" returns: </p>
     * <table>
     * <tr>
     * <th>Parameters</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>9</td>
     * <td>Recarga</td>
     * </tr>
     * </table>
     *
     * @param {string} contentType TODO: type description here
     * @param {string} authorization TODO: type description here
     * @param {string} body TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createBillet(contentType, authorization, body, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.getBaseUri(_servers.SERVER_3);

        const _pathUrl = '/billet';
        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'content-type': 'text/plain; charset=utf-8',
            'Content-Type': contentType,
            Authorization: authorization,
            'user-agent': 'APIMATIC 2.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
            body: body,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'MBillet');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * <p>receives payment slip data and a final payer data at same time.</p>
     *
     * @param {string} contentType TODO: type description here
     * @param {string} authorization TODO: type description here
     * @param {MPaymentsliprequest} body TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createPaymentslip(contentType, authorization, body, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.getBaseUri(_servers.SERVER_3);

        const _pathUrl = '/paymentslip';
        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'content-type': 'application/json; charset=utf-8',
            'Content-Type': contentType,
            Authorization: authorization,
            'user-agent': 'APIMATIC 2.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
            body: _apiHelper.jsonSerialize(body),
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'MBillet');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * <p>This service lists the bank slips.</p>
     * <blockquote>
     * <p>Check the FAQs below:</p>
     * <ul>
     * <li><a href="https://baas-cdt.zendesk.com/hc/pt-br/articles/360030779832">How to use sort
     * parameter?</a></li>
     * </ul>
     * </blockquote>
     *
     * @param {string} sort TODO: type description here
     * @param {string} page TODO: type description here
     * @param {string} limit TODO: type description here
     * @param {string} idConta TODO: type description here
     * @param {string} dataVencimento TODO: type description here
     * @param {string} valorBoleto TODO: type description here
     * @param {string} idTipoBoleto TODO: type description here
     * @param {string} nossoNumero TODO: type description here
     * @param {string} idEventoPagamento TODO: type description here
     * @param {string} statusParcela TODO: type description here
     * @param {string} authorization TODO: type description here
     * @param {string} accept TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getBoletos(sort,
        page,
        limit,
        idConta,
        dataVencimento,
        valorBoleto,
        idTipoBoleto,
        nossoNumero,
        idEventoPagamento,
        statusParcela,
        authorization,
        accept,
        callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.getBaseUri(_servers.SERVER_3);

        const _pathUrl = '/boletos';
        let _queryBuilder = `${_baseUri}${_pathUrl}`;

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            sort,
            page,
            limit,
            idConta,
            dataVencimento,
            valorBoleto,
            idTipoBoleto,
            nossoNumero,
            idEventoPagamento,
            statusParcela,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            Authorization: authorization,
            Accept: accept,
            'user-agent': 'APIMATIC 2.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'MBoletos');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * <p>This service searches for a ticket by its identifier.</p>
     *
     * @param {string} authorization TODO: type description here
     * @param {string} accept TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getBoletosIdBoleto(authorization, accept, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.getBaseUri(_servers.SERVER_3);

        const _pathUrl = '/boletos/1038';
        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            Authorization: authorization,
            Accept: accept,
            'user-agent': 'APIMATIC 2.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, _response.body, _context);
                    _fulfill(_response.body);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * <p>This service searches for a ticket by its identifier.</p>
     *
     * @param {string} authorization TODO: type description here
     * @param {string} accept TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getBoletosIdBoletoPdf(authorization, accept, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.getBaseUri(_servers.SERVER_3);

        const _pathUrl = '/boletos/1038/pdf';
        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            Authorization: authorization,
            Accept: accept,
            'user-agent': 'APIMATIC 2.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, null, _context);
                    _fulfill();
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
}
module.exports = BoletoController;
