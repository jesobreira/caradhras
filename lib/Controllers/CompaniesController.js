/**
 * BaaSCaradhrasAPIDocumentationLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const _request = require('../Http/Client/RequestClient');
const _configuration = require('../configuration');
const _servers = require('../Servers');
const _apiHelper = require('../APIHelper');
const _baseController = require('./BaseController');
const _fs = require('fs');

class CompaniesController {
    /**
     * <p>This method submits a company to registration.</p>
     * <p> </p>
     * 
     * <h2>PARAMETERS<h2>
     * <table>
     * <tbody>
     * <tr>
     * <td>
     * <p><strong>PARAMETER</strong></p>
     * </td>
     * <td>
     * <p><strong>DESCRIPTION</strong></p>
     * </td>
     * <td>
     * <p><strong>VALUE</strong></p>
     * </td>
     * <td>
     * <p><strong>REQUIRED</strong></p>
     * </td>
     * <td>
     * <p><strong>RESTRICTIONS</strong></p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong> company</strong></p>
     * </td>
     * <td>
     * <p>Company details.</p>
     * </td>
     * <td>
     * <p>Array</p>
     * </td>
     * <td> </td>
     * <td> </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>nationalRegistration</strong></p>
     * </td>
     * <td>
     * <p>Company national registration (CNPJ).</p>
     * </td>
     * <td>
     * <p>String</p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td>
     * <p>size = 14.</p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>legalName</strong></p>
     * </td>
     * <td>
     * <p>Company legal name.</p>
     * </td>
     * <td>
     * <p>String</p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td>
     * <p>max size = 255.</p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>legalNature</strong></p>
     * </td>
     * <td>
     * <p>Company legal nature.</p>
     * </td>
     * <td>
     * <p>String</p>
     * </td>
     * <td>
     * <p>No</p>
     * </td>
     * <td>
     * <p>size = 4.</p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>legalStatus</strong></p>
     * </td>
     * <td>
     * <p>Company legal status.</p>
     * </td>
     * <td>
     * <p>String</p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td>
     * <p>max size = 255.</p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>tradeName</strong></p>
     * </td>
     * <td>
     * <p>Company trade name.</p>
     * </td>
     * <td>
     * <p>String</p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td>
     * <p>max size = 255.</p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>establishmentDate</strong></p>
     * </td>
     * <td>
     * <p>Company foundation date.</p>
     * </td>
     * <td>
     * <p>Date</p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td>
     * <p>Date in the past; ISO 8601 format.</p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>establishmentFormat</strong></p>
     * </td>
     * <td>
     * <p>Company establishment format.</p>
     * </td>
     * <td>
     * <p>String</p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td>
     * <p>[EI, MEI, EIRELI, LTDA, SS, SA, ME, EPP, EMGP].</p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>stateRegistration</strong></p>
     * </td>
     * <td>
     * <p>Company state registration.</p>
     * </td>
     * <td>
     * <p>Integer</p>
     * </td>
     * <td>
     * <p>No</p>
     * </td>
     * <td>
     * <p>max size = 16.</p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>email</strong></p>
     * </td>
     * <td>
     * <p>Company mail address.</p>
     * </td>
     * <td>
     * <p>String</p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td> </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>revenue</strong></p>
     * </td>
     * <td>
     * <p>Company annual revenue.</p>
     * </td>
     * <td>
     * <p>Double </p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td>
     * <p>default: 0.0.</p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>mainCnae</strong></p>
     * </td>
     * <td>
     * <p>Main cnae.</p>
     * </td>
     * <td>
     * <p>Number</p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td>
     * <p>size =  6 or 7.</p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>cnaes</strong></p>
     * </td>
     * <td>
     * <p>Other cnaes.</p>
     * </td>
     * <td>
     * <p>Number</p>
     * </td>
     * <td>
     * <p>No</p>
     * </td>
     * <td>
     * <p>size =  6 or 7.</p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>mainPhone</strong></p>
     * </td>
     * <td>
     * <p>Main phone details.</p>
     * </td>
     * <td>
     * <p>Object</p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td> </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>phones</strong></p>
     * </td>
     * <td>
     * <p>Additional phones details.</p>
     * </td>
     * <td>
     * <p>Object</p>
     * </td>
     * <td>
     * <p>No</p>
     * </td>
     * <td> </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>mainAddress</strong></p>
     * </td>
     * <td>
     * <p>Main address details.</p>
     * </td>
     * <td>
     * <p>Object</p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td> </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>adresses</strong></p>
     * </td>
     * <td>
     * <p>Additional addresses details.</p>
     * </td>
     * <td>
     * <p>Object</p>
     * </td>
     * <td>
     * <p>No</p>
     * </td>
     * <td> </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>partners</strong></p>
     * </td>
     * <td>
     * <p>Partners details.</p>
     * </td>
     * <td>
     * <p>Object</p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td> </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>productSettings</strong></p>
     * </td>
     * <td>
     * <p>Product settings details.</p>
     * </td>
     * <td>
     * <p>Object</p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td> </td>
     * </tr>
     * </tbody>
     * </table>
     * <p> </p>
     * 
     * <h2>OBJECT: mainPhone<h2>
     * <table>
     * <tbody>
     * <tr>
     * <td>
     * <p><strong>PARAMETER</strong></p>
     * </td>
     * <td>
     * <p><strong>DESCRIPTION</strong></p>
     * </td>
     * <td>
     * <p><strong>VALUE</strong></p>
     * </td>
     * <td>
     * <p><strong>REQUIRED</strong></p>
     * </td>
     * <td>
     * <p><strong>RESTRICTIONS</strong></p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>countryCode</strong></p>
     * </td>
     * <td>
     * <p>Country code number.</p>
     * </td>
     * <td>
     * <p>Number</p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td>
     * <p>value = 55.</p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>area</strong></p>
     * </td>
     * <td>
     * <p>Area code number.</p>
     * </td>
     * <td>
     * <p>Number</p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td>
     * <p>size = 2.</p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>number</strong></p>
     * </td>
     * <td>
     * <p>Phone number.</p>
     * </td>
     * <td>
     * <p>Number</p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td>
     * <p>size = 8 or 9.</p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>type</strong></p>
     * </td>
     * <td>
     * <p>Phone type.</p>
     * </td>
     * <td>
     * <p>String</p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td>
     * <p>MOBILE or LANDLINE.</p>
     * </td>
     * </tr>
     * </tbody>
     * </table>
     * <p> </p>
     * <h2>OBJECT: phones<h2>
     * Same parameters as Object: mainPhone.
     * <p> </p>
     * <h2>OBJECT: mainAddress<h2>
     * <table>
     * <tbody>
     * <tr>
     * <td>
     * <p><strong>PARAMETER</strong></p>
     * </td>
     * <td>
     * <p><strong>DESCRIPTION</strong></p>
     * </td>
     * <td>
     * <p><strong>VALUE</strong></p>
     * </td>
     * <td>
     * <p><strong>REQUIRED</strong></p>
     * </td>
     * <td>
     * <p><strong>RESTRICTIONS</strong></p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>street</strong></p>
     * </td>
     * <td>
     * <p>Street name.</p>
     * </td>
     * <td>
     * <p>String</p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td>
     * <p>max size = 235.</p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>number</strong></p>
     * </td>
     * <td>
     * <p>Address number.</p>
     * </td>
     * <td>
     * <p>Number</p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td>
     * <p>value &gt; 0.</p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>complement</strong></p>
     * </td>
     * <td>
     * <p>Address complement.</p>
     * </td>
     * <td>
     * <p>String</p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td>
     * <p>max size = 255.</p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>zip</strong></p>
     * </td>
     * <td>
     * <p>Zip-code.</p>
     * </td>
     * <td>
     * <p>String</p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td>
     * <p>size = 8.</p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>neighborhood</strong></p>
     * </td>
     * <td>
     * <p>Neighborhood name.</p>
     * </td>
     * <td>
     * <p>String</p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td>
     * <p>max size = 255.</p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>city</strong></p>
     * </td>
     * <td>
     * <p>City name.</p>
     * </td>
     * <td>
     * <p>String</p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td>
     * <p>max size = 255.</p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>state</strong></p>
     * </td>
     * <td>
     * <p>State name.</p>
     * </td>
     * <td>
     * <p>String</p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td>
     * <p>size = 2.</p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>country</strong></p>
     * </td>
     * <td>
     * <p>Country name.</p>
     * </td>
     * <td>
     * <p>String</p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td>
     * <p>value = Brasil.</p>
     * </td>
     * </tr>
     * </tbody>
     * </table>
     * <p> </p>
     * <h2>OBJECT: addresses<h2>
     * Same parameters as index 4.3.3. Object: mainAddress.
     * <p> </p>
     * <h2>OBJECT: partners</h2>
     * <table>
     * <tbody>
     * <tr>
     * <td>
     * <p><strong>PARAMETER</strong></p>
     * </td>
     * <td>
     * <p><strong>DESCRIPTION</strong></p>
     * </td>
     * <td>
     * <p><strong>VALUE</strong></p>
     * </td>
     * <td>
     * <p><strong>REQUIRED</strong></p>
     * </td>
     * <td>
     * <p><strong>RESTRICTIONS</strong></p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>individuals</strong></p>
     * </td>
     * <td>
     * <p>Partner details (natural people).</p>
     * </td>
     * <td>
     * <p>Object</p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td> </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>companies</strong></p>
     * </td>
     * <td>
     * <p>Partner details (legal perople).</p>
     * </td>
     * <td>
     * <p>Object</p>
     * </td>
     * <td>
     * <p>No</p>
     * </td>
     * <td> </td>
     * </tr>
     * </tbody>
     * </table>
     * <p> </p>
     * <h2>OBJECT: individuals<h2>
     * <table>
     * <tbody>
     * <tr>
     * <td>
     * <p><strong>PARAMETER</strong></p>
     * </td>
     * <td>
     * <p><strong>DESCRIPTION</strong></p>
     * </td>
     * <td>
     * <p><strong>VALUE</strong></p>
     * </td>
     * <td>
     * <p><strong>REQUIRED</strong></p>
     * </td>
     * <td>
     * <p><strong>RESTRICTIONS</strong></p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>profile</strong></p>
     * </td>
     * <td>
     * <p>Hierarchical level.</p>
     * </td>
     * <td>
     * <p>String</p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td>
     * <p>[OWNER, ATTORNEY]</p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>type</strong></p>
     * </td>
     * <td>
     * <p>Profile type.</p>
     * </td>
     * <td>
     * <p>Array</p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td>
     * <p>[MASTER]</p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>name</strong></p>
     * </td>
     * <td>
     * <p>Partner name.</p>
     * </td>
     * <td>
     * <p>String</p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td>
     * <p>alphabetical; max size = 255.</p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>birthDate</strong></p>
     * </td>
     * <td>
     * <p>Partner birth date.</p>
     * </td>
     * <td>
     * <p>Date</p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td>
     * <p>Date in the past; ISO 8601 format.</p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>motherName</strong></p>
     * </td>
     * <td>
     * <p>Partner mother’s name.</p>
     * </td>
     * <td>
     * <p>String</p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td>
     * <p>alphabetical; max size = 255.</p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>gender</strong></p>
     * </td>
     * <td>
     * <p>Partner gender.</p>
     * </td>
     * <td>
     * <p>String</p>
     * </td>
     * <td>
     * <p>No</p>
     * </td>
     * <td>
     * <p>[MALE, FEMALE, OTHER, NOT SPECIFIED].</p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>maritalStatus</strong></p>
     * </td>
     * <td>
     * <p>Partner marital status.</p>
     * </td>
     * <td>
     * <p>String</p>
     * </td>
     * <td>
     * <p>No</p>
     * </td>
     * <td>
     * <p>[SINGLE, MARRIED, DIVORCED, WIDOWER]</p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>email</strong></p>
     * </td>
     * <td>
     * <p>Partner mail address.</p>
     * </td>
     * <td>
     * <p>String</p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td> </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>occupation</strong></p>
     * </td>
     * <td>
     * <p>Partner occupation.</p>
     * </td>
     * <td>
     * <p>String</p>
     * </td>
     * <td>
     * <p>No</p>
     * </td>
     * <td>
     * <p>max size = 255.</p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>isPep</strong></p>
     * </td>
     * <td>
     * <p>Politically exposed person.</p>
     * </td>
     * <td>
     * <p>Boolean</p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td>
     * <p>[YES, NO].</p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>revenue</strong></p>
     * </td>
     * <td>
     * <p>Partner annual revenue.</p>
     * </td>
     * <td>
     * <p>Number</p>
     * </td>
     * <td>
     * <p>No</p>
     * </td>
     * <td> </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>nationalRegistration</strong></p>
     * </td>
     * <td>
     * <p>Partner national registration ID.</p>
     * </td>
     * <td>
     * <p>Number</p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td>
     * <p>size = 11.</p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>identityCard</strong></p>
     * </td>
     * <td>
     * <p>State registration details.</p>
     * </td>
     * <td>
     * <p>Object</p>
     * </td>
     * <td>
     * <p>No</p>
     * </td>
     * <td> </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>mainPhone</strong></p>
     * </td>
     * <td>
     * <p>Partner main phone number.</p>
     * </td>
     * <td>
     * <p>Object</p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td> </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>phones</strong></p>
     * </td>
     * <td>
     * <p>Partner additional phone numbers.</p>
     * </td>
     * <td>
     * <p>Object</p>
     * </td>
     * <td>
     * <p>No</p>
     * </td>
     * <td> </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>mainAddress</strong></p>
     * </td>
     * <td>
     * <p>Partner main address.</p>
     * </td>
     * <td>
     * <p>Object</p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td> </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>addresses</strong></p>
     * </td>
     * <td>
     * <p>Partner additional addresses.</p>
     * </td>
     * <td>
     * <p>Object</p>
     * </td>
     * <td>
     * <p>No</p>
     * </td>
     * <td> </td>
     * </tr>
     * </tbody>
     * </table>
     * <p> </p>
     * <h2>OBJECT: identityCard</h2>
     * <table>
     * <tbody>
     * <tr>
     * <td>
     * <p><strong>PARAMETER</strong></p>
     * </td>
     * <td>
     * <p><strong>DESCRIPTION</strong></p>
     * </td>
     * <td>
     * <p><strong>VALUE</strong></p>
     * </td>
     * <td>
     * <p><strong>REQUIRED</strong></p>
     * </td>
     * <td>
     * <p><strong>RESTRICTIONS</strong></p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>number</strong></p>
     * </td>
     * <td> </td>
     * <td>
     * <p>Number</p>
     * </td>
     * <td>
     * <p>No</p>
     * </td>
     * <td>
     * <p>size = 7.</p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>dispatcher</strong></p>
     * </td>
     * <td> </td>
     * <td>
     * <p>String</p>
     * </td>
     * <td>
     * <p>No</p>
     * </td>
     * <td>
     * <p>max size = 255.</p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>federativeUnit</strong></p>
     * </td>
     * <td> </td>
     * <td>
     * <p>String</p>
     * </td>
     * <td>
     * <p>No</p>
     * </td>
     * <td>
     * <p>size = 2.</p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>emissionDate</strong></p>
     * </td>
     * <td> </td>
     * <td>
     * <p>Date</p>
     * </td>
     * <td>
     * <p>No</p>
     * </td>
     * <td>
     * <p>Date in the past; ISO 8601 format.</p>
     * </td>
     * </tr>
     * </tbody>
     * </table>
     * <p> </p>
     * <h2>OBJECT: companies<h2>
     * <table>
     * <tbody>
     * <tr>
     * <td>
     * <p><strong>Parameter</strong></p>
     * </td>
     * <td>
     * <p><strong>Description</strong></p>
     * </td>
     * <td>
     * <p><strong>Value</strong></p>
     * </td>
     * <td>
     * <p><strong>Required</strong></p>
     * </td>
     * <td>
     * <p><strong>Restrictions</strong></p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong> company</strong></p>
     * </td>
     * <td>
     * <p>Company details.</p>
     * </td>
     * <td>
     * <p>Array</p>
     * </td>
     * <td> </td>
     * <td> </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>nationalRegistration</strong></p>
     * </td>
     * <td>
     * <p>Company national registration (CNPJ).</p>
     * </td>
     * <td>
     * <p>String</p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td>
     * <p>size = 14.</p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>legalName</strong></p>
     * </td>
     * <td>
     * <p>Company legal name.</p>
     * </td>
     * <td>
     * <p>String</p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td>
     * <p>max size = 255.</p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>legalNature</strong></p>
     * </td>
     * <td>
     * <p>Company legal nature.</p>
     * </td>
     * <td>
     * <p>String</p>
     * </td>
     * <td>
     * <p>No</p>
     * </td>
     * <td>
     * <p>size = 4.</p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>legalStatus</strong></p>
     * </td>
     * <td>
     * <p>Company legal status.</p>
     * </td>
     * <td>
     * <p>String</p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td>
     * <p>max size = 255.</p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>tradeName</strong></p>
     * </td>
     * <td>
     * <p>Company trade name.</p>
     * </td>
     * <td>
     * <p>String</p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td>
     * <p>max size = 255.</p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>establishmentDate</strong></p>
     * </td>
     * <td>
     * <p>Company foundation date.</p>
     * </td>
     * <td>
     * <p>Date</p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td>
     * <p>Date in the past; ISO 8601 format.</p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>establishmentFormat</strong></p>
     * </td>
     * <td>
     * <p>Company establishment format.</p>
     * </td>
     * <td>
     * <p>String</p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td>
     * <p>[EI, MEI, EIRELI, LTDA, SS, SA, ME, EPP, EMGP].</p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>stateRegistration</strong></p>
     * </td>
     * <td>
     * <p>Company state registration.</p>
     * </td>
     * <td>
     * <p>Integer</p>
     * </td>
     * <td>
     * <p>No</p>
     * </td>
     * <td>
     * <p>max size = 16.</p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>email</strong></p>
     * </td>
     * <td>
     * <p>Company mail address.</p>
     * </td>
     * <td>
     * <p>String</p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td> </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>revenue</strong></p>
     * </td>
     * <td>
     * <p>Company annual revenue.</p>
     * </td>
     * <td>
     * <p>Double </p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td>
     * <p>default: 0.0.</p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>mainCnae</strong></p>
     * </td>
     * <td>
     * <p>Main cnae.</p>
     * </td>
     * <td>
     * <p>Number</p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td>
     * <p>size =  6 or 7.</p>
     * </td>
     * </tr>
     * </tbody>
     * </table>
     * <table>
     * 
     * <p> </p>
     * <h2>OBJECT: productSettings<h2>
     * <table>
     * <tbody>
     * <tr>
     * <td>
     * <p><strong>PARAMETER</strong></p>
     * </td>
     * <td>
     * <p><strong>DESCRIPTION</strong></p>
     * </td>
     * <td>
     * <p><strong>VALUE</strong></p>
     * </td>
     * <td>
     * <p><strong>REQUIRED</strong></p>
     * </td>
     * <td>
     * <p><strong>RESTRICTIONS</strong></p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>idProduct</strong></p>
     * </td>
     * <td>
     * <p>Company product ID.</p>
     * </td>
     * <td>
     * <p>Number</p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td>
     * <p>size = 1.</p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>externalAccountNumber</strong></p>
     * </td>
     * <td>
     * <p>External authorization.</p>
     * </td>
     * <td>
     * <p>String</p>
     * </td>
     * <td>
     * <p>No</p>
     * </td>
     * <td>
     * <p>max size = 16.</p>
     * </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>termsAndConditionsTokens</strong></p>
     * </td>
     * <td>
     * <p>Terms and conditions tokens details.</p>
     * </td>
     * <td>
     * <p>Object</p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td> </td>
     * </tr>
     * <tr>
     * <td>
     * <p><strong>deviceIdentification</strong></p>
     * </td>
     * <td>
     * <p>Device identification details.</p>
     * </td>
     * <td>
     * <p>Object</p>
     * </td>
     * <td>
     * <p>Yes</p>
     * </td>
     * <td> </td>
     * </tr>
     * </tbody>
     * </table></h2></h2></table></h2></h2></h2></h2></h2></h2></h2></h2></h2></h2></h2></h2></h2
     * ></h2>
     *
     * @param {string} authorization TODO: type description here
     * @param {string} contentType TODO: type description here
     * @param {MRegistrationsrequest} body TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createRegistrations(authorization, contentType, body, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.getBaseUri(_servers.SERVER_2);

        const _pathUrl = '/registrations';
        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'content-type': 'application/json; charset=utf-8',
            Authorization: authorization,
            'Content-Type': contentType,
            'user-agent': 'APIMATIC 2.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
            body: _apiHelper.jsonSerialize(body),
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'MRegistrations');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * TODO: Add Description
     *
     * @param {string} documentType TODO: type description here
     * @param {string} contentType TODO: type description here
     * @param {string} authorization TODO: type description here
     * @param {string} file TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static createRegistrationsRegistrationIdDocumentsDocumentTypeType(documentType,
        contentType,
        authorization,
        file,
        callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.getBaseUri(_servers.SERVER_2);

        const _pathUrl = '/registrations/791d1dbe-f6cd-48cd-a21b-dce0dbd83201/documents';
        let _queryBuilder = `${_baseUri}${_pathUrl}`;

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            documentType,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'Content-Type': contentType,
            Authorization: authorization,
            'user-agent': 'APIMATIC 2.0',
        };

        // prepare form data
        const _formData = {
            File: _fs.createReadStream(File),
        };

        // remove null values
        _apiHelper.cleanObject(_formData);

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            headers: _headers,
            formData: _formData,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper()
                .mapObject(parsed, 'HttpsCompaniesHmlCaradhrasIoV1Registrations791d1dbeF6cd48cdA21bDce0dbd83201DocumentsDocumentTypePASSPORT');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * TODO: Add Description
     *
     * @param {string} contentType TODO: type description here
     * @param {string} authorization TODO: type description here
     * @param {MRegistrationsRegistrationIdRequest} body TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static updateRegistrationsRegistrationId(contentType, authorization, body, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.getBaseUri(_servers.SERVER_2);

        const _pathUrl = '/registrations/791d1dbe-f6cd-48cd-a21b-dce0dbd83201';
        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'content-type': 'application/json; charset=utf-8',
            'Content-Type': contentType,
            Authorization: authorization,
            'user-agent': 'APIMATIC 2.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'PUT',
            headers: _headers,
            body: _apiHelper.jsonSerialize(body),
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper()
                .mapObject(parsed, 'MRegistrationsRegistrationId');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * TODO: Add Description
     *
     * @param {string} contentType TODO: type description here
     * @param {string} authorization TODO: type description here
     * @param {MRegisteredCompaniesCompanyIdRequest} body TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static updateRegisteredCompaniesCompanyId(contentType, authorization, body, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.getBaseUri(_servers.SERVER_2);

        const _pathUrl = '/registered/companies/9914293';
        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'content-type': 'application/json; charset=utf-8',
            'Content-Type': contentType,
            Authorization: authorization,
            'user-agent': 'APIMATIC 2.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'PUT',
            headers: _headers,
            body: _apiHelper.jsonSerialize(body),
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper().mapObject(parsed, 'MRegisteredCompanies9914293');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * TODO: Add Description
     *
     * @param {string} contentType TODO: type description here
     * @param {string} authorization TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getRegistrationsRegistrationId(contentType, authorization, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.getBaseUri(_servers.SERVER_2);

        const _pathUrl = '/registrations/791d1dbe-f6cd-48cd-a21b-dce0dbd83201';
        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'Content-Type': contentType,
            Authorization: authorization,
            'user-agent': 'APIMATIC 2.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper()
                .mapObject(parsed, 'MRegistrations791d1dbeF6cd48cdA21bDce0dbd83201');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * TODO: Add Description
     *
     * @param {string} contentType TODO: type description here
     * @param {string} authorization TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getRegistrationsRegistrationIdDocuments(contentType, authorization, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.getBaseUri(_servers.SERVER_2);

        const _pathUrl = '/registrations/c6f09995-af8c-4e0f-89f4-1beca1da7b5f/documents';
        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'Content-Type': contentType,
            Authorization: authorization,
            'user-agent': 'APIMATIC 2.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper()
                .mapObject(parsed, 'MRegistrationsRegistrationIdC6f09995Af8c4e0f89f41beca1da7b5fDocuments');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * TODO: Add Description
     *
     * @param {string} contentType TODO: type description here
     * @param {string} authorization TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getRegistrationsStatusesStatus(contentType, authorization, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.getBaseUri(_servers.SERVER_2);

        const _pathUrl = '/registrations/statuses/WAITING_DOCUMENTS';
        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'Content-Type': contentType,
            Authorization: authorization,
            'user-agent': 'APIMATIC 2.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper()
                .mapObject(parsed, 'MRegistrationsStatusesStatus');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * TODO: Add Description
     *
     * @param {string} contentType TODO: type description here
     * @param {string} authorization TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getRegistrationsCompaniesCNPJPartnersCPF(contentType, authorization, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.getBaseUri(_servers.SERVER_2);

        const _pathUrl = '/registrations/companies/26054940000157/partners/38768069847';
        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'Content-Type': contentType,
            Authorization: authorization,
            'user-agent': 'APIMATIC 2.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper()
                .mapObject(parsed, 'MRegistrationsCompaniesCNPJPartnersCPF');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
    /**
     * TODO: Add Description
     *
     * @param {string} contentType TODO: type description here
     * @param {string} authorization TODO: type description here
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static getRegisteredCompaniesCompanyId(contentType, authorization, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.getBaseUri(_servers.SERVER_2);

        const _pathUrl = '/registered/companies/9914293';
        const _queryBuilder = `${_baseUri}${_pathUrl}`;

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare headers
        const _headers = {
            accept: 'application/json',
            'Content-Type': contentType,
            Authorization: authorization,
            'user-agent': 'APIMATIC 2.0',
        };

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            headers: _headers,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    let parsed = JSON.parse(_response.body);
                    parsed = _baseController.getObjectMapper()
                .mapObject(parsed, 'MRegisteredCompanies99142931');
                    _callback(null, parsed, _context);
                    _fulfill(parsed);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }
}
module.exports = CompaniesController;
