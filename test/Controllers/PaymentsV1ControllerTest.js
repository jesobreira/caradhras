/**
 * BaaSCaradhrasAPIDocumentationLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const chai = require('chai');
const assert = chai.assert;
const TestHelper = require("../TestHelper");
const APIHelper = require("../../lib/APIHelper");
const testerlib = require("../../lib");
const testConfiguration = require("../TestBootstrap");
const baseController = require("../../lib/Controllers/BaseController");

const controller = testerlib.PaymentsV1Controller;
const MPaymentsV1 = testerlib.MPaymentsV1;
const MPaymentV1Scheduler = testerlib.MPaymentV1Scheduler;
const MPaymentV1Schedulerrequest = testerlib.MPaymentV1Schedulerrequest;
const MPaymentsV1Receipts = testerlib.MPaymentsV1Receipts;
const MPaymentsV1Scheduler = testerlib.MPaymentsV1Scheduler;
const MPaymentsV1SchedulerIdSchedule = testerlib.MPaymentsV1SchedulerIdSchedule;

describe("PaymentsV1Controller Tests", function tests() {
    this.timeout(testConfiguration.TEST_TIMEOUT);

    /**
     * <p>Method that allows to make the payments of a specific Bank Slip. For doing this, you'll need the assignor of the payment with the specific idAccount, barcode number, due date, amount and description</p>
<blockquote>
<p>If you want to check the complete documentation, see below all the parameters and responses from payment v1:</p>
<ul>
<li><a href="https://s3-sa-east-1.amazonaws.com/baas-docs.caradhras.io/Payment_v1.pdf">Payment v1 Documentation</a></li>
</ul>
</blockquote>

     */
    it("should testMPaymentsV1 response", function testMPaymentsV1Test(done) {
        // parameters for the API call
        let authorization = '{{tokenOauth}}';
        let accept = 'application/json';
        let contentType = 'application/json';
        let body = '{\n    "idAccount": "10057584", \n    "description": "Pagamento solicitado pelo usuário", \n    "barCodeNumber": "23793000000000000003391090109000078600076640", \n    "dueDate": "2019-02-20T00:00:00.000", \n    "assignor": "ELETROPAULO", \n    "assignorDocument": "Dock"\n    "discount": 0, \n    "interest": 0, \n    "fine": 0, \n    "amount": 14.0\n}';

        controller.createPaymentsV1(authorization, accept, contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(201, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Date'] = null;
            headers['Content-Type'] = null;
            headers['Content-Length'] = null;
            headers['Connection'] = null;
            headers['x-amzn-RequestId'] = null;
            headers['x-amzn-Remapped-content-length'] = null;
            headers['x-amz-apigw-id'] = null;
            headers['etag'] = null;
            headers['x-powered-by'] = null;
            headers['X-Amzn-Trace-Id'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "idAccount": "11",
  "idAdjustment": 47254,
  "barCodeNumber": "413497030060000269528626839426026179751019985780",
  "dueDate": "2019-02-20T00: 00: 00",
  "description": "Pagamento solicitado pelo usuário",
  "assignor": "ELETROPAULO",
  "assignorDocument": "Dock",
  "discount": 0,
  "interest": 0,
  "fine": 0,
  "amount": 14,
  "transactionCode": "475307486-0506-640178675 884153-617497-561530",
  "transactionDate": "2019-08-27T12: 23: 50.274",
  "idPaymentConfirmation": "7876b761-d599-47a5-a308-0d5e0f0a62b4",
  "status": "PAID"
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>Method that allows to make the schedulling of the payment of a specific Bank Slip. For doing this, you'll need the assignor of the payment with the specific idAccount, barcode number, due date, amount and description.</p>

     */
    it("should testMPaymentV1Scheduler response", function testMPaymentV1SchedulerTest(done) {
        // parameters for the API call
        let authorization = '{{tokenOauth}}';
        let accept = 'application/json';
        let contentType = 'application/json';
        let body = baseController.getObjectMapper().mapObject({
  "dateSchedule": "2019-09-15",
  "payload": {
    "idAccount": 15,
    "description": "Agendamento Teste",
    "barCodeNumber": "413497030060000269528626839426022179751000002211",
    "dueDate": "2019-06-06T11:40:11",
    "assignor": "Test Assignor",
    "assignorDocument": "Dock",
    "discount": 0,
    "interest": 0,
    "fine": 0,
    "amount": 1.5
  }
}, 'MPaymentV1Schedulerrequest');

        controller.createPaymentV1Scheduler(authorization, accept, contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(201, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Date'] = null;
            headers['Content-Type'] = null;
            headers['Content-Length'] = null;
            headers['Connection'] = null;
            headers['x-amzn-RequestId'] = null;
            headers['x-amzn-Remapped-content-length'] = null;
            headers['x-amz-apigw-id'] = null;
            headers['etag'] = null;
            headers['x-powered-by'] = null;
            headers['X-Amzn-Trace-Id'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "message": "Payment scheduled for 2019-09-15.",
  "result": {
    "idSchedule": "c1787b9a-e9bb-4e3a-b448-39c5297cc326",
    "payload": {
      "idAccount": 15,
      "description": "Agendamento Teste",
      "barCodeNumber": "413497030060000269528626839426022179751000002211",
      "dueDate": "2019-06-06T11: 40: 11",
      "assignor": "Test Assignor",
      "assignorDocument": "Dock",
      "discount": 0,
      "interest": 0,
      "fine": 0,
      "amount": 1.5,
      "status": "SCHEDULED"
    }
  }
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>This resource allows to goes through all the receipts, accepting filter, pagination and order as parameters.</p>

     */
    it("should testMPaymentsV1Receipts response", function testMPaymentsV1ReceiptsTest(done) {
        // parameters for the API call
        let idAccount = 'Integer';
        let idAdjustment = 'Integer';
        let barCodeNumber = 'String';
        let transactionCode = 'String';
        let date = 'String';
        let from = 'String';
        let to = 'String';
        let status = 'String';
        let authorization = '{{tokenOauth}}';

        controller.getPaymentsV1Receipts(idAccount, idAdjustment, barCodeNumber, transactionCode, date, from, to, status, authorization, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Date'] = null;
            headers['Content-Type'] = null;
            headers['Content-Length'] = null;
            headers['Connection'] = null;
            headers['x-amzn-RequestId'] = null;
            headers['x-amzn-Remapped-content-length'] = null;
            headers['x-amz-apigw-id'] = null;
            headers['etag'] = null;
            headers['x-powered-by'] = null;
            headers['X-Amzn-Trace-Id'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "previousPage": 1,
  "currentPage": 1,
  "nextPage": 1,
  "last": true,
  "totalPages": 1,
  "totalItems": 1,
  "maxItemsPerPage": 20,
  "totalItemsPage": 1,
  "items": [
    {
      "id": 8004,
      "idAccount": 11,
      "idAdjustment": 47254,
      "idIssuer": 103,
      "barCodeNumber": "413497030060000269528626839426026179751019985780",
      "description": "Pagamento solicitado pelo usuário",
      "dueDate": "2019-02-20T00: 00: 00",
      "fine": 0,
      "assignor": "ELETROPAULO",
      "transactionCode": "475307486-0506-640178675 884153-617497-561530",
      "transactionDate": "2019-08-27T12: 23: 50.274",
      "status": "PAID",
      "idPaymentConfirmation": "7876b761-d599-47a5-a308-0d5e0f0a62b4",
      "assignorDocument": "Dock",
      "discount": 0,
      "interest": 0,
      "amount": 14
    }
  ]
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>This goes through all the payments schedulled, accepting filter, pagination and order as parameters</p>
<p>It's important to notice that there are different combinations of scheduller being executed/not executed/canceled and payments being executed/not executed. All of those are described in the "status" parameter in the table below.</p>

     */
    it("should testMPaymentsV1Scheduler response", function testMPaymentsV1SchedulerTest(done) {
        // parameters for the API call
        let idSchedule = 'String';
        let idAccount = 'Integer';
        let date = 'Integer';
        let from = 'Integer';
        let to = 'Integer';
        let status = 'String';
        let authorization = '{{tokenOauth}}';

        controller.getPaymentsV1Scheduler(idSchedule, idAccount, date, from, to, status, authorization, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Date'] = null;
            headers['Content-Type'] = null;
            headers['Content-Length'] = null;
            headers['Connection'] = null;
            headers['x-amzn-RequestId'] = null;
            headers['x-amzn-Remapped-content-length'] = null;
            headers['x-amz-apigw-id'] = null;
            headers['etag'] = null;
            headers['x-powered-by'] = null;
            headers['X-Amzn-Trace-Id'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "previousPage": 1,
  "currentPage": 1,
  "nextPage": 1,
  "last": true,
  "totalPages": 1,
  "totalItems": 1,
  "maxItemsPerPage": 2,
  "totalItemsPage": 1,
  "items": [
    {
      "id": 103,
      "idIssuer": 103,
      "idAccount": 15,
      "idSchedule": "c1787b9a-e9bb-4e3a-b448-39c5297cc326",
      "scheduleDate": "2019-09-15",
      "payload": {
        "fine": 0,
        "amount": 1.5,
        "status": "SCHEDULED",
        "dueDate": "2019-06-06T11: 40: 11",
        "assignor": "Test Assignor",
        "discount": 0,
        "interest": 0,
        "idAccount": 15,
        "description": "Agendamento Teste",
        "barCodeNumber": "413497030060000269528626839426022179751000002211",
        "assignorDocument": "Dock"
      },
      "createdAt": "2019-08-27T13: 39: 18.522",
      "updatedAt": null,
      "status": "SCHEDULED",
      "result": null
    }
  ]
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

});
