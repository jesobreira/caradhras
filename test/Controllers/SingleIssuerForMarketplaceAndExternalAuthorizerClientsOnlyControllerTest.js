/**
 * BaaSCaradhrasAPIDocumentationLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const chai = require('chai');
const assert = chai.assert;
const TestHelper = require("../TestHelper");
const APIHelper = require("../../lib/APIHelper");
const testerlib = require("../../lib");
const testConfiguration = require("../TestBootstrap");

const controller = testerlib.SingleIssuerForMarketplaceAndExternalAuthorizerClientsOnlyController;
const MBanktransfers = testerlib.MBanktransfers;

describe("SingleIssuerForMarketplaceAndExternalAuthorizerClientsOnlyController Tests", function tests() {
    this.timeout(testConfiguration.TEST_TIMEOUT);

    /**
     * <p>"accountType" return: </p>




<p></p>



<table>
    <tr>
      <th>accountType</th>
      <th>description</th>
    </tr>
    <tr>
      <td>cc</td>
      <td>Conta corrente</td>
    </tr>
    <tr>
      <td>pp</td>
      <td>Conta poupan√ßa</td>
    </tr>

 </table>




     */
    it("should testMSingleIssuerAccount response", function testMSingleIssuerAccountTest(done) {
        // parameters for the API call
        let contentType = 'application/json';
        let authorization = '{{tokenOauth}}';

        controller.getSingleIssuerAccount(contentType, authorization, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = null;
            headers['Content-Length'] = null;
            headers['Connection'] = null;
            headers['Date'] = null;
            headers['x-amzn-RequestId'] = null;
            headers['x-amzn-Remapped-Content-Length'] = null;
            headers['x-amz-apigw-id'] = null;
            headers['X-Amzn-Trace-Id'] = null;
            headers['X-Cache'] = null;
            headers['Via'] = null;
            headers['X-Amz-Cf-Id'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "idOriginAccount": 10057584,
  "subIssuerCode": "103",
  "description": "Transferbank Description",
  "identificator": 123,
  "beneficiary": {
    "type": "fisico",
    "docIdCpfCnpjEinSSN": 47989793091,
    "name": "Jose da Silva Neves",
    "bankId": 237,
    "agency": 2309,
    "agencyDigit": "",
    "account": 121084,
    "accountDigit": "8",
    "accountType": "cc"
  },
  "value": 5.55,
  "idIssuer": 103,
  "UID": "103.cb1e1991-33b7-11e9-9111-02dec2710755",
  "date": "2019-02-18T17: 00: 12.585",
  "transactionCode": "769982744-9673-993539822 040370-459208-055886",
  "idAdjustment": 6229
}, false, true, false));
            done();
        }).catch(() => undefined);
    });
});
