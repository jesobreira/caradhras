/**
 * BaaSCaradhrasAPIDocumentationLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const chai = require('chai');
const assert = chai.assert;
const TestHelper = require("../TestHelper");
const APIHelper = require("../../lib/APIHelper");
const testerlib = require("../../lib");
const testConfiguration = require("../TestBootstrap");

const controller = testerlib.OAuth20Controller;
const MOauth2Token = testerlib.MOauth2Token;

describe("OAuth20Controller Tests", function tests() {
    this.timeout(testConfiguration.TEST_TIMEOUT);

    /**
     * <p>OAuth 2.0 is the industry-standard protocol for authorization. OAuth 2.0 focuses on client developer simplicity while providing specific authorization flows for web applications, desktop applications, mobile phones, and living room devices.</p>
<p>For the consumption of our API's, we chose the <code>client_credentials</code> stream. We will provide the credentials in the form <code>client_id</code>, <code>client_secret</code>.</p>
<p>At the first call of our API's, your application must authenticate with our credentials provider through a POST request at url <code>https://auth.hml.caradhras.io/oauth2/token?grant_type=client_credentials</code> using the form of authentication Basic Auth with the credentials we provided in the previous step, including the <code>Content-Type</code> header with the <code>application/x-www-form-urlencoded</code> value. Content will be returned as follows:</p>
<pre class="click-to-expand-wrapper is-snippet-wrapper"><code>{
    "access_token": "eyJraWQiOiXXXXXXXXXXXXXX.eyJziI2cXXXXXXXXXXXXXXXXXXXXQ.PSvxxxxxxxxxxxxxxxxxxM23GPFNuA",
    "expires_in": 3600,
    "token_type": "Bearer"
}
</code></pre><ul>
<li><p>The <code>expires_in</code> field determines the validity time of the token in seconds. When it is close to expiration, a new call must be made to obtain a new token.</p>
</li>
<li><p>Once this is done, simply call the desired resource by passing the contents of the access_token to a Header of the request named Authorization in the following:</p>
</li>
</ul>
<pre class="click-to-expand-wrapper is-snippet-wrapper"><code>{
    "Authorization": "Bearer eyJraWQiOiXXXXXXXXXXXXXX.eyJziI2cXXXXXXXXXXXXXXXQ.PSvxxxxxxxxxxxxxxxxxxM23GPFNuA"
}
</code></pre><h4 id="safety-recommendations">Safety Recommendations</h4>
<p>Here are some recommendations for use:</p>
<ul>
<li>Do not store the client_id and client_secret in the same application database that will consume resources.</li>
<li>Do not in any way leave the credentials available to people / systems that should not have access to them.</li>
<li>Do not version the credentials along with the application source code.</li>
<li>In case of compromise of the credentials, you must immediately let our team know to revoke them.</li>
<li>The custody of the credentials is the responsibility of the client.</li>
<li></li>
</ul>

     */
    it("should testMOauth2Token response", function testMOauth2TokenTest(done) {
        // parameters for the API call
        let grantType = 'client_credentials';
        let contentType = 'application/x-www-form-urlencoded';

        controller.createOauth2Token(grantType, contentType, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = null;
            headers['Transfer-Encoding'] = null;
            headers['Connection'] = null;
            headers['Date'] = null;
            headers['X-Application-Context'] = null;
            headers['X-Content-Type-Options'] = null;
            headers['X-XSS-Protection'] = null;
            headers['Cache-Control'] = null;
            headers['Pragma'] = null;
            headers['Expires'] = null;
            headers['Strict-Transport-Security'] = null;
            headers['X-Frame-Options'] = null;
            headers['Server'] = null;
            headers['X-Cache'] = null;
            headers['Via'] = null;
            headers['X-Amz-Cf-Id'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "access_token": "eyJraWQiOiJiNGVIeHFZSzRDc1paNVByZDlNSVhTTzlwOGY3OURWdmwyRVlpTm55WFRBPSIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI1ajA1NjQxNGNuYWo1dGxuZGdmMWVpYzllYiIsInRva2VuX3VzZSI6ImFjY2VzcyIsInNjb3BlIjoiY2FyYWRocmFzXC9yZWFkIGNhcmFkaHJhc1wvd3JpdGUiLCJhdXRoX3RpbWUiOjE1NTExMDgwMTAsImlzcyI6Imh0dHBzOlwvXC9jb2duaXRvLWlkcC51cy1lYXN0LTEuYW1hem9uYXdzLmNvbVwvdXMtZWFzdC0xX1g2c1Vudmo0biIsImV4cCI6MTU1MTExMTYxMCwiaWF0IjoxNTUxMTA4MDEwLCJ2ZXJzaW9uIjoyLCJqdGkiOiJiZmRlODYwOC1lZjNhLTRjNjAtOTQzNy1mOTdhMmZiNjI1NmYiLCJjbGllbnRfaWQiOiI1ajA1NjQxNGNuYWo1dGxuZGdmMWVpYzllYiJ9.QTRatVDTzsuiV1jcPKyqEuftxj2U1Gdu1_cKN2GWG_Sy7JGJAOVKXAg-pojMhM4R1CwE42Js7lyGobCSf1pdjfmUblRo0WOkHo1gqKFdJ6FI-F17ealU-7mvrivHF5m5vCMdusPQ7Punx093bHODNOQ_vrhvul2Re7s_Kf7Hp5jMzFjy21cQtCoGSHNMu6GUnW0BPgNwwD7Io6dcmGN9blzgZZ9576yaiawJf5MzH3HcBH-9HV9OhpkDZ91PquKMOsIvyZfn1NZH5-6GcnI_KTW42v_bhNli0a3m86DtwcWHEi0m_HmuXS-vI4smy_9XnYEwCdf0N6MtLLYVjXv7RQ",
  "expires_in": 3600,
  "token_type": "Bearer"
}, false, true, false));
            done();
        }).catch(() => undefined);
    });
});
