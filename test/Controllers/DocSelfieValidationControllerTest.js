/**
 * BaaSCaradhrasAPIDocumentationLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const chai = require('chai');
const assert = chai.assert;
const TestHelper = require("../TestHelper");
const APIHelper = require("../../lib/APIHelper");
const testerlib = require("../../lib");
const config = require("../../lib/configuration");
const testConfiguration = require("../TestBootstrap");

const controller = testerlib.DocSelfieValidationController;
const DocumentsValidation = testerlib.DocumentsValidation;
const DocumentsValidationRules = testerlib.DocumentsValidationRules;
const SelfiesValidation = testerlib.SelfiesValidation;
const SelfiesValidationRules = testerlib.SelfiesValidationRules;

describe("DocSelfieValidationController Tests", function tests() {
    this.timeout(testConfiguration.TEST_TIMEOUT);

    /**
     * TODO: Add Description
     */
    it("should testDocumentsValidationRules response", function testDocumentsValidationRulesTest(done) {
        // parameters for the API call
        let contentType = 'application/pdf';
        let authorization = '{{tokenOauth}}';

        controller.getDocumentsValidationRules(contentType, authorization, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = null;
            headers['Content-Length'] = null;
            headers['Connection'] = null;
            headers['Date'] = null;
            headers['x-amzn-RequestId'] = null;
            headers['x-amzn-Remapped-Content-Length'] = null;
            headers['x-amz-apigw-id'] = null;
            headers['X-Amzn-Trace-Id'] = null;
            headers['X-Cache'] = null;
            headers['Via'] = null;
            headers['X-Amz-Cf-Pop'] = null;
            headers['X-Amz-Cf-Id'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "message": "Rules to upload Documents.",
  "instructions": {
    "header": {
      "Content-Type": {
        "required": true,
        "allowed": [
          "application/pdf",
          "image/jpeg"
        ],
        "warning": "Content-Type must be exactly the same as the Binary file. If the file is .pdf the Content-Type must be application/pdf. If the file is .jpg then Content-Type must be image/jpeg. "
      }
    },
    "params": {
      "person": {
        "required": true,
        "allowed": "Person id existing for Issuer."
      },
      "category": {
        "required": true,
        "allowed": [
          "rg",
          "cpf",
          "cnh",
          "passport",
          "cie",
          "crlv"
        ]
      },
      "side": {
        "required": true,
        "allowed": [
          "front",
          "back",
          "both"
        ]
      }
    },
    "body": {
      "required": true,
      "allowed": "PDF or JPEG as Binary file."
    }
  }
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * TODO: Add Description
     */
    it("should testSelfiesValidationRules response", function testSelfiesValidationRulesTest(done) {
        // parameters for the API call
        let authorization = '{{CARADHRAS_TOKEN}}';

        controller.getSelfiesValidationRules(authorization, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = null;
            headers['Content-Length'] = null;
            headers['Connection'] = null;
            headers['Date'] = null;
            headers['x-amzn-RequestId'] = null;
            headers['x-amzn-Remapped-Content-Length'] = null;
            headers['x-amz-apigw-id'] = null;
            headers['X-Amzn-Trace-Id'] = null;
            headers['X-Cache'] = null;
            headers['Via'] = null;
            headers['X-Amz-Cf-Pop'] = null;
            headers['X-Amz-Cf-Id'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "message": "Rules to upload Selfies.",
  "instructions": {
    "header": {
      "Content-Type": {
        "required": true,
        "allowed": "image/jpeg"
      }
    },
    "params": {
      "person": {
        "required": true,
        "allowed": "Person id existing for Issuer."
      }
    },
    "body": {
      "required": true,
      "allowed": "JPEG/JPG image as Binary file."
    }
  }
}, false, true, false));
            done();
        }).catch(() => undefined);
    });
});
