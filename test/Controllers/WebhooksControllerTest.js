/**
 * BaaSCaradhrasAPIDocumentationLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const chai = require('chai');
const assert = chai.assert;
const TestHelper = require("../TestHelper");
const APIHelper = require("../../lib/APIHelper");
const testerlib = require("../../lib");
const testConfiguration = require("../TestBootstrap");

const controller = testerlib.WebhooksController;
const MOauth2Token = testerlib.MOauth2Token;
const MRegistrationsrequest = testerlib.MRegistrationsrequest;
const Company = testerlib.Company;
const MainPhone = testerlib.MainPhone;
const Phone = testerlib.Phone;
const MainAddress = testerlib.MainAddress;
const Address = testerlib.Address;
const Partners = testerlib.Partners;
const Individual = testerlib.Individual;
const IdentityCard = testerlib.IdentityCard;
const Address1 = testerlib.Address1;
const Company1 = testerlib.Company1;
const ProductSettings = testerlib.ProductSettings;
const DeviceIdentification = testerlib.DeviceIdentification;
const MRegistrations = testerlib.MRegistrations;
const Result = testerlib.Result;
const HttpsCompaniesHmlCaradhrasIoV1Registrations791d1dbeF6cd48cdA21bDce0dbd83201DocumentsDocumentTypePASSPORT = testerlib.HttpsCompaniesHmlCaradhrasIoV1Registrations791d1dbeF6cd48cdA21bDce0dbd83201DocumentsDocumentTypePASSPORT;
const Result1 = testerlib.Result1;
const MRegistrationsRegistrationIdRequest = testerlib.MRegistrationsRegistrationIdRequest;
const MRegistrationsRegistrationId = testerlib.MRegistrationsRegistrationId;
const MRegisteredCompaniesCompanyIdRequest = testerlib.MRegisteredCompaniesCompanyIdRequest;
const MRegisteredCompanies9914293 = testerlib.MRegisteredCompanies9914293;
const MRegistrations791d1dbeF6cd48cdA21bDce0dbd83201 = testerlib.MRegistrations791d1dbeF6cd48cdA21bDce0dbd83201;
const Result3 = testerlib.Result3;
const Company6 = testerlib.Company6;
const Partners3 = testerlib.Partners3;
const Individual3 = testerlib.Individual3;
const MRegistrationsRegistrationIdC6f09995Af8c4e0f89f41beca1da7b5fDocuments = testerlib.MRegistrationsRegistrationIdC6f09995Af8c4e0f89f41beca1da7b5fDocuments;
const Result4 = testerlib.Result4;
const MRegistrationsStatusesStatus = testerlib.MRegistrationsStatusesStatus;
const Result5 = testerlib.Result5;
const Company8 = testerlib.Company8;
const Address12 = testerlib.Address12;
const MainPhone12 = testerlib.MainPhone12;
const Phone12 = testerlib.Phone12;
const MainAddress12 = testerlib.MainAddress12;
const Partners4 = testerlib.Partners4;
const Individual4 = testerlib.Individual4;
const MainPhone13 = testerlib.MainPhone13;
const Company9 = testerlib.Company9;
const Company10 = testerlib.Company10;
const ProductSettings4 = testerlib.ProductSettings4;
const TermsAndConditionsTokens = testerlib.TermsAndConditionsTokens;
const StatusHistory = testerlib.StatusHistory;
const MRegistrationsCompaniesCNPJPartnersCPF = testerlib.MRegistrationsCompaniesCNPJPartnersCPF;
const Result6 = testerlib.Result6;
const Partner = testerlib.Partner;
const MRegisteredCompanies99142931 = testerlib.MRegisteredCompanies99142931;
const Result7 = testerlib.Result7;
const MIndividualsAccounts = testerlib.MIndividualsAccounts;
const Address19 = testerlib.Address19;
const Phone19 = testerlib.Phone19;
const MIndividualsrequest = testerlib.MIndividualsrequest;
const Address20 = testerlib.Address20;
const Phone20 = testerlib.Phone20;
const MIndividualsRegisteredUnderContingency = testerlib.MIndividualsRegisteredUnderContingency;
const MIndividuals = testerlib.MIndividuals;
const Item = testerlib.Item;
const MIndividualsId = testerlib.MIndividualsId;
const MIndividualsId1 = testerlib.MIndividualsId1;
const MIndividualsAccountsAccountIdAdditionalsRequest = testerlib.MIndividualsAccountsAccountIdAdditionalsRequest;
const MEnderecos = testerlib.MEnderecos;
const MEnderecosId = testerlib.MEnderecosId;
const MEnderecosId2 = testerlib.MEnderecosId2;
const MTelefones = testerlib.MTelefones;
const MTelefonesId = testerlib.MTelefonesId;
const MTelefones1 = testerlib.MTelefones1;
const Content = testerlib.Content;
const MEnderecosCorrespondenciaId = testerlib.MEnderecosCorrespondenciaId;
const MContasIdVinculosrequest = testerlib.MContasIdVinculosrequest;
const MContasIdVinculos = testerlib.MContasIdVinculos;
const MContasVinculosTiposrequest = testerlib.MContasVinculosTiposrequest;
const MContasIdVinculosTipos = testerlib.MContasIdVinculosTipos;
const MContasIdAtribuirCartaoPrepagoRequest = testerlib.MContasIdAtribuirCartaoPrepagoRequest;
const MContasIdVinculos1 = testerlib.MContasIdVinculos1;
const Content1 = testerlib.Content1;
const MContasIdVinculosTipos1 = testerlib.MContasIdVinculosTipos1;
const Content2 = testerlib.Content2;
const MContasId = testerlib.MContasId;
const MContas = testerlib.MContas;
const Content3 = testerlib.Content3;
const MContasId1 = testerlib.MContasId1;
const MContasIdAccountsAdicionais = testerlib.MContasIdAccountsAdicionais;
const MContasIdAccountAdicionais = testerlib.MContasIdAccountAdicionais;
const MContasIdAdicionaisIdPessoaRequest = testerlib.MContasIdAdicionaisIdPessoaRequest;
const Telefones3 = testerlib.Telefones3;
const MContasIdAdicionaisIdPessoa = testerlib.MContasIdAdicionaisIdPessoa;
const MContasIdPessoasIdPessoaPortadoresRequest = testerlib.MContasIdPessoasIdPessoaPortadoresRequest;
const MContasIdBloquear = testerlib.MContasIdBloquear;
const MContasIdAccountAlterarProdutoRequest = testerlib.MContasIdAccountAlterarProdutoRequest;
const MContasIdTimeline = testerlib.MContasIdTimeline;
const Content4 = testerlib.Content4;
const MContasIdTransacoes = testerlib.MContasIdTransacoes;
const Content5 = testerlib.Content5;
const MBanktransfers = testerlib.MBanktransfers;
const Beneficiary = testerlib.Beneficiary;
const MBanktransfersAccountIdAccount = testerlib.MBanktransfersAccountIdAccount;
const MBanktransfersAdjustmentIdAdjustment = testerlib.MBanktransfersAdjustmentIdAdjustment;
const MBillet = testerlib.MBillet;
const MPaymentsliprequest = testerlib.MPaymentsliprequest;
const PayingSource = testerlib.PayingSource;
const BankSlip = testerlib.BankSlip;
const MBoletos = testerlib.MBoletos;
const Content6 = testerlib.Content6;
const MContasIdAccountGerarCartaoProvisorio = testerlib.MContasIdAccountGerarCartaoProvisorio;
const MCartoes = testerlib.MCartoes;
const Content7 = testerlib.Content7;
const MCartoesIdCard = testerlib.MCartoesIdCard;
const MCartoesIdCardGerarNovaVia = testerlib.MCartoesIdCardGerarNovaVia;
const MCartoesIdCardDesbloquearSenhaIncorreta = testerlib.MCartoesIdCardDesbloquearSenhaIncorreta;
const MCartoesIdCardValidarSenha = testerlib.MCartoesIdCardValidarSenha;
const MCartoesIdCardBloquear = testerlib.MCartoesIdCardBloquear;
const MCartoesIdCardDesbloquear = testerlib.MCartoesIdCardDesbloquear;
const MCartoesIdCardCancelar = testerlib.MCartoesIdCardCancelar;
const MStatusCartoes = testerlib.MStatusCartoes;
const Content8 = testerlib.Content8;
const MStatusCatoesIdCard = testerlib.MStatusCatoesIdCard;
const MCartoesIdAlterarEstagio = testerlib.MCartoesIdAlterarEstagio;
const MCartoesIdCardValidarCvvRequest = testerlib.MCartoesIdCardValidarCvvRequest;
const MCartoesLotesCartoesPrePagos = testerlib.MCartoesLotesCartoesPrePagos;
const MCartoesLotesCartoesPrePagosId = testerlib.MCartoesLotesCartoesPrePagosId;
const MCartoesIdCardLimitesDisponibilidades = testerlib.MCartoesIdCardLimitesDisponibilidades;
const MCartoesIdCardAtribuirTitular = testerlib.MCartoesIdCardAtribuirTitular;
const MApiCartoesIdConsultarDadosReais = testerlib.MApiCartoesIdConsultarDadosReais;
const MCartoesIdConsultarDadosImpressao = testerlib.MCartoesIdConsultarDadosImpressao;
const DocumentsValidation = testerlib.DocumentsValidation;
const Result8 = testerlib.Result8;
const DocumentsValidationRules = testerlib.DocumentsValidationRules;
const Instructions = testerlib.Instructions;
const Header = testerlib.Header;
const ContentType = testerlib.ContentType;
const Params = testerlib.Params;
const Person = testerlib.Person;
const Category = testerlib.Category;
const Side = testerlib.Side;
const Body = testerlib.Body;
const SelfiesValidation = testerlib.SelfiesValidation;
const SelfiesValidationRules = testerlib.SelfiesValidationRules;
const Instructions1 = testerlib.Instructions1;
const Header1 = testerlib.Header1;
const ContentType1 = testerlib.ContentType1;
const Params1 = testerlib.Params1;
const MKnowyourclientPeople = testerlib.MKnowyourclientPeople;
const BasicData = testerlib.BasicData;
const Address23 = testerlib.Address23;
const Phone23 = testerlib.Phone23;
const Sanctions = testerlib.Sanctions;
const SanctionsHistory = testerlib.SanctionsHistory;
const Details = testerlib.Details;
const Collections = testerlib.Collections;
const Score = testerlib.Score;
const OnlineCertificate = testerlib.OnlineCertificate;
const AdditionalOutputData = testerlib.AdditionalOutputData;
const MCeps = testerlib.MCeps;
const MBancos = testerlib.MBancos;
const Content9 = testerlib.Content9;
const MBancosrequest = testerlib.MBancosrequest;
const MBancos1 = testerlib.MBancos1;
const MBancosIdBank = testerlib.MBancosIdBank;
const MP2ptransferrequest = testerlib.MP2ptransferrequest;
const MP2ptransfer = testerlib.MP2ptransfer;
const MP2ptransferCustomizedUUIDException = testerlib.MP2ptransferCustomizedUUIDException;
const MP2ptransferBackTransactionUUIDException = testerlib.MP2ptransferBackTransactionUUIDException;
const MP2ptransferDetailsIdAccount = testerlib.MP2ptransferDetailsIdAccount;
const MP2ptransferDetailsIdAccount1 = testerlib.MP2ptransferDetailsIdAccount1;
const MP2ptransferAdjustmentIdAdjustment = testerlib.MP2ptransferAdjustmentIdAdjustment;
const MTollsRechargesrequest = testerlib.MTollsRechargesrequest;
const MTollsRecharges = testerlib.MTollsRecharges;
const MTollsRechargesrequest1 = testerlib.MTollsRechargesrequest1;
const MTollsRechargesrequest2 = testerlib.MTollsRechargesrequest2;
const MTollsRecharges34943232 = testerlib.MTollsRecharges34943232;
const MTollsDownloads34943232 = testerlib.MTollsDownloads34943232;
const MPaymentsrequest = testerlib.MPaymentsrequest;
const MPaymentsAccountIdAccount = testerlib.MPaymentsAccountIdAccount;
const MPaymentsAdjustmentIdAdjustment = testerlib.MPaymentsAdjustmentIdAdjustment;
const MPaymentsV1 = testerlib.MPaymentsV1;
const MPaymentV1Schedulerrequest = testerlib.MPaymentV1Schedulerrequest;
const Payload = testerlib.Payload;
const MPaymentV1Scheduler = testerlib.MPaymentV1Scheduler;
const Result10 = testerlib.Result10;
const Payload1 = testerlib.Payload1;
const MPaymentsV1Receipts = testerlib.MPaymentsV1Receipts;
const Item1 = testerlib.Item1;
const MPaymentsV1Scheduler = testerlib.MPaymentsV1Scheduler;
const Item2 = testerlib.Item2;
const MPaymentsV1SchedulerIdSchedule = testerlib.MPaymentsV1SchedulerIdSchedule;
const MRechargesDealers1 = testerlib.MRechargesDealers1;
const Dealer = testerlib.Dealer;
const MRechargesrequest = testerlib.MRechargesrequest;
const MRecharges2 = testerlib.MRecharges2;
const Option = testerlib.Option;
const FixedAmount = testerlib.FixedAmount;
const MRechargesOrderIdRequest = testerlib.MRechargesOrderIdRequest;
const MRechargesPedido3 = testerlib.MRechargesPedido3;
const MRechargesOrderIdConfirmRequest = testerlib.MRechargesOrderIdConfirmRequest;
const MRechargesOrderIdConfirm = testerlib.MRechargesOrderIdConfirm;
const MRechargesAccountIdAccount = testerlib.MRechargesAccountIdAccount;
const MRechargesAdjustmentIdAdjustment = testerlib.MRechargesAdjustmentIdAdjustment;
const MSingleIssuerPaymentRequest = testerlib.MSingleIssuerPaymentRequest;
const MRechargesOrderIdConfirmRequest1 = testerlib.MRechargesOrderIdConfirmRequest1;
const MTransportcardsCardIdSptrans1 = testerlib.MTransportcardsCardIdSptrans1;
const Product = testerlib.Product;
const MTransportcardsRecharge2Request = testerlib.MTransportcardsRecharge2Request;
const MTransportcardsRecharge2 = testerlib.MTransportcardsRecharge2;
const MTransportcardsRechargeIdRecharge3 = testerlib.MTransportcardsRechargeIdRecharge3;
const MRateWaivedrequest = testerlib.MRateWaivedrequest;
const MTransportcardsCardIdSptrans11 = testerlib.MTransportcardsCardIdSptrans11;
const Product1 = testerlib.Product1;
const MTransportcardsAccountIdAccount = testerlib.MTransportcardsAccountIdAccount;
const MRegistration = testerlib.MRegistration;
const Result11 = testerlib.Result11;
const RegulatoryDocument = testerlib.RegulatoryDocument;
const RegistrationTypesType1TypesType2 = testerlib.RegistrationTypesType1TypesType2;
const Result12 = testerlib.Result12;
const RegulatoryDocument1 = testerlib.RegulatoryDocument1;
const MAgreementrequest = testerlib.MAgreementrequest;
const MOneclickEnrollmentsrequest = testerlib.MOneclickEnrollmentsrequest;
const SubCampaign = testerlib.SubCampaign;
const Property = testerlib.Property;
const Client = testerlib.Client;
const Card = testerlib.Card;


describe("WebhooksController Tests", function tests() {
    this.timeout(testConfiguration.TEST_TIMEOUT);

    /**
     * TODO: Add Description
     */
    it("should testMCriptografiaChaves response", function testMCriptografiaChavesTest(done) {
        controller.getCriptografiaChaves(function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        }).catch(() => undefined);
    });
});
