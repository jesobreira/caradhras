/**
 * BaaSCaradhrasAPIDocumentationLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const chai = require('chai');
const assert = chai.assert;
const TestHelper = require("../TestHelper");
const APIHelper = require("../../lib/APIHelper");
const testerlib = require("../../lib");
const testConfiguration = require("../TestBootstrap");
const baseController = require("../../lib/Controllers/BaseController");

const controller = testerlib.PaymentController;
const MSingleIssuerPaymentRequest = testerlib.MSingleIssuerPaymentRequest;
const MPaymentsAdjustmentIdAdjustment = testerlib.MPaymentsAdjustmentIdAdjustment;

describe("PaymentController Tests", function tests() {
    this.timeout(testConfiguration.TEST_TIMEOUT);

    /**
     * <p>Method that allows to make the payments of the boleto.</p>
<blockquote>
<p>Check the FAQs below:</p>
<ul>
<li><a href="https://baas-cdt.zendesk.com/hc/pt-br/articles/360030076971-Porque-%C3%A9-importante-o-uso-do-Validate-%C3%89-poss%C3%ADvel-pagar-boletos-vencidos-">Why is it important to use the /Validate? It is possible to pay due bank slip?</a></li>
</ul>
</blockquote>

     */
    it("should testMSingleIssuerPayment response", function testMSingleIssuerPaymentTest(done) {
        // parameters for the API call
        let authorization = '{{tokenOauth}}';
        let accept = 'application/json';
        let contentType = 'application/json';
        let body = baseController.getObjectMapper().mapObject({
  "barCodeNumber": "23793000000000000003391090109000078600076640",
  "dueDate": "2019-02-20T00:00:00Z",
  "description": "Pagamento solicitado pelo usuário",
  "assignor": "ELETROPAULO",
  "discount": 0,
  "taxValue": 0,
  "value": "14.0"
}, 'MSingleIssuerPaymentRequest');

        controller.createSingleIssuerPayment(authorization, accept, contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>This method allows to query a boleto by barcode number.</p>
<blockquote>
<p>Check the FAQ below:</p>
<ul>
<li><a href="https://baas-cdt.zendesk.com/hc/pt-br/articles/360029534412-Porque-a-API-Payments-Validate-barcode-retorna-O-t%C3%ADtulo-informado-possui-erro-s-">Why the API /Payments/Validate/{barcode} returns: “Do(es) the informed title have error(s).”?</a></li>
<li><a href="https://baas-cdt.zendesk.com/hc/pt-br/articles/360030076971-Porque-%C3%A9-importante-o-uso-do-Validate-%C3%89-poss%C3%ADvel-pagar-boletos-vencidos-">Why is it important to use the /Validate? It is possible to pay due bank slip?</a></li>
</ul>
</blockquote>

     */
    it("should testMPaymentsValidateBarCode response", function testMPaymentsValidateBarCodeTest(done) {
        // parameters for the API call
        let authorization = '{{tokenOauth}}';

        controller.getPaymentsValidateBarCode(authorization, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = null;
            headers['Content-Length'] = null;
            headers['Connection'] = null;
            headers['Date'] = null;
            headers['x-amzn-RequestId'] = null;
            headers['x-amzn-Remapped-Content-Length'] = null;
            headers['x-amz-apigw-id'] = null;
            headers['X-Amzn-Trace-Id'] = null;
            headers['X-Cache'] = null;
            headers['Via'] = null;
            headers['X-Amz-Cf-Id'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.equal('{\n    "Message": {\n        "MessageId": 0,\n        "Title": "Sucesso",\n        "Message": "Processo efetuado com sucesso"\n    },\n    "DataReturn": {\n        "Barcode": "846700000017199900820895995079888203753731274993",\n        "Result": {\n            "Success": true,\n            "Message": {\n                "MessageId": 0,\n                "Title": "Código validado!",\n                "Message": "O código inserido foi validado com sucesso."\n            },\n            "BillPaymentTypeId": 2,\n            Payment Type (1 = NPC, 2 = Normal)\n            "BillPaymentTypeDescription": "Normal",\n            "HasEnoughBalance": true,\n            "WasPaid": false,\n            "PaymentSchedulingDate": "N/A",\n            "ReachedLimit": false,\n            "ValidateBarCode": \n            Filled with title information if title is Normal\n            {\n                "Id": 0,\n                "Description": "GVT-GLOBAL VILLAGE TELECO",\n                "Value": 119.99,\n                "DueDate": "2019-02-18",\n                "IsOutTime": true,\n                "TimeWindow": 2,\n                "MinTime": "07:00h",\n                Minimum window time to accept the payment\n                "MaxTime": "16:00h",\n                Maximum window time to accept the payment\n                "IsDefaultTime": false,\n                "PaymentType": 0,\n                (0 = Conta Concessionária, 1 = Ficha de Compensação, 2 = Indefinido, 3 = DARF, 4 = DARJ, 5 = GARE, 6 = FGTS, 7 = GPS);\n                "HasDueDate": false,\n                It has due date (true or false)\n                "BarCodeNumber": "846700000017199900820895995079888203753731274993",\n                "CurrentDate": "2019-02-18"\n            },\n            "PaymentInfoNPC":\n            Filled with title information if NPC title\n            \t{\n                "Id": 0,\n                "ContractNumber": "",\n                "IdentificationNumber": "",\n                "DueDate": "",\n                "BillValue": 0,\n                "TaxBreakValue": 0,\n                "PaymentLimitDate": "",\n                "OpeningPaymentschedule": "",\n                "ClosingPaymentschedule": "",\n                "IsValidDate": false,\n                Validate Date (true ou false)\n                "IsBeforeWindow": false,\n                "IsValidWindow": false,\n                "NextUtilDay": "",\n                "BarCodeNumber": "",\n                "DigitavelLine": "",\n                "Traders": {\n                    "Recipient": "",\n                    "RecipientDocument": "",\n                    "PayerName": "",\n                    "PayerDocument": ""\n                },\n                "ReceivingDivergentValue": {\n                    "Code": 0,\n                    "Description": ""\n                },\n                "ReceiptRules": {\n                    "TypeOfPaymentMin": "",\n                    "TypeOfPaymentMax": "",\n                    "MinPaymentValue": 0,\n                    "MaxPaymentValue": 0\n                },\n                "ComputedBillValues": {\n                    "CalculatedInterestAmount": 0,\n                    "CalculatedFineValue": 0,\n                    "DiscountValueCalculated": 0,\n                    "TotalAmountToCharge": 0,\n                    "PaymentAmountUpdated": 0,\n                    "ComputedDate": ""\n                },\n                "BillStatus": {\n                    "Code": 0,\n                    "Description": ""\n                },\n                "Params": {\n                    "OutOfDate": false,\n                    "AptoForPayment": false,\n                    "BlockPaymentOfDate": false\n                }\n            }\n        }\n    }\n}', context.response.body);
            done();
        }).catch(() => undefined);
    });

    /**
     * TODO: Add Description
     */
    it("should testMSingleIssuerPaymentAccount response", function testMSingleIssuerPaymentAccountTest(done) {
        // parameters for the API call
        let authorization = '{{tokenOauth}}';
        let accept = 'application/json';
        let contentType = 'application/json';

        controller.getSingleIssuerPaymentAccount(authorization, accept, contentType, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>Find a payment recipient by the idAdjustment</p>

     */
    it("should testMSingleIssuerPaymentsAdjustmentIdAdjustment response", function testMSingleIssuerPaymentsAdjustmentIdAdjustmentTest(done) {
        // parameters for the API call
        let contentType = 'application/json';
        let authorization = '{{tokenOauth}}';

        controller.getSingleIssuerPaymentsAdjustmentIdAdjustment(contentType, authorization, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = null;
            headers['Content-Length'] = null;
            headers['Connection'] = null;
            headers['Date'] = null;
            headers['x-amzn-RequestId'] = null;
            headers['x-amzn-Remapped-Content-Length'] = null;
            headers['x-amz-apigw-id'] = null;
            headers['X-Amzn-Trace-Id'] = null;
            headers['X-Cache'] = null;
            headers['Via'] = null;
            headers['X-Amz-Cf-Id'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "id": 202,
  "idAdjustment": 310851921,
  "idIssuer": 73,
  "uniqueIdDablan": "wvt8oP81JpZkzs3J0Y+ZWw==",
  "account": 10057584,
  "amount": 51.48,
  "barCode": "826800000000514800971467920195063010516160190125",
  "dueDate": 1542283200000,
  "description": "SABESP"
}, false, true, false));
            done();
        }).catch(() => undefined);
    });
});
