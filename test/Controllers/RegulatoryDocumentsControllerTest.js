/**
 * BaaSCaradhrasAPIDocumentationLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const chai = require('chai');
const assert = chai.assert;
const TestHelper = require("../TestHelper");
const APIHelper = require("../../lib/APIHelper");
const testerlib = require("../../lib");
const testConfiguration = require("../TestBootstrap");
const baseController = require("../../lib/Controllers/BaseController");

const controller = testerlib.RegulatoryDocumentsController;
const MRegistration = testerlib.MRegistration;
const RegistrationTypesType1TypesType2 = testerlib.RegistrationTypesType1TypesType2;
const MAgreementrequest = testerlib.MAgreementrequest;

describe("RegulatoryDocumentsController Tests", function tests() {
    this.timeout(testConfiguration.TEST_TIMEOUT);

    /**
     * <p>Show every active term or policy available to be signed</p>

     */
    it("should testMRegistration response", function testMRegistrationTest(done) {
        // parameters for the API call
        let authorization = '{{tokenOauth}}';

        controller.getRegistration(authorization, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Date'] = null;
            headers['Content-Type'] = null;
            headers['Content-Length'] = null;
            headers['Connection'] = null;
            headers['x-amzn-RequestId'] = null;
            headers['x-amz-apigw-id'] = null;
            headers['X-Amzn-Trace-Id'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "message": "Regulatory Documents retrieved successfully",
  "result": {
    "regulatoryDocuments": [
      {
        "regDocObj": "https: //regdocs-hml.s3.amazonaws.com/109/TERMS_AND_CONDITIONS_(v1)_2019-10-17T21%3A15%3A04.347%2B00%3A00.pdf",
        "type": "TERMS_AND_CONDITIONS",
        "version": 1
      }
    ]
  }
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>Generate the required tokens for terms validation.</p>



<p></p>



<table>
    <tr>
      <th>Parameter</th>
      <th>Description</th>
      <th>Value</th>
      <th>Required</th>
      <th>Restrictions</th>
    </tr>
    <tr>
      <td>regDocObj</td>
      <td>term or policy to be signed</td>
      <td>string</td>
       <td>yes</td>
        <th>none</th>
    </tr>
    <tr>
      <td>type</td>
      <td>term or policy type</td>
      <td>string</td>
       <td>yes</td>
        <th>none</th>
        </tr>

 </table>




     */
    it("should testMRegistrationTypesType response", function testMRegistrationTypesTypeTest(done) {
        // parameters for the API call
        let types = 'PRIVACY_POLICY';
        let authorization = '{{tokenOauth}}';

        controller.getRegistrationTypesType(types, authorization, function callback(error, response, context) {
            // test response code
            assert.equal(201, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Date'] = null;
            headers['Content-Type'] = null;
            headers['Content-Length'] = null;
            headers['Connection'] = null;
            headers['x-amzn-RequestId'] = null;
            headers['x-amz-apigw-id'] = null;
            headers['X-Amzn-Trace-Id'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "message": "Regulatory Documents retrieved successfully",
  "result": {
    "regulatoryDocuments": [
      {
        "type": "PRIVACY_POLICY",
        "token": "5e08b80d-8189-4fa5-90da-2bc78cbc3545",
        "regDocObj": "PRIVACY POLICY - Your data is safe"
      }
    ]
  }
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

});
