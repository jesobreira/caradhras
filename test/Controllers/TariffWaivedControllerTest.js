/**
 * BaaSCaradhrasAPIDocumentationLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const chai = require('chai');
const assert = chai.assert;
const TestHelper = require("../TestHelper");
const APIHelper = require("../../lib/APIHelper");
const testerlib = require("../../lib");
const testConfiguration = require("../TestBootstrap");
const baseController = require("../../lib/Controllers/BaseController");

const controller = testerlib.TariffWaivedController;
const MRateWaivedrequest = testerlib.MRateWaivedrequest;

describe("TariffWaivedController Tests", function tests() {
    this.timeout(testConfiguration.TEST_TIMEOUT);

    /**
     * <p>Method to register rate waive, in this API it is possible to record the amount of free operations that the account is able to have</p>
<p>*<code>operationType</code> can be:</p>
<pre class="click-to-expand-wrapper is-snippet-wrapper"><code>1 - P2P
2 - PagContas
3 - TED/DOC
4 - Emissão Boleto
5 - Recarga de Celular
6 - Recarga SP Trans
7 - Liquidação Boleto
</code></pre><p>*<code>bonus</code> is the amount of rate waive that the carrier will have
*<code>leftOver</code> counter that shows the amount of rate waive remaining
*<code>person</code> person's id that will receive the gratuity</p>

     */
    it("should testMRateWaived response", function testMRateWaivedTest(done) {
        // parameters for the API call
        let contentType = 'application/json';
        let authorization = '{{tokenOauth}}';
        let body = baseController.getObjectMapper().mapObject({
  "operationType": 4,
  "bonus": 4,
  "leftOver": 0,
  "person": 691
}, 'MRateWaivedrequest');

        controller.createRateWaived(contentType, authorization, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        }).catch(() => undefined);
    });
});
