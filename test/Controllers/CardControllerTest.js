/**
 * BaaSCaradhrasAPIDocumentationLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const chai = require('chai');
const assert = chai.assert;
const TestHelper = require("../TestHelper");
const APIHelper = require("../../lib/APIHelper");
const testerlib = require("../../lib");
const testConfiguration = require("../TestBootstrap");
const baseController = require("../../lib/Controllers/BaseController");

const controller = testerlib.CardController;
const MContasIdAccountGerarCartaoProvisorio = testerlib.MContasIdAccountGerarCartaoProvisorio;
const MCartoes = testerlib.MCartoes;
const MCartoesIdCard = testerlib.MCartoesIdCard;
const MCartoesIdCardGerarNovaVia = testerlib.MCartoesIdCardGerarNovaVia;
const MCartoesIdCardDesbloquearSenhaIncorreta = testerlib.MCartoesIdCardDesbloquearSenhaIncorreta;
const MCartoesIdCardValidarSenha = testerlib.MCartoesIdCardValidarSenha;
const MCartoesIdCardBloquear = testerlib.MCartoesIdCardBloquear;
const MCartoesIdCardDesbloquear = testerlib.MCartoesIdCardDesbloquear;
const MCartoesIdCardCancelar = testerlib.MCartoesIdCardCancelar;
const MStatusCartoes = testerlib.MStatusCartoes;
const MStatusCatoesIdCard = testerlib.MStatusCatoesIdCard;
const MCartoesIdAlterarEstagio = testerlib.MCartoesIdAlterarEstagio;
const MCartoesIdCardValidarCvvRequest = testerlib.MCartoesIdCardValidarCvvRequest;
const MCartoesLotesCartoesPrePagos = testerlib.MCartoesLotesCartoesPrePagos;
const MCartoesLotesCartoesPrePagosId = testerlib.MCartoesLotesCartoesPrePagosId;
const MCartoesIdCardLimitesDisponibilidades = testerlib.MCartoesIdCardLimitesDisponibilidades;
const MCartoesIdCardAtribuirTitular = testerlib.MCartoesIdCardAtribuirTitular;
const MApiCartoesIdConsultarDadosReais = testerlib.MApiCartoesIdConsultarDadosReais;
const MCartoesIdConsultarDadosImpressao = testerlib.MCartoesIdConsultarDadosImpressao;

describe("CardController Tests", function tests() {
    this.timeout(testConfiguration.TEST_TIMEOUT);

    /**
     * <p>This resource allows to be generate a new Card for a determined cardholder that it is linked to the account. For this, itâ€™ll be necessary to inform the id account , the <code>idPessoa</code> of the cardholder and the <code>idTipoPlastico</code>of the card that will be printed, defined on the setup process. This functionality will be used for the card printing in graphic.</p>
<ul>
<li>This API enables the creation of a physical card. Right after this, it is mandatory to call the <code>POST /cartoes/{idcard}/cadastrar-senha</code> to define the card password . Succefully done this process, the embosser will automatically receive the card printing order to emboss and deliver.</li>
<li>To unlock a physical card, the embossing phase needs to be completly done, then you must call the method <code>POST /cartoes/{idCard}/desbloquear</code></li>
<li>When using this endpoint, the cardholder will receive no charge of fee (either first issue or reissue)</li>
</ul>
<blockquote>
<p>Check the documentation <a href="https://s3-sa-east-1.amazonaws.com/baas-docs.caradhras.io/Fields_Card.pdf">here</a> for addicional information about identification fields.</p>
</blockquote>

     */
    it("should testMContasIdAccountGerarCartaoGrafica response", function testMContasIdAccountGerarCartaoGraficaTest(done) {
        // parameters for the API call
        let authorization = '{{tokenOauth}}';
        let contentType = 'application/json';
        let body = '{\r\n  "id_pessoa": 2, \r\n  "id_tipo_plastico": 2\r\n  Indicates the card design, this field is set during the issuer setup \r\n}';

        controller.createContasIdAccountGerarCartaoGrafica(authorization, contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            assert.isNotNull(response);
            assert.equal('{\n    "flagVirtual": 1,\n    (1 = True, 0 = False)\n    "idConta": 0,\n    "idPessoa": 0,\n    "idCartao": 0,\n    "idBandeira": 0,\n    (1 = Visa, 2 = Mastercard)\n    "idTipoCartao": 0,\n    "dataGeracao": "string",\n    "dataValidade": "string",\n    "nomeOrigemComercial": "string",\n    "cpf": "string"\n}', context.response.body);
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>This resource allows to be created a virtual card for a determined cardholder which one it is linked to an account. For this, it will be necessary to inform the identification code of the account (id). This functionability can be used to creat virtual cards through an App. First of all, it will be necessary to align with the project leader about the use of this endpoint</p>

     */
    it("should testMContasIdAccountGerarCartaoVirtual response", function testMContasIdAccountGerarCartaoVirtualTest(done) {
        // parameters for the API call
        let dataValidade = '2023-12-31T00:00:00.000Z   - Required';
        let authorization = '{{tokenOauth}}';
        let contentType = 'application/json';

        controller.createContasIdAccountGerarCartaoVirtual(dataValidade, authorization, contentType, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            assert.isNotNull(response);
            assert.equal('{\n    "idConta": 0,\n    "idPessoa": 0,\n    "idCartao": 0,\n    "idBandeira": 0,\n    (1 = Visa, 2 = Mastercard)\n    "idTipoCartao": 0,\n    "numeroCartao": "string",\n    "nomePlastico": "string",\n    "cvv2": "string",\n    "dataGeracao": "string",\n    "dataValidade": "string",\n    "nomeOrigemComercial": "string",\n    "nomeEmpresa": "string",\n    "numeroAgencia": 0,\n    "numeroContaCorente": "string",\n    "nomeEmpresaBeneficio": "string",\n    "cpf": "string",\n    "tipoPortador": "0",\n    System Default 0\n    "nomeEmpregador": "string",\n    "trilha1": "string",\n    "trilha2": "string",\n    "trilhaCVV1": "string",\n    "trilhaCVV2": "string",\n    "flagVirtual": 0,\n     (1 = True, 0 = False)\n    "numeroCartaoHash": 0\n}\n\n\n{\n    "flagVirtual": 1,\n    (1 = True, 0 = False)\n    "idConta": 0,\n    "idPessoa": 0,\n    "idCartao": 0,\n    "idBandeira": 0,\n    (1 = Visa, 2 = Mastercard)\n    "idTipoCartao": 0,\n    "dataGeracao": "string",\n    "dataValidade": "string",\n    "nomeOrigemComercial": "string",\n    "cpf": "string"\n}', context.response.body);
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>This endpoint allows to create a temporary card with no embossing.</p>

     */
    it("should testMContasIdAccountGerarCartaoProvisorio response", function testMContasIdAccountGerarCartaoProvisorioTest(done) {
        // parameters for the API call
        let authorization = '{{tokenOauth}}';
        let contentType = 'application/json';

        controller.createContasIdAccountGerarCartaoProvisorio(authorization, contentType, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "flagVirtual": 0,
  "idConta": 0,
  "idPessoa": 0,
  "idCartao": 0,
  "numeroCartao": "string",
  "nomePlastico": "string",
  "dataValidade": "string"
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>It lists all cards issued by the issuer.</p>
<blockquote>
<p>Check the FAQs below:</p>
<ul>
<li><a href="https://baas-cdt.zendesk.com/hc/pt-br/articles/360028356611-Status-Cart%C3%A3o">Status - Card</a></li>
<li><a href="https://baas-cdt.zendesk.com/hc/pt-br/articles/360021073272-Existe-algum-par%C3%A2metro-espec%C3%ADfico-para-indicar-que-o-cart%C3%A3o-foi-bloqueado-por-sucessivas-tentativas-com-a-senha-incorreta-Se-sim-qual-seria-">Is there any specific parameter to indicate that card has been blocked by successive attempts with the wrong password? If so, what it would be?</a></li>
</ul>
</blockquote>

     */
    it("should testMCartoes response", function testMCartoesTest(done) {
        // parameters for the API call
        let sort = 'Array[string] (optional)';
        let page = 'Integer (optional)';
        let limit = 'Integer (optional)';
        let idStatusCartao = 'Integer (optional)';
        let idEstagioCartao = 'Integer (optional)';
        let idConta = 'Integer (optional)';
        let idPessoa = 'Integer (optional)';
        let idProduto = 'Integer (optional)';
        let tipoPortador = 'String (optional)';
        let numeroCartao = 'String (optional)';
        let nomeImpresso = 'String (optional)';
        let dataGeracao = 'String (optional)';
        let dataStatusCartao = 'String (optional)';
        let dataEstagioCartao = 'String (optional)';
        let dataValidade = 'String (optional)';
        let dataImpressao = 'String (optional)';
        let arquivoImpressao = 'String (optional)';
        let flagImpressaoOrigemComercial = 'Integer (optional)';
        let flagProvisorio = 'Integer (optional)';
        let codigoDesbloqueio = 'String (optional)';
        let sequencialCartao = 'Integer (optional)';
        let authorization = '{{tokenOauth}}';

        controller.getCartoes(sort, page, limit, idStatusCartao, idEstagioCartao, idConta, idPessoa, idProduto, tipoPortador, numeroCartao, nomeImpresso, dataGeracao, dataStatusCartao, dataEstagioCartao, dataValidade, dataImpressao, arquivoImpressao, flagImpressaoOrigemComercial, flagProvisorio, codigoDesbloqueio, sequencialCartao, authorization, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "content": [
    {
      "id": 0,
      "flagTitular": 0,
      "idPessoa": 0,
      "sequencialCartao": 0,
      "idConta": 0,
      "idStatus": 0,
      "dataStatus": "yyyy-MM-dd'T'HH: mm: ss.SSS'Z'",
      "idEstagio": 0,
      "dataEstagio": "yyyy-MM-dd'T'HH: mm: ss.SSS'Z'",
      "numeroBin": 0,
      "numeroCartao": "string",
      "numeroCartaoHash": 0,
      "numeroCartaoCriptografado": "string",
      "dataEmissao": "yyyy-MM-dd'T'HH: mm: ss.SSS'Z'",
      "dataValidade": "yyyy-MM-dd'T'HH: mm: ss.SSS'Z'",
      "cartaoVirtual": 0,
      "impressaoAvulsa": 0,
      "dataImpressao": "yyyy-MM-dd'T'HH: mm: ss.SSS'Z'",
      "nomeArquivoImpressao": "string",
      "idProduto": 0,
      "nomeImpresso": "string",
      "codigoDesbloqueio": "string"
    }
  ],
  "first": true,
  "firstPage": true,
  "hasContent": true,
  "hasNextPage": true,
  "hasPreviousPage": true,
  "last": true,
  "nextPage": 0,
  "number": 0,
  "numberOfElements": 0,
  "previousPage": 0,
  "size": 0,
  "totalElements": 0,
  "totalPages": 0
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>This method allows to get the basic information of a determined card from its ID code(id).</p>
<blockquote>
<p>Check the FAQs below:</p>
<ul>
<li><a href="https://baas-cdt.zendesk.com/hc/pt-br/articles/360028356611-Status-Cart%C3%A3o">Status - Card</a></li>
<li><a href="https://baas-cdt.zendesk.com/hc/pt-br/articles/360021073272-Existe-algum-par%C3%A2metro-espec%C3%ADfico-para-indicar-que-o-cart%C3%A3o-foi-bloqueado-por-sucessivas-tentativas-com-a-senha-incorreta-Se-sim-qual-seria-">Is there any specific parameter to indicate that card has been blocked by successive attempts with the wrong password? If so, what it would be?</a></li>
</ul>
</blockquote>

     */
    it("should testMCartoesIdCard response", function testMCartoesIdCardTest(done) {
        // parameters for the API call
        let authorization = '{{tokenOauth}}';

        controller.getCartoesIdCard(authorization, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = null;
            headers['Content-Length'] = null;
            headers['Connection'] = null;
            headers['Date'] = null;
            headers['x-amzn-RequestId'] = null;
            headers['Access-Control-Allow-Origin'] = null;
            headers['Access-Control-Allow-Headers'] = null;
            headers['x-amzn-Remapped-Connection'] = null;
            headers['x-amz-apigw-id'] = null;
            headers['x-amzn-Remapped-Server'] = null;
            headers['Access-Control-Allow-Methods'] = null;
            headers['x-amzn-Remapped-Date'] = null;
            headers['X-Application-Context'] = null;
            headers['Access-Control-Max-Age'] = null;
            headers['Access-Control-Allow-Credentials'] = null;
            headers['X-Cache'] = null;
            headers['Via'] = null;
            headers['X-Amz-Cf-Id'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "id": 1,
  "flagTitular": 1,
  "idPessoa": 21,
  "sequencialCartao": 1,
  "idConta": 12,
  "idStatus": 15,
  "dataStatus": "2019-03-20T09: 47: 00Z",
  "idEstagio": 6,
  "dataEstagio": "2019-03-20T05: 44: 00Z",
  "numeroBin": 426176,
  "numeroCartao": "4261********7917",
  "numeroCartaoHash": 4017395005806549284,
  "numeroCartaoCriptografado": "5D117DD07B897E0C03DFDA549F7F3090",
  "dataEmissao": "2018-11-26T11: 10: 43.707Z",
  "dataValidade": "2024-12-31T00: 00: 00Z",
  "cartaoVirtual": 1,
  "impressaoAvulsa": null,
  "dataImpressao": null,
  "nomeArquivoImpressao": null,
  "idProduto": 1,
  "nomeImpresso": "NOME IMPRESSO",
  "codigoDesbloqueio": "7917",
  "tipoPortador": "T",
  "idStatusCartao": 15,
  "dataStatusCartao": "2019-03-20T09: 47: 00Z",
  "idEstagioCartao": 6,
  "dataEstagioCartao": "2019-03-20T05: 44: 00Z",
  "dataGeracao": "2018-11-26T11: 10: 43.707Z",
  "flagVirtual": 1,
  "flagImpressaoOrigemComercial": null,
  "arquivoImpressao": null,
  "descricaoTipoCartao": "SandBox",
  "tipoCartao": 2
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>This operation has as an aim to allow the cardholder determinate the card password.</p>

     */
    it("should testMCartoesIdCardCadastrarSenha response", function testMCartoesIdCardCadastrarSenhaTest(done) {
        // parameters for the API call
        let authorization = '{{tokenOauth}}';
        let senha = 1234;
        let contentType = 'application/json';

        controller.createCartoesIdCardCadastrarSenha(authorization, senha, contentType, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>This method allows to be unblocked a determined card that was blocked by trying the incorrect password, from its id code (id).</p>

     */
    it("should testMCartoesIdCardDesbloquearSenhaIncorreta response", function testMCartoesIdCardDesbloquearSenhaIncorretaTest(done) {
        // parameters for the API call
        let authorization = '{{tokenOauth}}';

        controller.createCartoesIdCardDesbloquearSenhaIncorreta(authorization, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "id": 0,
  "flagTitular": 0,
  "idPessoa": 0,
  "sequencialCartao": 0,
  "idConta": 0,
  "idStatus": 0,
  "dataStatus": "yyyy-MM-dd'T'HH: mm: ss.SSS'Z'",
  "idEstagio": 0,
  "dataEstagio": "yyyy-MM-dd'T'HH: mm: ss.SSS'Z'",
  "numeroBin": 0,
  "numeroCartao": "string",
  "numeroCartaoHash": 0,
  "numeroCartaoCriptografado": "string",
  "dataEmissao": "yyyy-MM-dd'T'HH: mm: ss.SSS'Z'",
  "dataValidade": "yyyy-MM-dd'T'HH: mm: ss.SSS'Z'",
  "cartaoVirtual": 0,
  "impressaoAvulsa": 0,
  "dataImpressao": "yyyy-MM-dd'T'HH: mm: ss.SSS'Z'",
  "nomeArquivoImpressao": "string",
  "idProduto": 0,
  "nomeImpresso": "string",
  "codigoDesbloqueio": "string"
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>This operation has as an aim to allow validating that the password informed by the carrier of a determined card are right.</p>

     */
    it("should testMCartoesIdCardValidarSenha response", function testMCartoesIdCardValidarSenhaTest(done) {
        // parameters for the API call
        let authorization = '{{tokenOauth}}';
        let senha = 1234;
        let contentType = 'application/json';

        controller.getCartoesIdCardValidarSenha(authorization, senha, contentType, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "mensagem": "string",
  "idStatusCartao": 0,
  "statusCartao": "string",
  "quantidadeTentativas": 0,
  "quantidadeMaximaTentativas": 0
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>This operation has as an aim to allow the cardholder of a determined card can definite a password of your own choice.</p>
<p>Parameters</p>

     */
    it("should testMCartoesIdCardAlterarSenha response", function testMCartoesIdCardAlterarSenhaTest(done) {
        // parameters for the API call
        let authorization = '{{tokenOauth}}';
        let senha = 1234;

        controller.updateCartoesIdCardAlterarSenha(authorization, senha, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>This method allows the to make the block (temporary) or cancellation (definitive) of a determined card from its ID code. For this, It is necessary to inform what is the motive of this block, that it is to attribute a new StatusCard for the client, among other practices practiced by the issuer.</p>
<blockquote>
<p>Check the FAQs below:</p>
<ul>
<li><a href="https://baas-cdt.zendesk.com/hc/pt-br/articles/360028356611-Status-Cart%C3%A3o">Status - Card</a></li>
</ul>
</blockquote>
<table>
    <tr>
      <th>id_status</th>
      <th>description</th>
    </tr>
    <tr>
      <td>1</td>
      <td>Normal</td>
       </tr>
    <tr>
      <td>2</td>
      <td>Blocked</td>
    </tr>
    <tr>
      <td>3</td>
      <td>Cancelled</td>
    </tr>
</table>
     */
    it("should testMCartoesIdCardBloquear response", function testMCartoesIdCardBloquearTest(done) {
        // parameters for the API call
        let idStatus = 'Integer - Required';
        let observacao = 'String - Required';
        let authorization = '{{tokenOauth}}';
        let contentType = 'application/json';

        controller.createCartoesIdCardBloquear(idStatus, observacao, authorization, contentType, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "id": 0,
  "flagTitular": 0,
  "idPessoa": 0,
  "sequencialCartao": 0,
  "idConta": 0,
  "idStatus": 2,
  "dataStatus": "yyyy-MM-dd'T'HH: mm: ss.SSS'Z'",
  "idEstagio": 0,
  "dataEstagio": "yyyy-MM-dd'T'HH: mm: ss.SSS'Z'",
  "numeroBin": 0,
  "numeroCartao": "string",
  "numeroCartaoHash": 0,
  "numeroCartaoCriptografado": "string",
  "dataEmissao": "yyyy-MM-dd'T'HH: mm: ss.SSS'Z'",
  "dataValidade": "yyyy-MM-dd'T'HH: mm: ss.SSS'Z'",
  "cartaoVirtual": 0,
  "impressaoAvulsa": 0,
  "dataImpressao": "yyyy-MM-dd'T'HH: mm: ss.SSS'Z'",
  "nomeArquivoImpressao": "string",
  "idProduto": 0,
  "nomeImpresso": "string",
  "codigoDesbloqueio": "string"
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>This method allows to be unblocked a determined card from its identification code (id).</p>

     */
    it("should testMCartoesIdCardDesbloquear response", function testMCartoesIdCardDesbloquearTest(done) {
        // parameters for the API call
        let authorization = '{{tokenOauth}}';

        controller.createCartoesIdCardDesbloquear(authorization, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "id": 0,
  "flagTitular": 0,
  "idPessoa": 0,
  "sequencialCartao": 0,
  "idConta": 0,
  "idStatus": 0,
  "dataStatus": "yyyy-MM-dd'T'HH: mm: ss.SSS'Z'",
  "idEstagio": 0,
  "dataEstagio": "yyyy-MM-dd'T'HH: mm: ss.SSS'Z'",
  "numeroBin": 0,
  "numeroCartao": "string",
  "numeroCartaoHash": 0,
  "numeroCartaoCriptografado": "string",
  "dataEmissao": "yyyy-MM-dd'T'HH: mm: ss.SSS'Z'",
  "dataValidade": "yyyy-MM-dd'T'HH: mm: ss.SSS'Z'",
  "cartaoVirtual": 0,
  "impressaoAvulsa": 0,
  "dataImpressao": "yyyy-MM-dd'T'HH: mm: ss.SSS'Z'",
  "nomeArquivoImpressao": "string",
  "idProduto": 0,
  "nomeImpresso": "string",
  "codigoDesbloqueio": "string"
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>It cancels a card.</p>
<blockquote>
<p>Check the FAQs below:</p>
<ul>
<li><a href="https://baas-cdt.zendesk.com/hc/pt-br/articles/360028356611-Status-Cart%C3%A3o">Status - Card</a></li>
</ul>
</blockquote>
<table>
    <tr>
      <th>id_status</th>
      <th>description</th>
    </tr>
    <tr>
      <td>1</td>
      <td>Normal</td>
       </tr>
    <tr>
      <td>2</td>
      <td>Blocked</td>
    </tr>
    <tr>
      <td>3</td>
      <td>Cancelled</td>
    </tr>
</table>
     */
    it("should testMCartoesIdCardCancelar response", function testMCartoesIdCardCancelarTest(done) {
        // parameters for the API call
        let idStatus = 'Integer - Required';
        let observacao = 'String - Required';
        let authorization = '{{tokenOauth}}';

        controller.createCartoesIdCardCancelar(idStatus, observacao, authorization, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = null;
            headers['Content-Length'] = null;
            headers['Connection'] = null;
            headers['Date'] = null;
            headers['x-amzn-RequestId'] = null;
            headers['Access-Control-Allow-Origin'] = null;
            headers['Access-Control-Allow-Headers'] = null;
            headers['x-amzn-Remapped-Connection'] = null;
            headers['x-amz-apigw-id'] = null;
            headers['x-amzn-Remapped-Server'] = null;
            headers['Access-Control-Allow-Methods'] = null;
            headers['x-amzn-Remapped-Date'] = null;
            headers['X-Application-Context'] = null;
            headers['Access-Control-Max-Age'] = null;
            headers['Access-Control-Allow-Credentials'] = null;
            headers['X-Cache'] = null;
            headers['Via'] = null;
            headers['X-Amz-Cf-Id'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "id": 32,
  "flagTitular": 1,
  "idPessoa": 37,
  "sequencialCartao": 1,
  "idConta": 32,
  "idStatus": 6,
  "dataStatus": "2019-03-24T17: 09: 39.54Z",
  "idEstagio": 6,
  "dataEstagio": "2019-01-17T18: 16: 00Z",
  "numeroBin": 426176,
  "numeroCartao": "4261********8741",
  "numeroCartaoHash": 4456872337575176603,
  "numeroCartaoCriptografado": null,
  "dataEmissao": "2019-01-17T18: 16: 24.03Z",
  "dataValidade": "2019-01-17T18: 16: 00Z",
  "cartaoVirtual": 1,
  "impressaoAvulsa": null,
  "dataImpressao": null,
  "nomeArquivoImpressao": null,
  "idProduto": 1,
  "nomeImpresso": "RENAN F PINTO",
  "codigoDesbloqueio": "8741",
  "tipoPortador": "T",
  "idStatusCartao": 6,
  "dataStatusCartao": "2019-03-24T17: 09: 39.54Z",
  "idEstagioCartao": 6,
  "dataEstagioCartao": "2019-01-17T18: 16: 00Z",
  "dataGeracao": "2019-01-17T18: 16: 24.03Z",
  "flagVirtual": 1,
  "flagImpressaoOrigemComercial": null,
  "arquivoImpressao": null
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>This method allows to be listed the possibilities of Status that can be attributed to the Cards</p>

     */
    it("should testMStatusCartoes response", function testMStatusCartoesTest(done) {
        // parameters for the API call
        let sort = 'Array [string] (optional)';
        let page = 'Integer (optional)';
        let limit = 'Integer (Default = 50, Max = 50) (optional)';
        let id = 'Integer (optional)';
        let nome = 'String (optional)';
        let permiteDesbloquear = 'Integer (optional)';
        let permiteAtribuirComoBloqueio = 'Integer (optional)';
        let permiteAtribuirComoCancelamento = 'Integer (optional)';
        let cobrarTarifaAoEmitirNovaVia = 'Integer (optional)';
        let authorization = '{{tokenOauth}}';

        controller.getStatusCartoes(sort, page, limit, id, nome, permiteDesbloquear, permiteAtribuirComoBloqueio, permiteAtribuirComoCancelamento, cobrarTarifaAoEmitirNovaVia, authorization, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "content": [
    {
      "id": 1,
      "nome": "Normal",
      "flagCancelaCartao": 1,
      "flagCancelaNoDesbloqueio": 1,
      "idStatusDestinoDesbloqueio": 15,
      "idStatusDestinoConta": 0,
      "flagCobraTarifa": 0,
      "flagPermiteNovaViaCartao": 1,
      "flagPermiteDesbloqueio": 0,
      "flagCancelamento": 0,
      "flagPermiteBloqueio": null,
      "flagReativar": 1,
      "permiteDesbloquear": 0,
      "permiteAtribuirComoBloqueio": null,
      "permiteAtribuirComoCancelamento": 0,
      "cobrarTarifaAoEmitirNovaVia": 0
    }
  ],
  "first": true,
  "firstPage": true,
  "hasContent": true,
  "hasNextPage": true,
  "hasPreviousPage": true,
  "last": true,
  "nextPage": 0,
  "number": 0,
  "numberOfElements": 0,
  "previousPage": 0,
  "size": 0,
  "totalElements": 0,
  "totalPages": 0
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>This method allows to retrieve the parameters of a determined Card Status using the identification code (id).</p>

     */
    it("should testMStatusCartoesIdStatus response", function testMStatusCartoesIdStatusTest(done) {
        // parameters for the API call
        let authorization = '{{tokenOauth}}';

        controller.getStatusCartoesIdStatus(authorization, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "id": 29,
  "nome": "Bloqueado Senha Incorreta",
  "flagCancelaCartao": 1,
  "flagCancelaNoDesbloqueio": 0,
  "idStatusDestinoDesbloqueio": 15,
  "idStatusDestinoConta": 0,
  "flagCobraTarifa": 0,
  "flagPermiteNovaViaCartao": 1,
  "flagPermiteDesbloqueio": 0,
  "flagCancelamento": 1,
  "flagPermiteBloqueio": 1,
  "flagReativar": 1,
  "permiteDesbloquear": 0,
  "permiteAtribuirComoBloqueio": 1,
  "permiteAtribuirComoCancelamento": 1,
  "cobrarTarifaAoEmitirNovaVia": 0
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>This method allows to be updated the card stage for another informed resquest.</p>
<blockquote>
<p>Check the FAQs below:</p>
<ul>
<li><a href="https://baas-cdt.zendesk.com/hc/pt-br/articles/360022453512-Como-sei-o-est%C3%A1gio-em-que-um-cart%C3%A3o-est%C3%A1-Em-qual-est%C3%A1gio-posso-efetuar-o-cancelamento-do-cart%C3%A3o-">How do I know at which stage the card is? In which stage can I cancel the card?</a></li>
</ul>
</blockquote>

     */
    it("should testMCartoesIdCardAlterarEstagio response", function testMCartoesIdCardAlterarEstagioTest(done) {
        // parameters for the API call
        let authorization = '{{tokenOauth}}';
        let contentType = 'application/json';
        let body = '{\r\n  "id": 0\r\n  Identification Code of the Card Stage (stage).\r\n}';

        controller.createCartoesIdCardAlterarEstagio(authorization, contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "id": 1234,
  "flagTitular": 0,
  "idPessoa": 0,
  "sequencialCartao": 0,
  "idConta": 0,
  "idStatus": 0,
  "dataStatus": "yyyy-MM-dd'T'HH: mm: ss.SSS'Z'",
  "idEstagio": 0,
  "dataEstagio": "yyyy-MM-dd'T'HH: mm: ss.SSS'Z'",
  "numeroBin": 0,
  "numeroCartao": "string",
  "numeroCartaoHash": 0,
  "numeroCartaoCriptografado": "string",
  "dataEmissao": "yyyy-MM-dd'T'HH: mm: ss.SSS'Z'",
  "dataValidade": "yyyy-MM-dd'T'HH: mm: ss.SSS'Z'",
  "cartaoVirtual": 0,
  "impressaoAvulsa": 0,
  "dataImpressao": "yyyy-MM-dd'T'HH: mm: ss.SSS'Z'",
  "nomeArquivoImpressao": "string",
  "idProduto": 0,
  "nomeImpresso": "string",
  "codigoDesbloqueio": "string"
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>This resource allows the validation of the cvv of the card.</p>

     */
    it("should testMCartoesIdCardValidarCvv response", function testMCartoesIdCardValidarCvvTest(done) {
        // parameters for the API call
        let authorization = '{{tokenOauth}}';
        let contentType = 'application/json';
        let body = baseController.getObjectMapper().mapObject({
  "cvv": "string"
}, 'MCartoesIdCardValidarCvvRequest');

        controller.createCartoesIdCardValidarCvv(authorization, contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            assert.isNotNull(response);
            assert.equal('"string"', context.response.body);
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>This endpoint only applies for no-name cards Business Model.</p>
<p>This operation has the purpose of allowing Issuers to manage a certain amount of Prepaid Cards, in a non-nominal manner, which may be marketed and subsequently linked to a customer that purchases it. To do this, in addition to defining how many cards should be generated, it will be possible to define the Business Source, Product, Card Type, Image and Address for delivery of the Cards present in the generated batch. By default, all cards will be associated with a fictitious idPessoa and will receive a unique idConta for each of them. Once this is done, the Cards generated by this operation will follow the same graphic printing processes previously defined between the Issuer and the Driver</p>
<blockquote>
<p>Check the documentation <a href="https://s3-sa-east-1.amazonaws.com/baas-docs.caradhras.io/Fields_Card.pdf">here</a> for addicional information about identification fields.</p>
</blockquote>
<blockquote>
<p>Check the FAQs below:</p>
<ul>
<li><a href="https://baas-cdt.zendesk.com/hc/pt-br/articles/360020758991">How to request - NoName Card</a></li>
</ul>
</blockquote>

     */
    it("should testMCartoesLotesCartoesPrePagos response", function testMCartoesLotesCartoesPrePagosTest(done) {
        // parameters for the API call
        let idOrigemComercial = 'Integer - Required';
        let idProduto = 'Integer - Required';
        let idTipoCartao = 'Integer - Required';
        let idImagem = 'Integer - Required';
        let idEndereco = 'Integer - Required';
        let quantidadeCartoes = 'Integer - Required';
        let identificadorExterno = 'String - Optional';
        let contentType = 'application/json';
        let authorization = '{{tokenOauth}}';

        controller.createCartoesLotesCartoesPrePagos(idOrigemComercial, idProduto, idTipoCartao, idImagem, idEndereco, quantidadeCartoes, identificadorExterno, contentType, authorization, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "id": 0,
  "idOrigemComercial": 0,
  "idProduto": 0,
  "idTipoCartao": 0,
  "idImagem": 0,
  "idEndereco": 0,
  "quantidade": 0,
  "dataCadastro": "string",
  "usuarioCadastro": "string",
  "statusProcessamento": 0,
  "identificadorExterno": "string"
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>This method allows to be listed the exitent pre-paid cards in the base of the issuer.</p>

     */
    it("should testMCartoesLotesCartoesPrePagos1 response", function testMCartoesLotesCartoesPrePagos1Test(done) {
        // parameters for the API call
        let sort = 'Array [string] - Optional';
        let page = 'Integer - Optional';
        let limit = 'Integer - Optional';
        let idOrigemComercial = 'Integer - Optional';
        let idProduto = 'Integer - Optional';
        let idTipoCartao = 'Integer - Optional';
        let idImagem = 'Integer - Optional';
        let idEndereco = 'Integer - Optional';
        let quantidadeCartoes = 'Integer - Optional';
        let dataCadastro = 'String - Optional';
        let usuarioCadastro = 'String - Optional';
        let statusProcessamento = 'Integer - Optional';
        let identificadorExterno = 'String - Optional';
        let authorization = '{{tokenOauth}}';

        controller.getCartoesLotesCartoesPrePagos(sort, page, limit, idOrigemComercial, idProduto, idTipoCartao, idImagem, idEndereco, quantidadeCartoes, dataCadastro, usuarioCadastro, statusProcessamento, identificadorExterno, authorization, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>This me thod allows to retrieve the limits configurated for the cardholder of a determined card, either it is the holder of the account or an additional, starting from the identification code of the Card (id).</p>

     */
    it("should testMCartoesIdCardLimitesDisponibilidades response", function testMCartoesIdCardLimitesDisponibilidadesTest(done) {
        // parameters for the API call
        let authorization = '{{tokenOauth}}';

        controller.getCartoesIdCardLimitesDisponibilidades(authorization, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = null;
            headers['Content-Length'] = null;
            headers['Connection'] = null;
            headers['Date'] = null;
            headers['x-amzn-RequestId'] = null;
            headers['Access-Control-Allow-Origin'] = null;
            headers['Access-Control-Allow-Headers'] = null;
            headers['x-amzn-Remapped-Connection'] = null;
            headers['x-amz-apigw-id'] = null;
            headers['x-amzn-Remapped-Server'] = null;
            headers['Access-Control-Allow-Methods'] = null;
            headers['x-amzn-Remapped-Date'] = null;
            headers['X-Application-Context'] = null;
            headers['Access-Control-Max-Age'] = null;
            headers['Access-Control-Allow-Credentials'] = null;
            headers['X-Cache'] = null;
            headers['Via'] = null;
            headers['X-Amz-Cf-Id'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "id": 12,
  "limiteGlobal": 0,
  "limiteCompra": 0,
  "limiteParcelado": 0,
  "limiteParcelas": 0,
  "limiteSaqueGlobal": 0,
  "limiteSaquePeriodo": 0,
  "limiteConsignado": 0,
  "limiteInternacionalCompra": 0,
  "limiteInternacionalParcelado": 0,
  "limiteInternacionalParcelas": 0,
  "limiteInternacionalSaqueGlobal": 0,
  "limiteInternacionalSaquePeriodo": 0,
  "limiteMaximo": null,
  "saldoDisponivelGlobal": 604.86,
  "saldoDisponivelCompra": 0,
  "saldoDisponivelParcelado": 0,
  "saldoDisponivelParcelas": 0,
  "saldoDisponivelSaque": 0,
  "saldoPontosFidelidade": 0,
  "saldoDisponivelCompraInternacional": 0,
  "saldoDisponivelSaqueInternacional": 0
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>This endpoint only applies for no-name cards Business Model.</p>
<p>It assigns a person as a card owner.</p>

     */
    it("should testMCartoesIdCardAtribuirTitular response", function testMCartoesIdCardAtribuirTitularTest(done) {
        // parameters for the API call
        let idPessoa = 'Integer - Optional';
        let authorization = '{{tokenOauth}}';

        controller.updateCartoesIdCardAtribuirTitular(idPessoa, authorization, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "id": 0,
  "flagTitular": 0,
  "idPessoa": 0,
  "sequencialCartao": 0,
  "idConta": 0,
  "idStatus": 0,
  "dataStatus": "yyyy-MM-dd'T'HH: mm: ss.SSS'Z'",
  "idEstagio": 0,
  "dataEstagio": "yyyy-MM-dd'T'HH: mm: ss.SSS'Z'",
  "numeroBin": 0,
  "numeroCartao": "string",
  "numeroCartaoHash": 0,
  "numeroCartaoCriptografado": "string",
  "dataEmissao": "yyyy-MM-dd'T'HH: mm: ss.SSS'Z'",
  "dataValidade": "yyyy-MM-dd'T'HH: mm: ss.SSS'Z'",
  "cartaoVirtual": 0,
  "impressaoAvulsa": 0,
  "dataImpressao": "yyyy-MM-dd'T'HH: mm: ss.SSS'Z'",
  "nomeArquivoImpressao": "string",
  "idProduto": 0,
  "nomeImpresso": "string",
  "codigoDesbloqueio": "string"
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>This method retrieves some relevant information about the card that are not displayed at other endpoints.</p>

     */
    it("should testMCartoesIdConsultarDadosReais response", function testMCartoesIdConsultarDadosReaisTest(done) {
        // parameters for the API call
        let authorization = '{{tokenOauth}}';

        controller.getCartoesIdConsultarDadosReais(authorization, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "flagVirtual": 0,
  "numeroCartao": "string",
  "dataValidade": "string",
  "cvv2": "string",
  "nomePlastico": "string",
  "idConta": 0,
  "idCartao": 0,
  "numeroAgencia": 0,
  "numeroContaCorente": "string",
  "idStatusConta": 0,
  "statusConta": "string",
  "idStatusCartao": 0,
  "statusCartao": "string"
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>This resource allows to search the dates of a Card printed.</p>

     */
    it("should testMCartoesIdConsultarDadosImpressao response", function testMCartoesIdConsultarDadosImpressaoTest(done) {
        // parameters for the API call
        let authorization = '{{tokenOauth}}';

        controller.getCartoesIdConsultarDadosImpressao(authorization, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "idConta": 0,
  "idPessoa": 0,
  "idCartao": 0,
  "idBandeira": 0,
  "idTipoCartao": 0,
  "numeroCartao": "string",
  "nomePlastico": "string",
  "cvv2": "string",
  "dataGeracao": "string",
  "dataValidade": "string",
  "cpf": "string",
  "tipoPortador": "string",
  "trilha1": "string",
  "trilha2": "string",
  "trilhaCVV1": "string",
  "trilhaCVV2": "string",
  "flagVirtual": 0,
  "nomeBandeira": "string",
  "flagTitular": 0,
  "sequencialCartao": 0,
  "idStatus": 0,
  "descricaoStatusCartao": "string",
  "dataStatus": "string",
  "idEstagio": 0,
  "descricaoEstagio": "string",
  "dataEstagio": "string",
  "numeroBin": "string",
  "idProduto": 0,
  "descricaoProduto": "string",
  "idStatusConta": 0,
  "descricaoStatusConta": 0,
  "dataEmbossing": "string",
  "codigoDesbloqueio": "string",
  "nomePessoa": "string",
  "tipoPessoa": "string",
  "dataNascimento": "string",
  "idEndereco": 0,
  "idTipoEndereco": 0,
  "descricaoTipoEndereco": "string",
  "cep": "string",
  "logradouro": "string",
  "numeroEndereco": "string",
  "complementoEndereco": "string",
  "bairro": "string",
  "cidade": "string",
  "uf": "string",
  "pais": "string",
  "senhaCriptografada": "string",
  "icvv": "string",
  "idStatusImpressao": 0
}, false, true, false));
            done();
        }).catch(() => undefined);
    });
});
