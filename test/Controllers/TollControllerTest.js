/**
 * BaaSCaradhrasAPIDocumentationLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const chai = require('chai');
const assert = chai.assert;
const TestHelper = require("../TestHelper");
const APIHelper = require("../../lib/APIHelper");
const testerlib = require("../../lib");
const testConfiguration = require("../TestBootstrap");
const baseController = require("../../lib/Controllers/BaseController");

const controller = testerlib.TollController;
const MTollsRecharges = testerlib.MTollsRecharges;
const MTollsRechargesrequest = testerlib.MTollsRechargesrequest;
const MTollsRechargesrequest1 = testerlib.MTollsRechargesrequest1;
const MTollsRechargesrequest2 = testerlib.MTollsRechargesrequest2;
const MTollsRecharges34943232 = testerlib.MTollsRecharges34943232;
const MTollsDownloads34943232 = testerlib.MTollsDownloads34943232;

describe("TollController Tests", function tests() {
    this.timeout(testConfiguration.TEST_TIMEOUT);

    /**
     * <p>The API works in two step process. First, it requests a recharge cryptogram, this will be saved into the card. At this moment the recharge amount and fee amount is taken from the original account (informed in the request) and transferred to a transitory account.
After that, the it must call a second endpoint to confirm or cancel the recharge.</p>
<div class="click-to-expand-wrapper is-table-wrapper"><table>
<thead>
<tr>
<th>FIELD NAME</th>
<th>FIELD TYPE</th>
<th>DESCRIPTION</th>
<th>REQUIRED</th>
</tr>
</thead>
<tbody>
<tr>
<td>accountNumber</td>
<td>Number</td>
<td>Account number to be debited</td>
<td>Y</td>
</tr>
<tr>
<td>hexCardNumber</td>
<td>Alpha</td>
<td>This is the card number masked. The mask is BIN + FF + Rest of card number + FF For example, for the card 12345678912345678 the mask should be: 123456FF78912345678FF</td>
<td>Y</td>
</tr>
<tr>
<td>internalCounterHex</td>
<td>Number</td>
<td>Amount of transactions with the card in hexadecimal format. This field will be incremented with 1, before cryptogram be generated</td>
<td>Y</td>
</tr>
<tr>
<td>transactionPartnerNumber</td>
<td>Number</td>
<td>This field is the id of the transaction. It will be used in all future requests. The maximum character allowed is 15</td>
<td>Y</td>
</tr>
<tr>
<td>feeTollValue</td>
<td>Decimal</td>
<td>The fee to be credited into the partner account. This field must be sent as string, for example, “1.00”, because we discard the decimal separator and assume two decimal digits</td>
<td>Y</td>
</tr>
<tr>
<td>creditTollValue</td>
<td>Decimal</td>
<td>The value to be credited into the card and wihch the cryptogram is based on. This field must be sent as string, for example, “1.00”, because we discard the decimal separator and assume two decimal digits</td>
<td>Y</td>
</tr>
<tr>
<td>transactionCounter</td>
<td>Number</td>
<td>Card's transaction counter</td>
<td>Y</td>
</tr>
<tr>
<td>cardBalance</td>
<td>Number</td>
<td>Card's balance. This field must be sent as string, for example, “1.00”, because we discard the decimal separator and assume two decimal digits</td>
<td>Y</td>
</tr>
<tr>
<td>requestDate</td>
<td>Date</td>
<td>Request date to be saved into crytogram. Format: yyyy-MM-dd hh:mm:ss</td>
<td>Y</td>
</tr>
</tbody>
</table>
</div>
     */
    it("should testMTollsRecharges response", function testMTollsRechargesTest(done) {
        // parameters for the API call
        let authorization = '{{tokenOauth}}';
        let contentType = 'application/json';
        let body = baseController.getObjectMapper().mapObject({
  "accountNumber": 12,
  "hexCardNumber": "406493FF0002564667FF",
  "internalCounterHex": "a27032",
  "transactionPartnerNumber": 9999699912239,
  "feeTollValue": "1.00",
  "creditTollValue": "1.00",
  "transactionCounter": 22,
  "cardBalance": "5.00",
  "requestDate": "2019-09-25 15:33:00"
}, 'MTollsRechargesrequest');

        controller.createTollsRecharges(authorization, contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = null;
            headers['Content-Length'] = null;
            headers['Connection'] = null;
            headers['Date'] = null;
            headers['x-amzn-RequestId'] = null;
            headers['x-amzn-Remapped-Content-Length'] = null;
            headers['x-amz-apigw-id'] = null;
            headers['X-Amzn-Trace-Id'] = null;
            headers['X-Cache'] = null;
            headers['Via'] = null;
            headers['X-Amz-Cf-Id'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "transactionCode": "354106927-6263-866296868 405793-568091-766016",
  "chargeDate": "2019-06-27T16: 36: 20.243",
  "cryptogram": "123456FF78912345678FF",
  "transactionNumber": 123
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>1) In case of <code>cancel the transaction</code>, the balance (credit + fee) will be sent back to the original account.</p>
<p>2) In case of <code>confirm the transaction</code>, the credit value will be sent to the final account (09), internally called lock funds, because the partner is not supposed to have access to this amount. It’s only for conference. The fee amount will be sent to the partner account (06).</p>
<div class="click-to-expand-wrapper is-table-wrapper"><table>
<thead>
<tr>
<th>FIELD NAME</th>
<th>FIELD TYPE</th>
<th>DESCRIPTION</th>
<th>REQUIRED</th>
</tr>
</thead>
<tbody>
<tr>
<td>ChargeIsConfirmed</td>
<td>Boolean</td>
<td>True to confirm a recharge. False to cancel a recharge</td>
<td>Y</td>
</tr>
<tr>
<td>transactionCertificate</td>
<td>Alpha</td>
<td>Transaction certificate, generated by the partner</td>
<td>Y</td>
</tr>
<tr>
<td>transactionPartnerNumber</td>
<td>Number</td>
<td>Transaction’s id</td>
<td>Y</td>
</tr>
</tbody>
</table>
</div>
     */
    it("should testMTollsRecharges1 response", function testMTollsRecharges1Test(done) {
        // parameters for the API call
        let authorization = '{{tokenOauth}}';
        let contentType = 'application/json';
        let body = baseController.getObjectMapper().mapObject({
  "chargeIsConfirmed": false,
  "transactionCertificate": "D172C10D5CC4B46C",
  "transactionPartnerNumber": 9999699912239
}, 'MTollsRechargesrequest1');

        controller.updateTollsRecharges(authorization, contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = null;
            headers['Content-Length'] = null;
            headers['Connection'] = null;
            headers['Date'] = null;
            headers['x-amzn-RequestId'] = null;
            headers['x-amzn-Remapped-Content-Length'] = null;
            headers['x-amz-apigw-id'] = null;
            headers['X-Amzn-Trace-Id'] = null;
            headers['X-Cache'] = null;
            headers['Via'] = null;
            headers['X-Amz-Cf-Id'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "transactionCode": "354106927-6263-866296868 405793-568091-766016",
  "chargeDate": "2019-06-27T16: 36: 20.243",
  "cryptogram": "123456FF78912345678FF",
  "transactionNumber": 123
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>This API generates a cryptogram based on the data received in the request. After that, it debits the account 09 (final account) and credits the account informed in the request.</p>
<div class="click-to-expand-wrapper is-table-wrapper"><table>
<thead>
<tr>
<th>FIELD NAME</th>
<th>FIELD TYPE</th>
<th>DESCRIPTION</th>
<th>REQUIRED</th>
</tr>
</thead>
<tbody>
<tr>
<td>accountNumber</td>
<td>Number</td>
<td>Account number to be debited</td>
<td>Y</td>
</tr>
<tr>
<td>hexCardNumber</td>
<td>Alpha</td>
<td>This is the card number masked. The mask is BIN + FF + Rest of card number + FF For example, for the card 12345678912345678 the mask should be: 123456FF78912345678FF</td>
<td>Y</td>
</tr>
<tr>
<td>internalCounterHex</td>
<td>Number</td>
<td>Amount of transactions with the card in hexadecimal format. This field will be incremented with 1, before cryptogram be generated</td>
<td>Y</td>
</tr>
<tr>
<td>transactionPartnerNumber</td>
<td>Number</td>
<td>This field is the id of the transaction. It will be used in all future requests</td>
<td>Y</td>
</tr>
<tr>
<td>debitValue</td>
<td>Decimal</td>
<td>The value to be debited from the account and which the cryptogram is based on. This field must be sent as string, for example, “1.00”, because we discard the decimal separator and assume two decimal digits</td>
<td>Y</td>
</tr>
<tr>
<td>transactionCounter</td>
<td>Number</td>
<td>Card's transaction counter</td>
<td>Y</td>
</tr>
<tr>
<td>cardBalance</td>
<td>Number</td>
<td>Card's balance. This field must be sent as string, for example, “1.00”, because we discard the decimal separator and assume two decimal digits</td>
<td>Y</td>
</tr>
<tr>
<td>requestDate</td>
<td>Date</td>
<td>Request date to be saved into crytogram. Format: yyyy-MM-dd hh:mm:ss</td>
<td>Y</td>
</tr>
</tbody>
</table>
</div>
     */
    it("should testMTollsRecharges2 response", function testMTollsRecharges2Test(done) {
        // parameters for the API call
        let authorization = '{{tokenOauth}}';
        let contentType = 'application/json';
        let body = baseController.getObjectMapper().mapObject({
  "accountNumber": 10057584,
  "hexCardNumber": "123456FF78912345678FF",
  "transactionCounterHex": 14.08,
  "transactionPartnerNumber": 123,
  "debitValue": 100.0
}, 'MTollsRechargesrequest2');

        controller.deleteTollsRecharges(authorization, contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = null;
            headers['Content-Length'] = null;
            headers['Connection'] = null;
            headers['Date'] = null;
            headers['x-amzn-RequestId'] = null;
            headers['x-amzn-Remapped-Content-Length'] = null;
            headers['x-amz-apigw-id'] = null;
            headers['X-Amzn-Trace-Id'] = null;
            headers['X-Cache'] = null;
            headers['Via'] = null;
            headers['X-Amz-Cf-Id'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "transactionCode": "354106927-6263-866296868 405793-568091-766016",
  "chargeDate": "2019-06-27T16: 36: 20.243",
  "cryptogram": "123456FF78912345678FF",
  "transactionNumber": 123
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>Request</p>
<div class="click-to-expand-wrapper is-table-wrapper"><table>
<thead>
<tr>
<th>PATH PARAMETER</th>
<th>TYPE</th>
<th>DESCRIPTION</th>
<th>REQUIRED</th>
</tr>
</thead>
<tbody>
<tr>
<td>numeroTransacaoParceiro</td>
<td>Number</td>
<td>The id of the transaction, used to locate the data</td>
<td>Y</td>
</tr>
</tbody>
</table>
</div><p>Response </p>
<div class="click-to-expand-wrapper is-table-wrapper"><table>
<thead>
<tr>
<th>FIELD NAME</th>
<th>FIELD TYPE</th>
<th>DESCRIPTION</th>
</tr>
</thead>
<tbody>
<tr>
<td>Id</td>
<td>Number</td>
<td>Transaction’s internal id</td>
</tr>
<tr>
<td>destinationAccountNumber</td>
<td>Number</td>
<td>Destination Account number</td>
</tr>
<tr>
<td>hexCardNumber</td>
<td>Alpha</td>
<td>Card number in hexadecimal format</td>
</tr>
<tr>
<td>transactionCounter</td>
<td>Number</td>
<td>Transaction counter</td>
</tr>
<tr>
<td>transactionPartnerNumber</td>
<td>Number</td>
<td>Partner’s transaction number</td>
</tr>
<tr>
<td>debitValue</td>
<td>Decimal</td>
<td>Value to be debited from 09 account</td>
</tr>
<tr>
<td>createdOn</td>
<td>Datetime</td>
<td>Creation’s date</td>
</tr>
<tr>
<td>cryptogram</td>
<td>Alpha</td>
<td>Cryptogram sent to card</td>
</tr>
<tr>
<td>internalTransactionCode</td>
<td>Alpha</td>
<td>Transaction code generated on the first request</td>
</tr>
<tr>
<td>internalCounterHex</td>
<td>Apha</td>
<td>Internal coutner in hexadecimal format</td>
</tr>
<tr>
<td>cardBalance</td>
<td>Number</td>
<td>Card's balance</td>
</tr>
</tbody>
</table>
</div>
     */
    it("should testTollsRechargesTransactionPartnerNumber response", function testTollsRechargesTransactionPartnerNumberTest(done) {
        // parameters for the API call
        let authorization = '{{tokenOauth}}';
        let contentType = 'application/json';

        controller.getTollsRechargesTransactionPartnerNumber(authorization, contentType, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = null;
            headers['Content-Length'] = null;
            headers['Connection'] = null;
            headers['Date'] = null;
            headers['x-amzn-RequestId'] = null;
            headers['x-amzn-Remapped-Content-Length'] = null;
            headers['x-amz-apigw-id'] = null;
            headers['X-Amzn-Trace-Id'] = null;
            headers['X-Cache'] = null;
            headers['Via'] = null;
            headers['X-Amz-Cf-Id'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "accountNumber": 18,
  "hexCardNumber": "406493FF0006687175FF",
  "transactionCounter": 2,
  "transactionPartnerNumber": "1502768091",
  "tollCreditFeeValue": "0.10",
  "tollCreditValue": "0.10",
  "internalCounterHex": "a27032",
  "cardBalance": "5.00",
  "createdOn": "2019-09-20T14: 27: 17.12Z",
  "cryptogram": "A4DC0013081122334455667788",
  "confirmedOn": "2019-09-20T14: 27: 27.389Z",
  "internalTransactionCode": "335429353-2971-236672015 103121-354439-763853",
  "transactionCertificate": "D172C10D5CC4B46C",
  "isCanceled": null,
  "status": "CONFIRMED"
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>Request</p>
<div class="click-to-expand-wrapper is-table-wrapper"><table>
<thead>
<tr>
<th>PATH PARAMETER</th>
<th>TYPE</th>
<th>DESCRIPTION</th>
<th>REQUIRED</th>
</tr>
</thead>
<tbody>
<tr>
<td>numeroTransacaoParceiro</td>
<td>Number</td>
<td>The id of the transaction, used to locate the data</td>
<td>Y</td>
</tr>
</tbody>
</table>
</div><p>Response </p>
<div class="click-to-expand-wrapper is-table-wrapper"><table>
<thead>
<tr>
<th>FIELD NAME</th>
<th>FIELD TYPE</th>
<th>DESCRIPTION</th>
</tr>
</thead>
<tbody>
<tr>
<td>Id</td>
<td>Number</td>
<td>Transaction’s internal id</td>
</tr>
<tr>
<td>destinationAccountNumber</td>
<td>Number</td>
<td>Destination Account number</td>
</tr>
<tr>
<td>hexCardNumber</td>
<td>Alpha</td>
<td>Card number in hexadecimal format</td>
</tr>
<tr>
<td>transactionCounter</td>
<td>Number</td>
<td>Transaction counter</td>
</tr>
<tr>
<td>transactionPartnerNumber</td>
<td>Number</td>
<td>Partner’s transaction number</td>
</tr>
<tr>
<td>debitValue</td>
<td>Decimal</td>
<td>Value to be debited from 09 account</td>
</tr>
<tr>
<td>createdOn</td>
<td>Datetime</td>
<td>Creation’s date</td>
</tr>
<tr>
<td>cryptogram</td>
<td>Alpha</td>
<td>Cryptogram sent to card</td>
</tr>
<tr>
<td>internalTransactionCode</td>
<td>Alpha</td>
<td>Transaction code generated on the first request</td>
</tr>
<tr>
<td>internalCounterHex</td>
<td>Apha</td>
<td>Internal coutner in hexadecimal format</td>
</tr>
<tr>
<td>cardBalance</td>
<td>Number</td>
<td>Card's balance</td>
</tr>
</tbody>
</table>
</div>
     */
    it("should testMTollsDownloadsTransactionPartnerNumber response", function testMTollsDownloadsTransactionPartnerNumberTest(done) {
        // parameters for the API call
        let authorization = '{{tokenOauth}}';
        let contentType = 'application/json';

        controller.getTollsDownloadsTransactionPartnerNumber(authorization, contentType, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = null;
            headers['Content-Length'] = null;
            headers['Connection'] = null;
            headers['Date'] = null;
            headers['x-amzn-RequestId'] = null;
            headers['x-amzn-Remapped-Content-Length'] = null;
            headers['x-amz-apigw-id'] = null;
            headers['X-Amzn-Trace-Id'] = null;
            headers['X-Cache'] = null;
            headers['Via'] = null;
            headers['X-Amz-Cf-Id'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "destinationAccountNumber": 18,
  "hexCardNumber": "406493FF0006687175FF",
  "transactionCounter": 2,
  "transactionPartnerNumber": "666285868",
  "debitValue": "0.10",
  "createdOn": "2019-09-20T14: 29: 31.156Z",
  "cryptogram": "A4DC0013081122334455667788",
  "internalTransactionCode": "374144060-4719-861719017 664780-651791-337048",
  "internalCounterHex": "a27032",
  "cardBalance": "5.00"
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>Request</p>
<div class="click-to-expand-wrapper is-table-wrapper"><table>
<thead>
<tr>
<th>PATH PARAMETER</th>
<th>TYPE</th>
<th>DESCRIPTION</th>
<th>REQUIRED</th>
</tr>
</thead>
<tbody>
<tr>
<td>numeroTransacaoParceiro</td>
<td>Number</td>
<td>The id of the transaction, used to locate the data</td>
<td>Y</td>
</tr>
</tbody>
</table>
</div><p>Response </p>
<div class="click-to-expand-wrapper is-table-wrapper"><table>
<thead>
<tr>
<th>FIELD NAME</th>
<th>FIELD TYPE</th>
<th>DESCRIPTION</th>
</tr>
</thead>
<tbody>
<tr>
<td>Id</td>
<td>Number</td>
<td>Transaction’s internal id</td>
</tr>
<tr>
<td>destinationAccountNumber</td>
<td>Number</td>
<td>Destination Account number</td>
</tr>
<tr>
<td>hexCardNumber</td>
<td>Alpha</td>
<td>Card number in hexadecimal format</td>
</tr>
<tr>
<td>transactionCounter</td>
<td>Number</td>
<td>Transaction counter</td>
</tr>
<tr>
<td>transactionPartnerNumber</td>
<td>Number</td>
<td>Partner’s transaction number</td>
</tr>
<tr>
<td>debitValue</td>
<td>Decimal</td>
<td>Value to be debited from 09 account</td>
</tr>
<tr>
<td>createdOn</td>
<td>Datetime</td>
<td>Creation’s date</td>
</tr>
<tr>
<td>cryptogram</td>
<td>Alpha</td>
<td>Cryptogram sent to card</td>
</tr>
<tr>
<td>internalTransactionCode</td>
<td>Alpha</td>
<td>Transaction code generated on the first request</td>
</tr>
<tr>
<td>internalCounterHex</td>
<td>Apha</td>
<td>Internal coutner in hexadecimal format</td>
</tr>
<tr>
<td>cardBalance</td>
<td>Number</td>
<td>Card's balance</td>
</tr>
</tbody>
</table>
</div>
     */
    it("should testMTollsRechargesWarmup response", function testMTollsRechargesWarmupTest(done) {
        // parameters for the API call
        let authorization = '{{tokenOauth}}';
        let contentType = 'application/json';

        controller.getTollsRechargesWarmup(authorization, contentType, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = null;
            headers['Content-Length'] = null;
            headers['Connection'] = null;
            headers['Date'] = null;
            headers['x-amzn-RequestId'] = null;
            headers['x-amzn-Remapped-Content-Length'] = null;
            headers['x-amz-apigw-id'] = null;
            headers['X-Amzn-Trace-Id'] = null;
            headers['X-Cache'] = null;
            headers['Via'] = null;
            headers['X-Amz-Cf-Id'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            done();
        }).catch(() => undefined);
    });
});
