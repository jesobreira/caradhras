/**
 * BaaSCaradhrasAPIDocumentationLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const chai = require('chai');
const assert = chai.assert;
const TestHelper = require("../TestHelper");
const APIHelper = require("../../lib/APIHelper");
const testerlib = require("../../lib");
const testConfiguration = require("../TestBootstrap");
const baseController = require("../../lib/Controllers/BaseController");

const controller = testerlib.IndividualsV2Controller;
const MIndividualsAccounts = testerlib.MIndividualsAccounts;
const MIndividualsRegisteredUnderContingency = testerlib.MIndividualsRegisteredUnderContingency;
const MIndividualsrequest = testerlib.MIndividualsrequest;
const MIndividuals = testerlib.MIndividuals;
const MIndividualsId = testerlib.MIndividualsId;
const MIndividualsId1 = testerlib.MIndividualsId1;
const MIndividualsAccountsAccountIdAdditionalsRequest = testerlib.MIndividualsAccountsAccountIdAdditionalsRequest;

describe("IndividualsV2Controller Tests", function tests() {
    this.timeout(testConfiguration.TEST_TIMEOUT);

    /**
     * <p>Allow to create the register of a Physical Person, receiving in this operation all the register dates which are necessary for this. Once created, it will allow the method Card Creation for the client and their additionals.</p>
<blockquote>
<p>Check the documentation <a href="https://s3-sa-east-1.amazonaws.com/baas-docs.caradhras.io/Fields_Register_Client.pdf">here</a> for additional information about <code>identification fields</code>.</p>
<p>Check the documentation <a href="https://s3-sa-east-1.amazonaws.com/baas-docs.caradhras.io/StatusCode_individual_account.pdf">here</a> for additional information about <code>Know Your Client errors</code> and <code>errors status code</code>.</p>
</blockquote>
<blockquote>
<p>Check the FAQs below:</p>
<ul>
<li><a href="https://baas-cdt.zendesk.com/hc/pt-br/articles/360027496192">Why all accounts should have card associated?</a></li>
</ul>
</blockquote>
<p>In some cases, the CPF does not exist in the database, then it is not possible to validate any cadastral information. In order not to impact the user, the registration is accepted even without automatic validation, but is sent for analysis that requires a manual checks and take some action if necessary. In this case, the Partner is always advised.</p>

     */
    it("should testMIndividualsAccounts response", function testMIndividualsAccountsTest(done) {
        // parameters for the API call
        let contentType = 'application/json';
        let authorization = '{{tokenOauth}}';
        let body = '{\r\n\t"name": "Arwen Undómiel", \r\n\tRequired for KYC: Add name of the person who will own the account\r\n\t"motherName": "Celebrían Margareth", \r\n\tRequired for KYC: Add mother\'s legal name for \'name\'\r\n\t"birthDate": "1980-01-20", \r\n\tRequired for KYC: Add birth date for \'name\'. Use the format YYYY-MM-DD.\r\n\t"document": "42875578839", \r\n\tRequired for KYC: Add CPF\'s number for \'name\'\r\n\t"idBusinessSource": 1, \r\n\tRequired for the platform. This number shoud be consulted with the CDT project leader.\r\n\t"idProduct": 1, \r\n\tRequired for account creation in this method. It is the products defined on the setup process. \r\n\t"dueDate": 10, \r\n\tRequired for the platform, if the product is a pre-paid card, use `default value = 10`.\r\n\t"printedName": "Teste", \r\n\tOptional: Name to print on card. The embosser allows up to 21 characters to be printed on the card.\r\n\t"gender": "M", \r\n\tOptional: (gender= "F" for female, "M" for male, "N" for not specified, "O" for other)\r\n\t"idNumber": "5477865", \r\n\tOptional: Add the RG for \'name\'\r\n\t"identityIssuingEntity": "SSP", \r\n\tOptional.\r\n\t"federativeUnit": "SP", \r\n\tOptional: Acronym of the Federal Unity where it was issued the Identity.\r\n\t"issuingDateIdentity": "2000-02-01", \r\n\tOptional.\r\n\t"idMaritalStatus": 1, \r\n\tOptional: For more information about the identification fields, access the link in the description.\r\n\t"idOccupationType": 1, \r\n\tOptional: For more information about the identification fields, access the link in the description.\r\n\t"idProfession": "1", \r\n\tOptional: For more information about the identification fields, access the link in the description.\r\n\t"idNationality": 1, \r\n\tOptional: For more information about the identification fields, access the link in the description.\r\n\t"branchNumber": 0, \r\n\tOptional.\r\n\t"accountNumber": "1234", \r\n\tOptional.\r\n\t"email": "lorem@lorem.com", \r\n\tOptional.\r\n\t"companyName": "0", \r\n\tOptional: Name of the company where "name" works\r\n\t"incomeValue": 110000, \r\n\tOptional.\r\n\t"address": {\r\n\t\t"idAddressType": 1, \r\n\t\tFor more information about the identification fields, access the link in the description.\r\n\t\t"zipCode": "04472200", \r\n\t\tString (8).\r\n\t\t"street": "Travessa Oceano", \r\n\t\tString (40).\r\n\t\t"number": 777, \r\n\t\t"complement": "Complemento 120", \r\n\t\tOptional. String (30).\r\n\t\t"neighborhood": "Pinheiro", \r\n\t\tString (40).\r\n\t\t"city": "São Paulo", \r\n\t\t"federativeUnit": "SP", \r\n\t\tAcronym of the Federal Unity where it was issued the Identity\r\n\t\t"country": "Brasil", \r\n\t\t"mailingAddress": true\r\n\t}, \r\n\tThe address must be filled completely, except `complement` field. This will directly impact the `/billet` method, because it needs all the infos for the `boleto`registration at NPC.\r\n\t"phone": {\r\n\t\t"idPhoneType": 1, \r\n\t\tFor more information about the identification fields, access the link in the description.\r\n\t\t"areaCode": "011", \r\n\t\t"number": "987654321"\r\n\t}\r\n\tThe phone must be filled completely.\r\n}\r\n';

        controller.createIndividualsAccounts(contentType, authorization, body, function callback(error, response, context) {
            // test response code
            assert.equal(201, context.response.statusCode);
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "id": 2011,
  "name": "Arwen Undómiel",
  "motherName": "Celebrían Margareth",
  "birthDate": "1980-10-30",
  "document": "42875578839",
  "idBusinessSource": 1,
  "idProduct": 1,
  "idAccount": 2356,
  "dueDate": 10,
  "printedName": "Teste",
  "gender": "M",
  "idNumber": "5477865",
  "identityIssuingEntity": "SSP",
  "federativeUnit": "SP",
  "issuingDateIdentity": "2000-02-01",
  "idMaritalStatus": 1,
  "idOccupationType": 1,
  "idProfession": "1",
  "idNationality": 1,
  "branchNumber": 0,
  "accountNumber": "1234",
  "email": "lorem@lorem.com",
  "companyName": "0",
  "incomeValue": 110000,
  "address": {
    "id": 75,
    "idAddressType": 1,
    "zipCode": "04472200",
    "street": "Travessa Oceano",
    "number": 777,
    "complement": "Complemento 120",
    "neighborhood": "Pinheiro",
    "city": "São Paulo",
    "federativeUnit": "SP",
    "country": "Brasil",
    "mailingAddress": true
  },
  "phone": {
    "id": 20,
    "idPhoneType": 1,
    "areaCode": "011",
    "number": "987654321"
  }
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>This method allows a new Physical Person to be registered in the Issuer database.</p>
<blockquote>
<p>Check the documentation <a href="https://s3-sa-east-1.amazonaws.com/baas-docs.caradhras.io/Fields_Register_Client.pdf">here</a> for additional information about <code>identification fields</code>.</p>
<p>Check the documentation <a href="https://s3-sa-east-1.amazonaws.com/baas-docs.caradhras.io/StatusCode_individuals.pdf">here</a> for additional information about <code>Know Your Client errors</code> and <code>errors status code</code>.</p>
</blockquote>
<p>In some cases, the CPF does not exist in the database, then it is not possible to validate any cadastral information. In order not to impact the user, the registration is accepted even without automatic validation, but is sent for analysis that requires a manual checks and take some action if necessary. In this case, the Partner is always advised.</p>

     */
    it("should testMIndividuals response", function testMIndividualsTest(done) {
        // parameters for the API call
        let contentType = 'application/json';
        let authorization = '{{tokenOauth}}';
        let body = baseController.getObjectMapper().mapObject({
  "name": "Joselito de Souza Silva",
  "preferredName": "Joselita",
  "motherName": "Josefina de Jesus",
  "birthDate": "1985-12-09",
  "document": "68519642446",
  "gender": "M",
  "idNumber": "6537265",
  "identityIssuingEntity": "SSP",
  "federativeUnit": "SP",
  "issuingDateIdentity": "2000-02-01",
  "idMaritalStatus": 1,
  "idOccupationType": 1,
  "idProfession": "1",
  "idNationality": 1,
  "address": {
    "idAddressType": 1,
    "zipCode": "04472200",
    "street": "Travessa Oceano",
    "number": 777,
    "complement": "Complemento 120",
    "neighborhood": "Pinheiro",
    "city": "São Paulo",
    "federativeUnit": "SP",
    "country": "Brasil"
  },
  "phone": {
    "idPhoneType": 1,
    "areaCode": "011",
    "number": "987654321"
  }
}, 'MIndividualsrequest');

        controller.createIndividuals(contentType, authorization, body, function callback(error, response, context) {
            // test response code
            assert.equal(202, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = null;
            headers['Content-Length'] = null;
            headers['Connection'] = null;
            headers['Date'] = null;
            headers['x-amzn-RequestId'] = null;
            headers['x-amz-apigw-id'] = null;
            headers['X-Amzn-Trace-Id'] = null;
            headers['X-Cache'] = null;
            headers['Via'] = null;
            headers['X-Amz-Cf-Pop'] = null;
            headers['X-Amz-Cf-Id'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "id": 39272,
  "name": "Joselito de Souza Silva",
  "preferredName": "Joselita",
  "motherName": "Josefina de Jesus",
  "birthDate": "1985-12-09",
  "document": "68519642446",
  "gender": "M",
  "idNumber": "6537265",
  "identityIssuingEntity": "SSP",
  "federativeUnit": "SP",
  "issuingDateIdentity": "2000-02-01",
  "idMaritalStatus": 1,
  "idOccupationType": 1,
  "idProfession": "1",
  "idNationality": 1,
  "address": {
    "idAddressType": 1,
    "zipCode": "04472200",
    "street": "Travessa Oceano",
    "number": 777,
    "complement": "Complemento 120",
    "neighborhood": "Pinheiro",
    "city": "São Paulo",
    "federativeUnit": "SP",
    "country": "Brasil"
  },
  "phone": {
    "idPhoneType": 1,
    "areaCode": "011",
    "number": "987654321"
  }
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>This method allows to list all the People existent in the database of the issuer.</p>

     */
    it("should testMIndividuals1 response", function testMIndividuals1Test(done) {
        // parameters for the API call
        let page = 'Integer(optional)';
        let limit = 'Integer(Default = 50 / Max = 50) (optional)';
        let document = 'String (optional)';
        let authorization = '{{tokenOauth}}';

        controller.getIndividuals(page, limit, document, authorization, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "previousPage": 0,
  "currentPage": 1,
  "nextPage": 2,
  "last": false,
  "totalPages": 11,
  "totalItems": 22,
  "maxItemsPerPage": 2,
  "totalItemsPage": 2,
  "items": [
    {
      "id": 26269,
      "name": "Andreas Hodkiewicz",
      "document": "47636157934",
      "birthDate": "1989-12-07T00: 00: 00Z",
      "gender": "N",
      "federativeUnit": "SP",
      "issuingDateIdentity": "2015-01-03"
    },
    {
      "id": 26270,
      "name": "Andreas Hodkiewicz",
      "document": "47636157934",
      "birthDate": "1989-12-07T00: 00: 00Z",
      "gender": "N",
      "federativeUnit": "SP",
      "issuingDateIdentity": "2015-01-03"
    }
  ]
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>This method allows to be listed a specific person existent in the database of the issuer.</p>

     */
    it("should testMIndividualsId response", function testMIndividualsIdTest(done) {
        // parameters for the API call
        let authorization = '{{tokenOauth}}';

        controller.getIndividualsId(authorization, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = null;
            headers['Content-Length'] = null;
            headers['Connection'] = null;
            headers['Date'] = null;
            headers['x-amzn-RequestId'] = null;
            headers['Access-Control-Allow-Origin'] = null;
            headers['Access-Control-Allow-Headers'] = null;
            headers['x-amzn-Remapped-Connection'] = null;
            headers['x-amz-apigw-id'] = null;
            headers['x-amzn-Remapped-Server'] = null;
            headers['Access-Control-Allow-Methods'] = null;
            headers['x-amzn-Remapped-Date'] = null;
            headers['X-Application-Context'] = null;
            headers['Access-Control-Max-Age'] = null;
            headers['Access-Control-Allow-Credentials'] = null;
            headers['X-Cache'] = null;
            headers['Via'] = null;
            headers['X-Amz-Cf-Id'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "id": 26269,
  "name": "Andreas Hodkiewicz",
  "document": "47636157934",
  "birthDate": "1989-12-07T00: 00: 00Z",
  "gender": "N",
  "federativeUnit": "SP",
  "issuingDateIdentity": "2015-01-03"
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>This method allows to be updated in the base of the issuer a register of a determined Person.</p>
<blockquote>
<p>Check the documentation <a href="https://s3-sa-east-1.amazonaws.com/baas-docs.caradhras.io/Fields_Register_Client.pdf">here</a> for additional information about <code>identification fields</code>.</p>
<p>Check the documentation <a href="https://s3-sa-east-1.amazonaws.com/baas-docs.caradhras.io/StatusCode_individual_account.pdf">here</a> for additional information about <code>Know Your Client errors</code> and <code>errors status code</code>.</p>
</blockquote>

     */
    it("should testMIndividualsId1 response", function testMIndividualsId1Test(done) {
        // parameters for the API call
        let authorization = '{{tokenOauth}}';
        let contentType = 'application/json';
        let body = '{\n    "name": "ANDRESSA SILVA", \n    Required\n    "motherName": "RAFAELA SILVA", \n    Required\n\t"document": "06864853942", \n    Required\n    "birthDate": "1997-03-13", \n    Required\n    "gender": "F", \n    Optional\n    "identityIssuingEntity": "SSP", \n    Optional\n    "federativeUnit": "BA", \n    Optional\n    "issuingDateIdentity": "1999-07-12", \n    Optionl\n    "idMaritalStatus": 1, \n    Optional - For more information about the identification fields, access the link in the description.\n    "idProfession": "1", \n    Optional - For more information about the identification fields, access the link in the description.\n    "idNationality": 0, \n    Optional - For more information about the identification fields, access the link in the description.\n    "bankNumber": 0, \n    Optional\n    "branchNumber": 0, \n    Optional\n    "accountNumber": "2345", \n    Optional\n    "email": "teste@teste.com", \n    Optional\n    "companyName": "DOCK"\n\tOptional\n}';

        controller.updateIndividualsId(authorization, contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "id": 103,
  "name": "ANDRESSA SILVA",
  "motherName": "RAFAELA SILVA",
  "document": "06864853942",
  "birthDate": "1997-03-13",
  "gender": "F",
  "identityIssuingEntity": "SSP",
  "federativeUnit": "BA",
  "issuingDateIdentity": "1999-10-23",
  "idMaritalStatus": 1,
  "idProfession": "1",
  "idNationality": 0,
  "bankNumber": 222,
  "branchNumber": 1111,
  "accountNumber": "2345",
  "email": "teste@teste.com",
  "companyName": "DOCK"
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>Allow to create the register of a Natural Person, receiving in this operation all the register dates which are necessary for this and link it as an additional in a given account</p>

     */
    it("should testMIndividualsAccountsAccountIdAdditionals response", function testMIndividualsAccountsAccountIdAdditionalsTest(done) {
        // parameters for the API call
        let contentType = 'application/json';
        let authorization = '{{tokenOauth}}';
        let body = baseController.getObjectMapper().mapObject({
  "name": "Ramon Gonçalves de Jesus",
  "document": "02096434556",
  "birthDate": "1987-05-01",
  "printedName": "RAMON G J",
  "gender": "M",
  "idMaritalStatus": 1,
  "idNumber": "1234123123",
  "identityIssuingEntity": "SSP",
  "federativeUnit": "BA",
  "issuingDateIdentity": "2018-10-10",
  "idProfession": 1,
  "idNationality": 1,
  "idRelationship": "3",
  "email": "ramon@ramon.com"
}, 'MIndividualsAccountsAccountIdAdditionalsRequest');

        controller.createIndividualsAccountsAccountIdAdditionals(contentType, authorization, body, function callback(error, response, context) {
            // test response code
            assert.equal(201, context.response.statusCode);
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "id": 2011,
  "name": "Arwen Undómiel",
  "motherName": "Celebrían Margareth",
  "birthDate": "1980-10-30",
  "document": "42875578839",
  "idBusinessSource": 1,
  "idProduct": 1,
  "idAccount": 2356,
  "dueDate": 10,
  "printedName": "Teste",
  "gender": "M",
  "idNumber": "5477865",
  "identityIssuingEntity": "SSP",
  "federativeUnit": "SP",
  "issuingDateIdentity": "2000-02-01",
  "idMaritalStatus": 1,
  "idOccupationType": 1,
  "idProfession": "1",
  "idNationality": 1,
  "branchNumber": 0,
  "accountNumber": "1234",
  "email": "lorem@lorem.com",
  "companyName": "0",
  "incomeValue": 110000,
  "address": {
    "id": 75,
    "idAddressType": 1,
    "zipCode": "04472200",
    "street": "Travessa Oceano",
    "number": 777,
    "complement": "Complemento 120",
    "neighborhood": "Pinheiro",
    "city": "São Paulo",
    "federativeUnit": "SP",
    "country": "Brasil",
    "mailingAddress": true
  },
  "phone": {
    "id": 20,
    "idPhoneType": 1,
    "areaCode": "011",
    "number": "987654321"
  }
}, false, true, false));
            done();
        }).catch(() => undefined);
    });
});
