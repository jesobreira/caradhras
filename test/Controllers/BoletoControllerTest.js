/**
 * BaaSCaradhrasAPIDocumentationLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const chai = require('chai');
const assert = chai.assert;
const TestHelper = require("../TestHelper");
const APIHelper = require("../../lib/APIHelper");
const testerlib = require("../../lib");
const testConfiguration = require("../TestBootstrap");
const baseController = require("../../lib/Controllers/BaseController");

const controller = testerlib.BoletoController;
const MBillet = testerlib.MBillet;
const MPaymentsliprequest = testerlib.MPaymentsliprequest;
const MBoletos = testerlib.MBoletos;

describe("BoletoController Tests", function tests() {
    this.timeout(testConfiguration.TEST_TIMEOUT);

    /**
     * <p>Create and register a boleto</p>
<blockquote>
<p>Check the FAQ below:</p>
<ul>
<li><a href="https://baas-cdt.zendesk.com/hc/pt-br/articles/360018887592-Estou-com-problemas-para-emitir-ou-registrar-um-boleto-o-que-fa%C3%A7o-">I have problems to issue or record a bank slip, what should I do?</a></li>
<li><a href="https://baas-cdt.zendesk.com/hc/pt-br/articles/360030823631">How to identify a paid Recharge Bank Slip?</a></li>
<li><a href="https://baas-cdt.zendesk.com/hc/pt-br/articles/360031595611">How to create a bank slip linked to a third party (idPessoaFontePagadora)?</a></li>
</ul>
</blockquote>
<p>"tipoBoleto" returns: </p>
<table>
   <tr>
     <th>Parameters</th>
     <th>Description</th>
   </tr>
   <tr>
     <td>9</td>
     <td>Recarga</td>
   </tr>
</table>
     */
    it("should testMBillet response", function testMBilletTest(done) {
        // parameters for the API call
        let idConta = 'Integer - Required';
        let tipoBoleto = 'Integer - Required';
        let valor = 'Integer - Required';
        let dataVencimento = 'String (AAAA-MMDD) - Required';
        let idPessoafontePagadora = 'Integer - Optional (in cases where the bankslip will be paid by a different person)';
        let contentType = 'application/json';
        let authorization = '{{tokenOauth}}';

        controller.getBillet(idConta, tipoBoleto, valor, dataVencimento, idPessoafontePagadora, contentType, authorization, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = null;
            headers['Content-Length'] = null;
            headers['Connection'] = null;
            headers['Date'] = null;
            headers['x-amzn-RequestId'] = null;
            headers['Content-Encoding'] = null;
            headers['x-amz-apigw-id'] = null;
            headers['X-Amzn-Trace-Id'] = null;
            headers['X-Cache'] = null;
            headers['Via'] = null;
            headers['X-Amz-Cf-Id'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "numeroDoDocumento": "1090001150",
  "dataProcessamento": "2019-02-25T12: 37: 35.645+00: 00",
  "dataDocumento": "2019-02-25T12: 37: 36.645+00: 00",
  "dataVencimento": "2019-11-08T00: 00: 00+00: 00",
  "dataFechamento": null,
  "valorBoleto": 100,
  "nomeBeneficiario": "",
  "documentoBeneficiario": null,
  "agencia": "3391",
  "codigoBeneficiario": "7664",
  "numeroConvenio": "5053800",
  "digitoCodigoBeneficiario": "3",
  "carteira": "9",
  "nossoNumero": "010900011502",
  "digitoNossoNumero": null,
  "banco": "237-2",
  "aceite": false,
  "especieDoDocumento": null,
  "especie": "R$",
  "instrucoes": [
    ""
  ],
  "locaisDePagamento": [
    "",
    ""
  ],
  "nomePagador": "Arwen Und칩miel",
  "documentoPagador": "08650745776",
  "logradouroPagador": "Travessa Oceano, 10",
  "bairroPagador": "Pinheiros",
  "cepPagador": "04472200",
  "cidadePagador": "Sao Paulo",
  "ufPagador": "SP",
  "codigoDeBarras": "23791000000000000003391090109000115000076640",
  "linhaDigitavel": "99999.99999 99999.999999 99999.999999 9 99999999999999",
  "id": 2990,
  "idConta": 15,
  "enderecoCobrancaBeneficiario": " ",
  "status": 3,
  "boletoRegistrado": false,
  "fontePagadora": "Respons치vel pelo pagamento: ROCICLEIA LEOPOLDINO / 999.999.984-02"
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>Create and register a boleto.</p>
<blockquote>
<p>Check the FAQ below:</p>
<ul>
<li><a href="https://baas-cdt.zendesk.com/hc/pt-br/articles/360018887592-Estou-com-problemas-para-emitir-ou-registrar-um-boleto-o-que-fa%C3%A7o-">I have problems to issue or record a bank slip, what should I do?</a></li>
<li><a href="https://baas-cdt.zendesk.com/hc/pt-br/articles/360030823631">How to identify a paid Recharge Bank Slip?</a></li>
<li><a href="https://baas-cdt.zendesk.com/hc/pt-br/articles/360031595611">How to create a bank slip linked to a third party (idPessoaFontePagadora)?</a></li>
</ul>
</blockquote>
<p>"tipoBoleto" returns: </p>
<table>
   <tr>
     <th>Parameters</th>
     <th>Description</th>
   </tr>
   <tr>
     <td>9</td>
     <td>Recarga</td>
   </tr>
</table>
     */
    it("should testMBillet1 response", function testMBillet1Test(done) {
        // parameters for the API call
        let contentType = 'application/json';
        let authorization = '{{tokenOauth}}';
        let body = '{\n "idConta": 11, \n "tipoBoleto": 9, \n "valor": 2000, \n "dataVencimento": "2019-06-14", \n "idPessoafontePagadora": 11\n Optional\n}';

        controller.createBillet(contentType, authorization, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = null;
            headers['Content-Length'] = null;
            headers['Connection'] = null;
            headers['Date'] = null;
            headers['x-amzn-RequestId'] = null;
            headers['Content-Encoding'] = null;
            headers['x-amz-apigw-id'] = null;
            headers['X-Amzn-Trace-Id'] = null;
            headers['X-Cache'] = null;
            headers['Via'] = null;
            headers['X-Amz-Cf-Id'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "numeroDoDocumento": "1090001150",
  "dataProcessamento": "2019-02-25T12: 37: 35.645+00: 00",
  "dataDocumento": "2019-02-25T12: 37: 36.645+00: 00",
  "dataVencimento": "2019-11-08T00: 00: 00+00: 00",
  "dataFechamento": null,
  "valorBoleto": 100,
  "nomeBeneficiario": "",
  "documentoBeneficiario": null,
  "agencia": "3391",
  "codigoBeneficiario": "7664",
  "numeroConvenio": "5053800",
  "digitoCodigoBeneficiario": "3",
  "carteira": "9",
  "nossoNumero": "010900011502",
  "digitoNossoNumero": null,
  "banco": "237-2",
  "aceite": false,
  "especieDoDocumento": null,
  "especie": "R$",
  "instrucoes": [
    ""
  ],
  "locaisDePagamento": [
    "",
    ""
  ],
  "nomePagador": "Arwen Und칩miel",
  "documentoPagador": "08650745776",
  "logradouroPagador": "Travessa Oceano, 10",
  "bairroPagador": "Pinheiros",
  "cepPagador": "04472200",
  "cidadePagador": "Sao Paulo",
  "ufPagador": "SP",
  "codigoDeBarras": "23791000000000000003391090109000115000076640",
  "linhaDigitavel": "99999.99999 99999.999999 99999.999999 9 99999999999999",
  "id": 2990,
  "idConta": 15,
  "enderecoCobrancaBeneficiario": " ",
  "status": 3,
  "boletoRegistrado": false,
  "fontePagadora": "Respons치vel pelo pagamento: ROCICLEIA LEOPOLDINO / 999.999.984-02"
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>receives payment slip data and a final payer data at same time.</p>

     */
    it("should testMPaymentslip response", function testMPaymentslipTest(done) {
        // parameters for the API call
        let contentType = 'application/json';
        let authorization = '{{tokenOauth}}';
        let body = baseController.getObjectMapper().mapObject({
  "payingSource": {
    "name": "Dono do Teste de pagamento",
    "type": "PF",
    "document": "02096434556",
    "birthDate": "1970-10-10",
    "gender": "M",
    "idNumber": "3240123490",
    "identityIssuingEntity": "SSP",
    "identityFederativeUnity": "RJ",
    "issuingDateIdentity": "2018-05-10"
  },
  "bankSlip": {
    "idAccount": "14",
    "type": "9",
    "amount": "5000",
    "dueDate": "2020-10-10"
  }
}, 'MPaymentsliprequest');

        controller.createPaymentslip(contentType, authorization, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = null;
            headers['Content-Length'] = null;
            headers['Connection'] = null;
            headers['Date'] = null;
            headers['x-amzn-RequestId'] = null;
            headers['Content-Encoding'] = null;
            headers['x-amz-apigw-id'] = null;
            headers['X-Amzn-Trace-Id'] = null;
            headers['X-Cache'] = null;
            headers['Via'] = null;
            headers['X-Amz-Cf-Id'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "numeroDoDocumento": "1090001150",
  "dataProcessamento": "2019-02-25T12: 37: 35.645+00: 00",
  "dataDocumento": "2019-02-25T12: 37: 36.645+00: 00",
  "dataVencimento": "2019-11-08T00: 00: 00+00: 00",
  "dataFechamento": null,
  "valorBoleto": 100,
  "nomeBeneficiario": "",
  "documentoBeneficiario": null,
  "agencia": "3391",
  "codigoBeneficiario": "7664",
  "numeroConvenio": "5053800",
  "digitoCodigoBeneficiario": "3",
  "carteira": "9",
  "nossoNumero": "010900011502",
  "digitoNossoNumero": null,
  "banco": "237-2",
  "aceite": false,
  "especieDoDocumento": null,
  "especie": "R$",
  "instrucoes": [
    ""
  ],
  "locaisDePagamento": [
    "",
    ""
  ],
  "nomePagador": "Arwen Und칩miel",
  "documentoPagador": "08650745776",
  "logradouroPagador": "Travessa Oceano, 10",
  "bairroPagador": "Pinheiros",
  "cepPagador": "04472200",
  "cidadePagador": "Sao Paulo",
  "ufPagador": "SP",
  "codigoDeBarras": "23791000000000000003391090109000115000076640",
  "linhaDigitavel": "99999.99999 99999.999999 99999.999999 9 99999999999999",
  "id": 2990,
  "idConta": 15,
  "enderecoCobrancaBeneficiario": " ",
  "status": 3,
  "boletoRegistrado": false,
  "fontePagadora": "Respons치vel pelo pagamento: ROCICLEIA LEOPOLDINO / 999.999.984-02"
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>This service searches for a ticket by its identifier.</p>

     */
    it("should testMBoletosIdBoleto response", function testMBoletosIdBoletoTest(done) {
        // parameters for the API call
        let authorization = '{{tokenOauth}}';
        let accept = 'application/json';

        controller.getBoletosIdBoleto(authorization, accept, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = null;
            headers['Content-Length'] = null;
            headers['Connection'] = null;
            headers['Date'] = null;
            headers['x-amzn-RequestId'] = null;
            headers['Access-Control-Allow-Origin'] = null;
            headers['Access-Control-Allow-Headers'] = null;
            headers['x-amzn-Remapped-Connection'] = null;
            headers['x-amz-apigw-id'] = null;
            headers['x-amzn-Remapped-Server'] = null;
            headers['Access-Control-Allow-Methods'] = null;
            headers['x-amzn-Remapped-Date'] = null;
            headers['X-Application-Context'] = null;
            headers['Access-Control-Max-Age'] = null;
            headers['Access-Control-Allow-Credentials'] = null;
            headers['X-Cache'] = null;
            headers['Via'] = null;
            headers['X-Amz-Cf-Id'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.equal('{\n    "numeroDoDocumento": "50000041",\n    "dataProcessamento": "2019-02-18T22:53:00.232Z",\n    "dataDocumento": "2019-02-25T23:08:54.232Z",\n    "dataVencimento": "2019-11-08",\n    "dataFechamento": null,\n    "valorBoleto": 100,\n    "nomeBeneficiario": "",\n    "documentoBeneficiario": null,\n    "agencia": "3391",\n    "codigoBeneficiario": "1234",\n    "numeroConvenio": "1234567",\n    "digitoCodigoBeneficiario": "5",\n    "carteira": "9",\n    "nossoNumero": "000500000417",\n    "digitoNossoNumero": null,\n    "banco": "237-2",\n    "aceite": false,\n    "especieDoDocumento": null,\n    "especie": "R$",\n    "instrucoes": [\n        ""\n    ],\n    "locaisDePagamento": [\n        "",\n        ""\n    ],\n    "nomePagador": "Arwen Und칩miel",\n    "documentoPagador": "42875578839",\n    "logradouroPagador": "Travessa Oceano, 10",\n    "bairroPagador": "Pinheiros",\n    "cepPagador": "04472200",\n    "cidadePagador": "Sao Paulo",\n    "ufPagador": "SP",\n    "codigoDeBarras": "23796000000000000003391090005000004100012340",\n    "linhaDigitavel": "23793.39100  90005.000006  41000.123400  6  00000000000000",\n    "id": 1038,\n    "idConta": 10057584,\n    "enderecoCobrancaBeneficiario": " ",\n    "status": 1,\n    1 = Emitido / 2 = Enviado / 3 = Registrado / 4 = Pago / 5 = cancelado\n\n    "boletoRegistrado": false\n}', context.response.body);
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>This service searches for a ticket by its identifier.</p>

     */
    it("should testMBoletosIdBoletoPdf response", function testMBoletosIdBoletoPdfTest(done) {
        // parameters for the API call
        let authorization = '{{tokenOauth}}';
        let accept = 'application/json';

        controller.getBoletosIdBoletoPdf(authorization, accept, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        }).catch(() => undefined);
    });
});
