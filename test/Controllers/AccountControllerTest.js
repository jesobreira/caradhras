/**
 * BaaSCaradhrasAPIDocumentationLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const chai = require('chai');
const assert = chai.assert;
const TestHelper = require("../TestHelper");
const APIHelper = require("../../lib/APIHelper");
const testerlib = require("../../lib");
const testConfiguration = require("../TestBootstrap");
const baseController = require("../../lib/Controllers/BaseController");

const controller = testerlib.AccountController;
const MContasId = testerlib.MContasId;
const MContas = testerlib.MContas;
const MContasId1 = testerlib.MContasId1;
const MContasIdAccountsAdicionais = testerlib.MContasIdAccountsAdicionais;
const MContasIdAccountAdicionais = testerlib.MContasIdAccountAdicionais;
const MContasIdAdicionaisIdPessoa = testerlib.MContasIdAdicionaisIdPessoa;
const MContasIdAdicionaisIdPessoaRequest = testerlib.MContasIdAdicionaisIdPessoaRequest;
const MContasIdPessoasIdPessoaPortadoresRequest = testerlib.MContasIdPessoasIdPessoaPortadoresRequest;
const MContasIdBloquear = testerlib.MContasIdBloquear;
const MContasIdAccountAlterarProdutoRequest = testerlib.MContasIdAccountAlterarProdutoRequest;
const MContasIdTimeline = testerlib.MContasIdTimeline;
const MContasIdTransacoes = testerlib.MContasIdTransacoes;

describe("AccountController Tests", function tests() {
    this.timeout(testConfiguration.TEST_TIMEOUT);

    /**
     * <p>Creates an account in the database of the Issuer.</p>
<blockquote>
<p>Check the documentation <a href="https://s3-sa-east-1.amazonaws.com/baas-docs.caradhras.io/Fields_Register_Client.pdf">here</a> for addicional information about <code>identification fields</code>.</p>
</blockquote>
<blockquote>
<p>Check the FAQs below:</p>
<ul>
<li><a href="https://baas-cdt.zendesk.com/hc/pt-br/articles/360027496192">Why all accounts should have membership card?</a></li>
</ul>
</blockquote>

     */
    it("should testMContas response", function testMContasTest(done) {
        // parameters for the API call
        let authorization = '{{tokenOauth}}';
        let contentType = 'application/json';
        let body = '{\r\n  "idPessoa": 9897984, \r\n  Required - Person´s ID\r\n  "idOrigemComercial": 1, \r\n  Indicates the origin of the client´s register. \r\n  Required for the platform. This number shoud be consulted with your project leader".\r\n  "idProduto": 1, \r\n  Required - It is the products defined on the setup process\r\n  "diaVencimento": 10, \r\n  Required - Invoice Due Date. If the product is a pre-paid card, use `default value = 10`.\r\n  "valorRenda": 0, \r\n  Required - Amount of the account holder’s income\r\n  "valorPontuacao": 0, \r\n  Required - Account Scoring Value\r\n  "idEnderecoCorrespondencia": 1197\r\n  Required - Overall account limit\r\n\r\n}';

        controller.createContas(authorization, contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = null;
            headers['Content-Length'] = null;
            headers['Connection'] = null;
            headers['Date'] = null;
            headers['x-amzn-RequestId'] = null;
            headers['Access-Control-Allow-Origin'] = null;
            headers['Access-Control-Allow-Headers'] = null;
            headers['x-amzn-Remapped-Connection'] = null;
            headers['x-amz-apigw-id'] = null;
            headers['x-amzn-Remapped-Server'] = null;
            headers['Access-Control-Allow-Methods'] = null;
            headers['x-amzn-Remapped-Date'] = null;
            headers['X-Application-Context'] = null;
            headers['Access-Control-Max-Age'] = null;
            headers['Access-Control-Allow-Credentials'] = null;
            headers['X-Cache'] = null;
            headers['Via'] = null;
            headers['X-Amz-Cf-Id'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "id": 10057672,
  "idProduto": 1,
  "idOrigemComercial": 1,
  "idPessoa": 9897984,
  "idStatusConta": 0,
  "diaVencimento": 1,
  "melhorDiaCompra": 21,
  "dataStatusConta": "2019-03-01T19: 40: 31.251Z",
  "dataCadastro": "2019-03-01T19: 40: 31.251Z",
  "dataUltimaAlteracaoVencimento": null,
  "valorRenda": 0,
  "idProposta": 1212,
  "funcaoAtiva": null
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>This resource allows to list existent accounts in the database of the Issuer.</p>
<blockquote>
<p>Check the FAQs below:</p>
<ul>
<li><a href="https://baas-cdt.zendesk.com/hc/pt-br/articles/360029847012-Para-que-servem-as-contas-de-1-a-10-">What the accounts from 1 to 10 are for?</a></li>
</ul>
</blockquote>
<p>Filters allowed to this method: </p>
<ul>
<li>page</li>
<li>Limits (Limit of elements per request: Default = 50, Max = 50)</li>
<li>idPessoa (Identification Code of the Personal holder of the Account (id))</li>
<li>idProduto (Identification Code of the product which the account takes part (id).)</li>
<li>idStatusConta (Identification Code of the Account Status)</li>
<li>dataCadastro (List the date that the card was created)</li>
</ul>

     */
    it("should testMContas1 response", function testMContas1Test(done) {
        // parameters for the API call
        let authorization = '{{tokenOauth}}';

        controller.getContas(authorization, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = null;
            headers['Content-Length'] = null;
            headers['Connection'] = null;
            headers['Date'] = null;
            headers['x-amzn-RequestId'] = null;
            headers['Access-Control-Allow-Origin'] = null;
            headers['Access-Control-Allow-Headers'] = null;
            headers['x-amzn-Remapped-Connection'] = null;
            headers['x-amz-apigw-id'] = null;
            headers['x-amzn-Remapped-Server'] = null;
            headers['Access-Control-Allow-Methods'] = null;
            headers['X-Amzn-Trace-Id'] = null;
            headers['x-amzn-Remapped-Date'] = null;
            headers['X-Application-Context'] = null;
            headers['Access-Control-Max-Age'] = null;
            headers['Access-Control-Allow-Credentials'] = null;
            headers['X-Cache'] = null;
            headers['Via'] = null;
            headers['X-Amz-Cf-Pop'] = null;
            headers['X-Amz-Cf-Id'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {"number": 0, "size": 50, "totalPages": 61, "numberOfElements": 50, "totalElements": 3027, "firstPage": false, "hasPreviousPage": false, "hasNextPage": true, "hasContent": true, "first": true, "last": false, "nextPage": 1, "previousPage": 0, "content": [{"id": 1, "idProduto": 0, "idOrigemComercial": 0, "idPessoa": 1, "idStatusConta": 1, "diaVencimento": 1, "melhorDiaCompra": 21, "dataStatusConta": "\"2019-02-11T09: 54: 00Z\"", "dataCadastro": "\"2018-11-09T16: 25: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "null", "idProposta": 0, "funcaoAtiva": "null"}, {"id": 2, "idProduto": 0, "idOrigemComercial": 0, "idPessoa": 2, "idStatusConta": 0, "diaVencimento": 1, "melhorDiaCompra": 21, "dataStatusConta": "\"2018-11-09T16: 26: 00Z\"", "dataCadastro": "\"2018-11-09T16: 26: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "null", "idProposta": 0, "funcaoAtiva": "null"}, {"id": 3, "idProduto": 0, "idOrigemComercial": 0, "idPessoa": 3, "idStatusConta": 0, "diaVencimento": 1, "melhorDiaCompra": 21, "dataStatusConta": "\"2018-11-09T16: 26: 00Z\"", "dataCadastro": "\"2018-11-09T16: 26: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "null", "idProposta": 0, "funcaoAtiva": "null"}, {"id": 4, "idProduto": 1, "idOrigemComercial": 1, "idPessoa": 5, "idStatusConta": 0, "diaVencimento": 1, "melhorDiaCompra": 21, "dataStatusConta": "\"2018-11-09T16: 26: 00Z\"", "dataCadastro": "\"2018-11-09T16: 26: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "null", "idProposta": 0, "funcaoAtiva": "null"}, {"id": 5, "idProduto": 1, "idOrigemComercial": 1, "idPessoa": 6, "idStatusConta": 33, "diaVencimento": 1, "melhorDiaCompra": 21, "dataStatusConta": "\"2019-04-22T18: 47: 00Z\"", "dataCadastro": "\"2018-11-09T16: 26: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "null", "idProposta": 0, "funcaoAtiva": "null"}, {"id": 6, "idProduto": 1, "idOrigemComercial": 1, "idPessoa": 4, "idStatusConta": 0, "diaVencimento": 1, "melhorDiaCompra": 21, "dataStatusConta": "\"2018-11-09T16: 26: 00Z\"", "dataCadastro": "\"2018-11-09T16: 26: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "null", "idProposta": 0, "funcaoAtiva": "null"}, {"id": 7, "idProduto": 1, "idOrigemComercial": 1, "idPessoa": 8, "idStatusConta": 0, "diaVencimento": 1, "melhorDiaCompra": 21, "dataStatusConta": "\"2018-11-09T16: 26: 00Z\"", "dataCadastro": "\"2018-11-09T16: 26: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "null", "idProposta": 0, "funcaoAtiva": "null"}, {"id": 8, "idProduto": 1, "idOrigemComercial": 1, "idPessoa": 9, "idStatusConta": 0, "diaVencimento": 1, "melhorDiaCompra": 21, "dataStatusConta": "\"2018-11-09T16: 27: 00Z\"", "dataCadastro": "\"2018-11-09T16: 27: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "null", "idProposta": 0, "funcaoAtiva": "null"}, {"id": 9, "idProduto": 1, "idOrigemComercial": 1, "idPessoa": 10, "idStatusConta": 0, "diaVencimento": 1, "melhorDiaCompra": 21, "dataStatusConta": "\"2018-11-09T16: 27: 00Z\"", "dataCadastro": "\"2018-11-09T16: 27: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "null", "idProposta": 0, "funcaoAtiva": "null"}, {"id": 10, "idProduto": 1, "idOrigemComercial": 1, "idPessoa": 11, "idStatusConta": 0, "diaVencimento": 1, "melhorDiaCompra": 21, "dataStatusConta": "\"2019-03-20T10: 39: 00Z\"", "dataCadastro": "\"2018-11-09T16: 27: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "null", "idProposta": 0, "funcaoAtiva": "null"}, {"id": 11, "idProduto": 1, "idOrigemComercial": 1, "idPessoa": 20, "idStatusConta": 0, "diaVencimento": 10, "melhorDiaCompra": 1, "dataStatusConta": "\"2019-02-11T09: 59: 00Z\"", "dataCadastro": "\"2018-11-16T17: 39: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "0", "idProposta": 9, "funcaoAtiva": "null"}, {"id": 12, "idProduto": 1, "idOrigemComercial": 1, "idPessoa": 21, "idStatusConta": 0, "diaVencimento": 1, "melhorDiaCompra": 21, "dataStatusConta": "\"2018-11-16T17: 42: 00Z\"", "dataCadastro": "\"2018-11-16T17: 42: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "1", "idProposta": 10, "funcaoAtiva": "null"}, {"id": 13, "idProduto": 1, "idOrigemComercial": 1, "idPessoa": 23, "idStatusConta": 0, "diaVencimento": 1, "melhorDiaCompra": 21, "dataStatusConta": "\"2018-11-19T20: 59: 00Z\"", "dataCadastro": "\"2018-11-19T20: 59: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "1", "idProposta": 11, "funcaoAtiva": "null"}, {"id": 14, "idProduto": 1, "idOrigemComercial": 1, "idPessoa": 25, "idStatusConta": 0, "diaVencimento": 1, "melhorDiaCompra": 21, "dataStatusConta": "\"2018-11-19T21: 16: 00Z\"", "dataCadastro": "\"2018-11-19T21: 16: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "0", "idProposta": 12, "funcaoAtiva": "null"}, {"id": 15, "idProduto": 1, "idOrigemComercial": 1, "idPessoa": 26, "idStatusConta": 0, "diaVencimento": 10, "melhorDiaCompra": 1, "dataStatusConta": "\"2018-11-21T10: 47: 00Z\"", "dataCadastro": "\"2018-11-21T10: 47: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "0", "idProposta": 13, "funcaoAtiva": "null"}, {"id": 16, "idProduto": 1, "idOrigemComercial": 1, "idPessoa": 27, "idStatusConta": 0, "diaVencimento": 10, "melhorDiaCompra": 1, "dataStatusConta": "\"2018-11-22T10: 53: 00Z\"", "dataCadastro": "\"2018-11-22T10: 53: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "0", "idProposta": 14, "funcaoAtiva": "null"}, {"id": 17, "idProduto": 1, "idOrigemComercial": 1, "idPessoa": 27, "idStatusConta": 0, "diaVencimento": 1, "melhorDiaCompra": 21, "dataStatusConta": "\"2018-11-22T11: 09: 00Z\"", "dataCadastro": "\"2018-11-22T11: 09: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "0", "idProposta": 15, "funcaoAtiva": "null"}, {"id": 18, "idProduto": 1, "idOrigemComercial": 1, "idPessoa": 28, "idStatusConta": 0, "diaVencimento": 10, "melhorDiaCompra": 1, "dataStatusConta": "\"2018-11-29T11: 46: 00Z\"", "dataCadastro": "\"2018-11-29T11: 46: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "0", "idProposta": 16, "funcaoAtiva": "null"}, {"id": 19, "idProduto": 1, "idOrigemComercial": 1, "idPessoa": 29, "idStatusConta": 0, "diaVencimento": 10, "melhorDiaCompra": 1, "dataStatusConta": "\"2018-11-29T14: 47: 00Z\"", "dataCadastro": "\"2018-11-29T14: 47: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "0", "idProposta": 17, "funcaoAtiva": "null"}, {"id": 20, "idProduto": 1, "idOrigemComercial": 1, "idPessoa": 30, "idStatusConta": 0, "diaVencimento": 10, "melhorDiaCompra": 1, "dataStatusConta": "\"2018-11-30T11: 35: 00Z\"", "dataCadastro": "\"2018-11-30T11: 35: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "0", "idProposta": 18, "funcaoAtiva": "null"}, {"id": 21, "idProduto": 1, "idOrigemComercial": 1, "idPessoa": 31, "idStatusConta": 0, "diaVencimento": 10, "melhorDiaCompra": 1, "dataStatusConta": "\"2018-11-30T11: 36: 00Z\"", "dataCadastro": "\"2018-11-30T11: 36: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "0", "idProposta": 19, "funcaoAtiva": "null"}, {"id": 22, "idProduto": 1, "idOrigemComercial": 1, "idPessoa": 32, "idStatusConta": 0, "diaVencimento": 10, "melhorDiaCompra": 1, "dataStatusConta": "\"2018-11-30T15: 14: 00Z\"", "dataCadastro": "\"2018-11-30T15: 14: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "0", "idProposta": 20, "funcaoAtiva": "null"}, {"id": 23, "idProduto": 1, "idOrigemComercial": 1, "idPessoa": 33, "idStatusConta": 0, "diaVencimento": 10, "melhorDiaCompra": 1, "dataStatusConta": "\"2018-12-03T13: 44: 00Z\"", "dataCadastro": "\"2018-12-03T13: 44: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "0", "idProposta": 21, "funcaoAtiva": "null"}, {"id": 24, "idProduto": 1, "idOrigemComercial": 1, "idPessoa": 34, "idStatusConta": 0, "diaVencimento": 10, "melhorDiaCompra": 1, "dataStatusConta": "\"2018-12-03T14: 32: 00Z\"", "dataCadastro": "\"2018-12-03T14: 32: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "0", "idProposta": 22, "funcaoAtiva": "null"}, {"id": 25, "idProduto": 1, "idOrigemComercial": 1, "idPessoa": 35, "idStatusConta": 0, "diaVencimento": 10, "melhorDiaCompra": 1, "dataStatusConta": "\"2018-12-07T10: 49: 00Z\"", "dataCadastro": "\"2018-12-07T10: 49: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "0", "idProposta": 23, "funcaoAtiva": "null"}, {"id": 26, "idProduto": 1, "idOrigemComercial": 1, "idPessoa": 37, "idStatusConta": 0, "diaVencimento": 10, "melhorDiaCompra": 1, "dataStatusConta": "\"2018-12-17T17: 13: 00Z\"", "dataCadastro": "\"2018-12-17T17: 13: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "0", "idProposta": 25, "funcaoAtiva": "null"}, {"id": 27, "idProduto": 1, "idOrigemComercial": 1, "idPessoa": 38, "idStatusConta": 0, "diaVencimento": 10, "melhorDiaCompra": 1, "dataStatusConta": "\"2018-12-17T17: 14: 00Z\"", "dataCadastro": "\"2018-12-17T17: 14: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "0", "idProposta": 26, "funcaoAtiva": "null"}, {"id": 28, "idProduto": 1, "idOrigemComercial": 1, "idPessoa": 39, "idStatusConta": 0, "diaVencimento": 10, "melhorDiaCompra": 1, "dataStatusConta": "\"2018-12-17T17: 15: 00Z\"", "dataCadastro": "\"2018-12-17T17: 15: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "0", "idProposta": 27, "funcaoAtiva": "null"}, {"id": 29, "idProduto": 1, "idOrigemComercial": 1, "idPessoa": 40, "idStatusConta": 0, "diaVencimento": 10, "melhorDiaCompra": 1, "dataStatusConta": "\"2018-12-17T17: 18: 00Z\"", "dataCadastro": "\"2018-12-17T17: 18: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "0", "idProposta": 28, "funcaoAtiva": "null"}, {"id": 30, "idProduto": 1, "idOrigemComercial": 1, "idPessoa": 41, "idStatusConta": 0, "diaVencimento": 10, "melhorDiaCompra": 1, "dataStatusConta": "\"2018-12-17T17: 19: 00Z\"", "dataCadastro": "\"2018-12-17T17: 19: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "0", "idProposta": 29, "funcaoAtiva": "null"}, {"id": 31, "idProduto": 1, "idOrigemComercial": 1, "idPessoa": 42, "idStatusConta": 0, "diaVencimento": 10, "melhorDiaCompra": 1, "dataStatusConta": "\"2018-12-17T17: 21: 00Z\"", "dataCadastro": "\"2018-12-17T17: 21: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "0", "idProposta": 30, "funcaoAtiva": "null"}, {"id": 32, "idProduto": 1, "idOrigemComercial": 1, "idPessoa": 37, "idStatusConta": 0, "diaVencimento": 1, "melhorDiaCompra": 21, "dataStatusConta": "\"2018-12-18T17: 34: 00Z\"", "dataCadastro": "\"2018-12-18T17: 34: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "0", "idProposta": 31, "funcaoAtiva": "null"}, {"id": 1985, "idProduto": 1, "idOrigemComercial": 1, "idPessoa": 2208, "idStatusConta": 3, "diaVencimento": 5, "melhorDiaCompra": 26, "dataStatusConta": "\"2018-10-14T01: 37: 00Z\"", "dataCadastro": "\"2006-10-25T09: 42: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "0", "idProposta": 1885, "funcaoAtiva": "null"}, {"id": 2450, "idProduto": 1, "idOrigemComercial": 1, "idPessoa": 2758, "idStatusConta": 3, "diaVencimento": 5, "melhorDiaCompra": 26, "dataStatusConta": "\"2018-10-14T01: 37: 00Z\"", "dataCadastro": "\"2006-11-24T10: 28: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "0", "idProposta": 2350, "funcaoAtiva": "null"}, {"id": 2463, "idProduto": 1, "idOrigemComercial": 1, "idPessoa": 2775, "idStatusConta": 3, "diaVencimento": 5, "melhorDiaCompra": 26, "dataStatusConta": "\"2018-10-14T01: 37: 00Z\"", "dataCadastro": "\"2006-11-16T15: 22: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "0", "idProposta": 2363, "funcaoAtiva": "null"}, {"id": 10053533, "idProduto": 1, "idOrigemComercial": 1, "idPessoa": 724138, "idStatusConta": 0, "diaVencimento": 1, "melhorDiaCompra": 21, "dataStatusConta": "\"2018-10-04T16: 58: 00Z\"", "dataCadastro": "\"2018-10-04T16: 58: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "1500", "idProposta": 12813665, "funcaoAtiva": "null"}, {"id": 10056090, "idProduto": 1, "idOrigemComercial": 1, "idPessoa": 9896392, "idStatusConta": 0, "diaVencimento": 1, "melhorDiaCompra": 21, "dataStatusConta": "\"2018-11-27T15: 34: 00Z\"", "dataCadastro": "\"2018-11-27T15: 33: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "2000", "idProposta": 12816345, "funcaoAtiva": "null"}, {"id": 10056096, "idProduto": 1, "idOrigemComercial": 1, "idPessoa": 9896397, "idStatusConta": 0, "diaVencimento": 1, "melhorDiaCompra": 21, "dataStatusConta": "\"2018-11-27T16: 46: 00Z\"", "dataCadastro": "\"2018-11-27T16: 45: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "2000", "idProposta": 12816352, "funcaoAtiva": "null"}, {"id": 10056098, "idProduto": 1, "idOrigemComercial": 1, "idPessoa": 9896400, "idStatusConta": 0, "diaVencimento": 1, "melhorDiaCompra": 21, "dataStatusConta": "\"2018-11-27T18: 01: 00Z\"", "dataCadastro": "\"2018-11-27T18: 01: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "2500", "idProposta": 12816354, "funcaoAtiva": "null"}, {"id": 10056380, "idProduto": 1, "idOrigemComercial": 1, "idPessoa": 9896703, "idStatusConta": 0, "diaVencimento": 1, "melhorDiaCompra": 21, "dataStatusConta": "\"2018-12-11T11: 44: 00Z\"", "dataCadastro": "\"2018-12-11T11: 44: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "999.99", "idProposta": 12816672, "funcaoAtiva": "null"}, {"id": 10056396, "idProduto": 1, "idOrigemComercial": 1, "idPessoa": 9896720, "idStatusConta": 0, "diaVencimento": 1, "melhorDiaCompra": 21, "dataStatusConta": "\"2018-12-11T17: 24: 00Z\"", "dataCadastro": "\"2018-12-11T17: 24: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "2500", "idProposta": 12816688, "funcaoAtiva": "null"}, {"id": 10056460, "idProduto": 1, "idOrigemComercial": 1, "idPessoa": 9896866, "idStatusConta": 0, "diaVencimento": 1, "melhorDiaCompra": 21, "dataStatusConta": "\"2018-12-19T14: 59: 00Z\"", "dataCadastro": "\"2018-12-19T14: 59: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "2500", "idProposta": 12816836, "funcaoAtiva": "null"}, {"id": 10056461, "idProduto": 1, "idOrigemComercial": 1, "idPessoa": 3903748, "idStatusConta": 0, "diaVencimento": 1, "melhorDiaCompra": 21, "dataStatusConta": "\"2018-12-19T15: 05: 00Z\"", "dataCadastro": "\"2018-12-19T15: 05: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "2500", "idProposta": 12816838, "funcaoAtiva": "null"}, {"id": 10056470, "idProduto": 1, "idOrigemComercial": 1, "idPessoa": 9896885, "idStatusConta": 0, "diaVencimento": 1, "melhorDiaCompra": 21, "dataStatusConta": "\"2018-12-19T15: 09: 00Z\"", "dataCadastro": "\"2018-12-19T15: 09: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "1000", "idProposta": 12816847, "funcaoAtiva": "null"}, {"id": 10056471, "idProduto": 1, "idOrigemComercial": 1, "idPessoa": 9896886, "idStatusConta": 0, "diaVencimento": 1, "melhorDiaCompra": 21, "dataStatusConta": "\"2018-12-19T15: 12: 00Z\"", "dataCadastro": "\"2018-12-19T15: 12: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "2500", "idProposta": 12816848, "funcaoAtiva": "null"}, {"id": 10056472, "idProduto": 1, "idOrigemComercial": 1, "idPessoa": 9896887, "idStatusConta": 0, "diaVencimento": 10, "melhorDiaCompra": 1, "dataStatusConta": "\"2018-12-20T10: 39: 00Z\"", "dataCadastro": "\"2018-12-20T10: 39: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "0", "idProposta": 32, "funcaoAtiva": "null"}, {"id": 10056473, "idProduto": 1, "idOrigemComercial": 1, "idPessoa": 9896888, "idStatusConta": 0, "diaVencimento": 10, "melhorDiaCompra": 1, "dataStatusConta": "\"2018-12-20T10: 39: 00Z\"", "dataCadastro": "\"2018-12-20T10: 39: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "0", "idProposta": 33, "funcaoAtiva": "null"}, {"id": 10056493, "idProduto": 1, "idOrigemComercial": 1, "idPessoa": 806, "idStatusConta": 0, "diaVencimento": 1, "melhorDiaCompra": 21, "dataStatusConta": "\"2018-12-20T11: 43: 00Z\"", "dataCadastro": "\"2018-12-20T11: 43: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "2500", "idProposta": 12816870, "funcaoAtiva": "null"}, {"id": 10056495, "idProduto": 1, "idOrigemComercial": 1, "idPessoa": 2208, "idStatusConta": 0, "diaVencimento": 1, "melhorDiaCompra": 21, "dataStatusConta": "\"2018-12-20T14: 53: 00Z\"", "dataCadastro": "\"2018-12-20T14: 53: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "2500", "idProposta": 12816872, "funcaoAtiva": "null"}, {"id": 10056496, "idProduto": 1, "idOrigemComercial": 1, "idPessoa": 39, "idStatusConta": 0, "diaVencimento": 1, "melhorDiaCompra": 21, "dataStatusConta": "\"2018-12-20T15: 02: 00Z\"", "dataCadastro": "\"2018-12-20T15: 02: 00Z\"", "dataUltimaAlteracaoVencimento": "null", "valorRenda": "0", "idProposta": 34, "funcaoAtiva": "null"}]}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>This method allows to retrieve dates of a determined account using the identification code (id).</p>
<blockquote>
<p>Check the FAQs below:</p>
<ul>
<li><a href="https://baas-cdt.zendesk.com/hc/pt-br/articles/360029847012-Para-que-servem-as-contas-de-1-a-10-">What the accounts from 1 to 10 are for?</a></li>
</ul>
</blockquote>

     */
    it("should testMContasIdAccount response", function testMContasIdAccountTest(done) {
        // parameters for the API call
        let authorization = '{{tokenOauth}}';

        controller.getContasIdAccount(authorization, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = null;
            headers['Content-Length'] = null;
            headers['Connection'] = null;
            headers['Date'] = null;
            headers['x-amzn-RequestId'] = null;
            headers['Access-Control-Allow-Origin'] = null;
            headers['Access-Control-Allow-Headers'] = null;
            headers['x-amzn-Remapped-Connection'] = null;
            headers['x-amz-apigw-id'] = null;
            headers['x-amzn-Remapped-Server'] = null;
            headers['Access-Control-Allow-Methods'] = null;
            headers['x-amzn-Remapped-Date'] = null;
            headers['X-Application-Context'] = null;
            headers['Access-Control-Max-Age'] = null;
            headers['Access-Control-Allow-Credentials'] = null;
            headers['X-Cache'] = null;
            headers['Via'] = null;
            headers['X-Amz-Cf-Id'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "id": 10057584,
  "idPessoa": 9897984,
  "nome": "Arwen Undómiel",
  "idProduto": 1,
  "idOrigemComercial": 1,
  "nomeOrigemComercial": "SandBox",
  "idFantasiaBasica": 1,
  "nomeFantasiaBasica": "SandBox",
  "idStatusConta": 0,
  "statusConta": "Normal",
  "diaVencimento": 10,
  "melhorDiaCompra": 1,
  "dataStatusConta": "2019-02-17T22: 55: 00Z",
  "dataCadastro": "2019-02-17T22: 55: 00Z",
  "dataUltimaAlteracaoVencimento": null,
  "dataHoraUltimaCompra": null,
  "numeroAgencia": 0,
  "numeroContaCorrente": "",
  "valorRenda": 0,
  "formaEnvioFatura": "CORRESPONDÊNCIA",
  "titular": true,
  "limiteGlobal": 0,
  "limiteSaqueGlobal": 0,
  "saldoDisponivelGlobal": 4873.94,
  "saldoDisponivelSaque": 0,
  "impedidoFinanciamento": false,
  "diasAtraso": 0,
  "proximoVencimentoPadrao": "01/01/2079",
  "idProposta": 1124,
  "quantidadePagamentos": 0,
  "correspondencia": 1,
  "dataInicioAtraso": null,
  "rotativoPagaJuros": 0,
  "totalPosProx": 0,
  "saldoAtualFinal": 0,
  "saldoExtratoAnterior": 0,
  "aceitaNovaContaPorGrupoProduto": null,
  "funcaoAtiva": null
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>This method allows to retrieve the additional persons to a specific account.</p>

     */
    it("should testMContasIdAccountAdicionais response", function testMContasIdAccountAdicionaisTest(done) {
        // parameters for the API call
        let authorization = '{{tokenOauth}}';

        controller.getContasIdAccountAdicionais(authorization, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "idConta": 123,
  "idPessoa": 1,
  "nome": "Teste Adicional",
  "nomeImpresso": "Teste Adicional",
  "numeroReceitaFederal": "123456779",
  "dataNascimento": "1998-10-11T00: 00: 00.000+0000'",
  "sexo": "M",
  "numeroIdentidade": "123445678",
  "orgaoExpedidorIdentidade": "SSP",
  "unidadeFederativaIdentidade": "SP",
  "dataEmissaoIdentidade": "2000-01-23T00: 00: 00+00: 00",
  "idParentesco": 0,
  "idEstadoCivil": 0,
  "flagAtivo": 1,
  "dataCadastroPortador": "2019-08-05T00: 00: 00+00: 00",
  "dataCancelamentoPortador": "yyyy-MM-dd'T'HH: mm: ss.SSS'Z'"
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>This method allows to be updated an additional carrier of a determined account.</p>

     */
    it("should testMContasIdPessoasIdPessoaPortadores response", function testMContasIdPessoasIdPessoaPortadoresTest(done) {
        // parameters for the API call
        let authorization = '{{tokenOauth}}';
        let contentType = 'application/json';
        let body = baseController.getObjectMapper().mapObject({
  "nomeImpresso": "Frodo From Dock"
}, 'MContasIdPessoasIdPessoaPortadoresRequest');

        controller.updateContasIdPessoasIdPessoaPortadores(authorization, contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>This method allows tobe inactived an additional carrier of a determined account.</p>

     */
    it("should testMContasIdAdicionaisIdPessoaInativar response", function testMContasIdAdicionaisIdPessoaInativarTest(done) {
        // parameters for the API call
        let authorization = '{{tokenOauth}}';

        controller.createContasIdAdicionaisIdPessoaInativar(authorization, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>This method allows to block a determined account using de id account code (id).</p>
<blockquote>
<p>Check the FAQ below:</p>
<ul>
<li><a href="https://baas-cdt.zendesk.com/hc/pt-br/articles/360028356611-Status-Cart%C3%A3o">Status - Card</a></li>
</ul>
</blockquote>
<p> "id_status" : </p>

<table>
    <tr>
      <th>id_status</th>
      <th>description</th>
    </tr>
    <tr>
      <td>0</td>
      <td>Normal</td>
       </tr>
    <tr>
      <td>1</td>
      <td>Blocked</td>
    </tr>
    <tr>
      <td>2</td>
      <td>Canceled</td>
    </tr>
</table>
     */
    it("should testMContasIdAccountBloquear response", function testMContasIdAccountBloquearTest(done) {
        // parameters for the API call
        let idStatus = 'Integer  - Required';
        let authorization = '{{tokenOauth}}';

        controller.createContasIdAccountBloquear(idStatus, authorization, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = null;
            headers['Content-Length'] = null;
            headers['Connection'] = null;
            headers['Date'] = null;
            headers['x-amzn-RequestId'] = null;
            headers['Access-Control-Allow-Origin'] = null;
            headers['Access-Control-Allow-Headers'] = null;
            headers['x-amzn-Remapped-Connection'] = null;
            headers['x-amz-apigw-id'] = null;
            headers['x-amzn-Remapped-Server'] = null;
            headers['Access-Control-Allow-Methods'] = null;
            headers['x-amzn-Remapped-Date'] = null;
            headers['X-Application-Context'] = null;
            headers['Access-Control-Max-Age'] = null;
            headers['Access-Control-Allow-Credentials'] = null;
            headers['X-Cache'] = null;
            headers['Via'] = null;
            headers['X-Amz-Cf-Id'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "id": 10057672,
  "idProduto": 1,
  "idOrigemComercial": 1,
  "idPessoa": 9897984,
  "idStatusConta": 1,
  "diaVencimento": 1,
  "melhorDiaCompra": 21,
  "dataStatusConta": "2019-03-01T19: 43: 17.778Z",
  "dataCadastro": "2019-03-01T19: 41: 00Z",
  "dataUltimaAlteracaoVencimento": null,
  "valorRenda": 0,
  "idProposta": 1212,
  "funcaoAtiva": null
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>This method allows to cancel a specific account using de id account code (id).</p>
<blockquote>
<p>Check the FAQ below:</p>
<ul>
<li><a href="https://baas-cdt.zendesk.com/hc/pt-br/articles/360028356611-Status-Cart%C3%A3o">Status - Card</a></li>
</ul>
</blockquote>
<p> Possible "id_status" return : </p>



<p></p>



<table>
    <tr>
      <th>id_status</th>
      <th>description</th>
    </tr>
    <tr>
      <td>0</td>
      <td>Normal</td>
       </tr>
    <tr>
      <td>1</td>
      <td>Blocked</td>
    </tr>
    <tr>
      <td>2</td>
      <td>Canceled</td>
    </tr>
</table>
     */
    it("should testMContasIdAccountCancelar response", function testMContasIdAccountCancelarTest(done) {
        // parameters for the API call
        let idStatus = 'Integer  - Required';
        let authorization = '{{tokenOauth}}';

        controller.createContasIdAccountCancelar(idStatus, authorization, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = null;
            headers['Content-Length'] = null;
            headers['Connection'] = null;
            headers['Date'] = null;
            headers['x-amzn-RequestId'] = null;
            headers['Access-Control-Allow-Origin'] = null;
            headers['Access-Control-Allow-Headers'] = null;
            headers['x-amzn-Remapped-Connection'] = null;
            headers['x-amz-apigw-id'] = null;
            headers['x-amzn-Remapped-Server'] = null;
            headers['Access-Control-Allow-Methods'] = null;
            headers['x-amzn-Remapped-Date'] = null;
            headers['X-Application-Context'] = null;
            headers['Access-Control-Max-Age'] = null;
            headers['Access-Control-Allow-Credentials'] = null;
            headers['X-Cache'] = null;
            headers['Via'] = null;
            headers['X-Amz-Cf-Id'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "id": 10057672,
  "idProduto": 1,
  "idOrigemComercial": 1,
  "idPessoa": 9897984,
  "idStatusConta": 1,
  "diaVencimento": 1,
  "melhorDiaCompra": 21,
  "dataStatusConta": "2019-03-01T19: 43: 17.778Z",
  "dataCadastro": "2019-03-01T19: 41: 00Z",
  "dataUltimaAlteracaoVencimento": null,
  "valorRenda": 0,
  "idProposta": 1212,
  "funcaoAtiva": null
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>This resource allows to reactivate the accounts. For this, It’s necessary to inform the idcode of the account (id).</p>

     */
    it("should testMContasIdAccountReativar response", function testMContasIdAccountReativarTest(done) {
        // parameters for the API call
        let authorization = '{{tokenOauth}}';

        controller.createContasIdAccountReativar(authorization, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>This method allows to change the product of a specific account.</p>
<blockquote>
<p>Check the FAQs below:</p>
<ul>
<li><a href="https://baas-cdt.zendesk.com/hc/pt-br/articles/360031336671">How to change the idCommercialOrigin?</a></li>
</ul>
</blockquote>

     */
    it("should testMContasIdAccountAlterarProduto response", function testMContasIdAccountAlterarProdutoTest(done) {
        // parameters for the API call
        let authorization = '{{tokenOauth}}';
        let contentType = 'application/json';
        let body = baseController.getObjectMapper().mapObject({
  "idProduto": 0,
  "idOrigemComercial": 0,
  "idEstabelecimento": 0,
  "idPromotor": 0
}, 'MContasIdAccountAlterarProdutoRequest');

        controller.createContasIdAccountAlterarProduto(authorization, contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>This operation has as an aim to allow a listing, in a timeline mode, of the events linked to a determined account. Transactions, invoice closing, payments, create cards and update the limit are exemples of the events contemplated for this funcionality. In this method, the operations are ordered in descending form.</p>
<blockquote>
<p>Check the FAQ below:</p>
<ul>
<li><a href="https://baas-cdt.zendesk.com/hc/pt-br/articles/360030823631">How to identify a paid Recharge Bank Slip?</a></li>
</ul>
</blockquote>

     */
    it("should testMContasIdAccountTimeline response", function testMContasIdAccountTimelineTest(done) {
        // parameters for the API call
        let sort = 'Array [string] (optional) ';
        let page = 'Integer(optional) ';
        let limit = 'Integer(optional)';
        let authorization = '{{tokenOauth}}';

        controller.getContasIdAccountTimeline(sort, page, limit, authorization, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = null;
            headers['Content-Length'] = null;
            headers['Connection'] = null;
            headers['Date'] = null;
            headers['x-amzn-RequestId'] = null;
            headers['Access-Control-Allow-Origin'] = null;
            headers['Access-Control-Allow-Headers'] = null;
            headers['x-amzn-Remapped-Connection'] = null;
            headers['x-amz-apigw-id'] = null;
            headers['x-amzn-Remapped-Server'] = null;
            headers['Access-Control-Allow-Methods'] = null;
            headers['x-amzn-Remapped-Date'] = null;
            headers['X-Application-Context'] = null;
            headers['Access-Control-Max-Age'] = null;
            headers['Access-Control-Allow-Credentials'] = null;
            headers['X-Cache'] = null;
            headers['Via'] = null;
            headers['X-Amz-Cf-Id'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {"number": 0, "size": 50, "totalPages": 1, "numberOfElements": 16, "totalElements": 16, "firstPage": false, "hasPreviousPage": false, "hasNextPage": false, "hasContent": true, "first": true, "last": true, "nextPage": 0, "previousPage": 0, "content": [{"idConta": 10057584, "idTipoRegistro": 10057584, "ordem": -99, "idTransacao": "null", "descricao": "limite disponível", "status": "null", "descricaoStatus": "null", "valor": 4873.94, "valorDolar": "null", "quantidadeParcelas": "null", "valorParcela": "null", "dataEvento": "\"2019-02-27T20: 32: 20.767Z\"", "estabelecimento": "null", "flagCredito": "null", "tipoEstabelecimento": "null", "idGrupoMCC": "null", "flagSolicitouContestacao": "null", "tipoTransacao": "null", "idEventoAjuste": "null", "ultimaParcelaLancada": "null"}, {"idConta": 10057584, "idTipoRegistro": 7, "ordem": 30, "idTransacao": "null", "descricao": "Transferencia entre contas - saida", "status": "null", "descricaoStatus": "null", "valor": 54.38, "valorDolar": "null", "quantidadeParcelas": "null", "valorParcela": "null", "dataEvento": "\"2019-02-25T23: 00: 00Z\"", "estabelecimento": "null", "flagCredito": "0", "tipoEstabelecimento": "null", "idGrupoMCC": "null", "flagSolicitouContestacao": "null", "tipoTransacao": "null", "idEventoAjuste": "null", "ultimaParcelaLancada": "null"}, {"idConta": 10057584, "idTipoRegistro": 7, "ordem": 30, "idTransacao": "null", "descricao": "Transferencia bancaria - debito", "status": "null", "descricaoStatus": "null", "valor": 5.55, "valorDolar": "null", "quantidadeParcelas": "null", "valorParcela": "null", "dataEvento": "\"2019-02-25T12: 37: 00Z\"", "estabelecimento": "null", "flagCredito": "0", "tipoEstabelecimento": "null", "idGrupoMCC": "null", "flagSolicitouContestacao": "null", "tipoTransacao": "null", "idEventoAjuste": "null", "ultimaParcelaLancada": "null"}, {"idConta": 10057584, "idTipoRegistro": 7, "ordem": 30, "idTransacao": "null", "descricao": "Ajuste a debito               ", "status": "null", "descricaoStatus": "null", "valor": 15.5, "valorDolar": "null", "quantidadeParcelas": "null", "valorParcela": "null", "dataEvento": "\"2019-02-25T12: 06: 00Z\"", "estabelecimento": "null", "flagCredito": "0", "tipoEstabelecimento": "null", "idGrupoMCC": "null", "flagSolicitouContestacao": "null", "tipoTransacao": "null", "idEventoAjuste": "null", "ultimaParcelaLancada": "null"}, {"idConta": 10057584, "idTipoRegistro": 7, "ordem": 30, "idTransacao": "null", "descricao": "Ajuste a debito               ", "status": "null", "descricaoStatus": "null", "valor": 15.5, "valorDolar": "null", "quantidadeParcelas": "null", "valorParcela": "null", "dataEvento": "\"2019-02-25T12: 04: 00Z\"", "estabelecimento": "null", "flagCredito": "0", "tipoEstabelecimento": "null", "idGrupoMCC": "null", "flagSolicitouContestacao": "null", "tipoTransacao": "null", "idEventoAjuste": "null", "ultimaParcelaLancada": "null"}, {"idConta": 10057584, "idTipoRegistro": 7, "ordem": 30, "idTransacao": "null", "descricao": "Recarga Celular", "status": "null", "descricaoStatus": "null", "valor": 3, "valorDolar": "null", "quantidadeParcelas": "null", "valorParcela": "null", "dataEvento": "\"2019-02-25T12: 03: 00Z\"", "estabelecimento": "null", "flagCredito": "0", "tipoEstabelecimento": "null", "idGrupoMCC": "null", "flagSolicitouContestacao": "null", "tipoTransacao": "null", "idEventoAjuste": "null", "ultimaParcelaLancada": "null"}, {"idConta": 10057584, "idTipoRegistro": 3, "ordem": 30, "idTransacao": "null", "descricao": "Pagamento nao Processado - Recarga Celular", "status": "null", "descricaoStatus": "null", "valor": 3, "valorDolar": "null", "quantidadeParcelas": "null", "valorParcela": "null", "dataEvento": "\"2019-02-25T12: 03: 00Z\"", "estabelecimento": "null", "flagCredito": "1", "tipoEstabelecimento": "null", "idGrupoMCC": "null", "flagSolicitouContestacao": "null", "tipoTransacao": "null", "idEventoAjuste": "null", "ultimaParcelaLancada": "null"}, {"idConta": 10057584, "idTipoRegistro": 3, "ordem": 30, "idTransacao": "null", "descricao": "Pagamento nao Processado - Recarga Celular", "status": "null", "descricaoStatus": "null", "valor": 3, "valorDolar": "null", "quantidadeParcelas": "null", "valorParcela": "null", "dataEvento": "\"2019-02-25T12: 02: 00Z\"", "estabelecimento": "null", "flagCredito": "1", "tipoEstabelecimento": "null", "idGrupoMCC": "null", "flagSolicitouContestacao": "null", "tipoTransacao": "null", "idEventoAjuste": "null", "ultimaParcelaLancada": "null"}, {"idConta": 10057584, "idTipoRegistro": 7, "ordem": 30, "idTransacao": "null", "descricao": "Recarga Celular", "status": "null", "descricaoStatus": "null", "valor": 3, "valorDolar": "null", "quantidadeParcelas": "null", "valorParcela": "null", "dataEvento": "\"2019-02-25T12: 02: 00Z\"", "estabelecimento": "null", "flagCredito": "0", "tipoEstabelecimento": "null", "idGrupoMCC": "null", "flagSolicitouContestacao": "null", "tipoTransacao": "null", "idEventoAjuste": "null", "ultimaParcelaLancada": "null"}, {"idConta": 10057584, "idTipoRegistro": 7, "ordem": 30, "idTransacao": "null", "descricao": "Ajuste a debito               ", "status": "null", "descricaoStatus": "null", "valor": 15.5, "valorDolar": "null", "quantidadeParcelas": "null", "valorParcela": "null", "dataEvento": "\"2019-02-18T23: 06: 00Z\"", "estabelecimento": "null", "flagCredito": "0", "tipoEstabelecimento": "null", "idGrupoMCC": "null", "flagSolicitouContestacao": "null", "tipoTransacao": "null", "idEventoAjuste": "12", "ultimaParcelaLancada": "null"}, {"idConta": 10057584, "idTipoRegistro": 7, "ordem": 30, "idTransacao": "null", "descricao": "Transferencia entre contas - saida", "status": "null", "descricaoStatus": "null", "valor": 14.08, "valorDolar": "null", "quantidadeParcelas": "null", "valorParcela": "null", "dataEvento": "\"2019-02-18T22: 58: 00Z\"", "estabelecimento": "null", "flagCredito": "0", "tipoEstabelecimento": "null", "idGrupoMCC": "null", "flagSolicitouContestacao": "null", "tipoTransacao": "null", "idEventoAjuste": "null", "ultimaParcelaLancada": "null"}, {"idConta": 10057584, "idTipoRegistro": 3, "ordem": 30, "idTransacao": "null", "descricao": "Pagamento de contas", "status": "null", "descricaoStatus": "null", "valor": 14, "valorDolar": "null", "quantidadeParcelas": "null", "valorParcela": "null", "dataEvento": "\"2019-02-18T17: 04: 00Z\"", "estabelecimento": "null", "flagCredito": "0", "tipoEstabelecimento": "null", "idGrupoMCC": "null", "flagSolicitouContestacao": "null", "tipoTransacao": "null", "idEventoAjuste": "null", "ultimaParcelaLancada": "null"}, {"idConta": 10057584, "idTipoRegistro": 3, "ordem": 30, "idTransacao": "null", "descricao": "Pagamento nao Processado - Pag Contas", "status": "null", "descricaoStatus": "null", "valor": 14, "valorDolar": "null", "quantidadeParcelas": "null", "valorParcela": "null", "dataEvento": "\"2019-02-18T17: 04: 00Z\"", "estabelecimento": "null", "flagCredito": "1", "tipoEstabelecimento": "null", "idGrupoMCC": "null", "flagSolicitouContestacao": "null", "tipoTransacao": "null", "idEventoAjuste": "null", "ultimaParcelaLancada": "null"}, {"idConta": 10057584, "idTipoRegistro": 7, "ordem": 30, "idTransacao": "null", "descricao": "Transferencia bancaria - debito", "status": "null", "descricaoStatus": "null", "valor": 5.55, "valorDolar": "null", "quantidadeParcelas": "null", "valorParcela": "null", "dataEvento": "\"2019-02-18T17: 00: 00Z\"", "estabelecimento": "null", "flagCredito": "0", "tipoEstabelecimento": "null", "idGrupoMCC": "null", "flagSolicitouContestacao": "null", "tipoTransacao": "null", "idEventoAjuste": "null", "ultimaParcelaLancada": "null"}, {"idConta": 10057584, "idTipoRegistro": 7, "ordem": 30, "idTransacao": "null", "descricao": "Transferencia entre contas - entrada", "status": "null", "descricaoStatus": "null", "valor": 5000, "valorDolar": "null", "quantidadeParcelas": "null", "valorParcela": "null", "dataEvento": "\"2019-02-17T22: 57: 00Z\"", "estabelecimento": "null", "flagCredito": "1", "tipoEstabelecimento": "null", "idGrupoMCC": "null", "flagSolicitouContestacao": "null", "tipoTransacao": "null", "idEventoAjuste": "null", "ultimaParcelaLancada": "null"}, {"idConta": 10057584, "idTipoRegistro": 12, "ordem": 0, "idTransacao": "null", "descricao": "limite aprovado", "status": "null", "descricaoStatus": "null", "valor": 0, "valorDolar": "null", "quantidadeParcelas": "null", "valorParcela": "null", "dataEvento": "\"2019-02-17T22: 55: 00Z\"", "estabelecimento": "null", "flagCredito": "null", "tipoEstabelecimento": "null", "idGrupoMCC": "null", "flagSolicitouContestacao": "null", "tipoTransacao": "null", "idEventoAjuste": "null", "ultimaParcelaLancada": "null"}]}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>This method allows all unprocessed and processed transactions in the Account to be listed.</p>
<p>This method may merge the processed transactions into one. Therefore, the total quantity of elements may differ from the quantity shown.</p>
<blockquote>
<p>Check the FAQs below:</p>
<ul>
<li><a href="https://baas-cdt.zendesk.com/hc/pt-br/articles/360030829612">Onde consigo mais informações sobre o saque?</a></li>
</ul>
</blockquote>

     */
    it("should testMAccountsIdAccountTransactions response", function testMAccountsIdAccountTransactionsTest(done) {
        // parameters for the API call
        let sort = 'Array [string] (optional). Ex: sort=transactionDate, asc';
        let page = 'Integer (optional) (default 1)';
        let limit = 'Integer (optional) (Default = 50, Max = 50).';
        let dueDate = 'String (optional) (YYYY-MM-DD)';
        let startDate = 'String (optional) (YYYY-MM-DD)';
        let endDate = 'String (optional) (YYYY-MM-DD)';
        let creditFlag = 'Integer (optional)';
        let mccCode = 'Integer (optional)';
        let groupMcc = 'String (optional)';
        let authorization = '{{tokenOauth}}';

        controller.getAccountsIdAccountTransactions(sort, page, limit, dueDate, startDate, endDate, creditFlag, mccCode, groupMcc, authorization, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = null;
            headers['Content-Length'] = null;
            headers['Connection'] = null;
            headers['Date'] = null;
            headers['x-amzn-RequestId'] = null;
            headers['Access-Control-Allow-Origin'] = null;
            headers['Access-Control-Allow-Headers'] = null;
            headers['x-amzn-Remapped-Connection'] = null;
            headers['x-amz-apigw-id'] = null;
            headers['x-amzn-Remapped-Server'] = null;
            headers['Access-Control-Allow-Methods'] = null;
            headers['x-amzn-Remapped-Date'] = null;
            headers['X-Application-Context'] = null;
            headers['Access-Control-Max-Age'] = null;
            headers['Access-Control-Allow-Credentials'] = null;
            headers['X-Cache'] = null;
            headers['Via'] = null;
            headers['X-Amz-Cf-Id'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.equal('{\r\n    "previousPage": 1,\r\n    "currentPage": 1,\r\n    "nextPage": 2,\r\n    "last": false,\r\n    "totalPages": 296,\r\n    "totalItems": 2068,\r\n    "maxItemsPerPage": 7,\r\n    "totalItemsPage": 7,\r\n    "items": [\r\n        {\r\n            "idAdjustment": 61996,\r\n            "description": "Transf. Bancária: Devolução",\r\n            Transaction Abbreviated Description\r\n            "idAccount": 4,\r\n            "idTransactionReversal": null,\r\n            Identification Code of the Transaction that generated the reversal\r\n            "creditFlag": 1,\r\n            When active, it indicates that Transaction is of ‘Credit’ Type\r\n            "status": 0,\r\n            Attribute that represents the identifier code of the transaction status\r\n            "idAdjustmentType": 1087,\r\n            "maskedCard": "4329********6266",\r\n            Card Number in Format 0000XXXXXXXX000\r\n            "bearerName": "CRISLANDIO LEOPOLDINO",\r\n            Card Holder´s Full Name\r\n            "transactionDate": "2019-07-30T21:15:00",\r\n            Date when Transaction was carried out\r\n            "amountBrl": 0.01,\r\n            Transaction Amount in Real (BRL)\r\n            "amountUsd": null,\r\n            Transaction Amount in US Dollar (USD)\r\n            "usdExchangeRate": null,\r\n            US Dollar Amount (USD) converted into Real (BRL)\r\n            "amountIof": 0.0,\r\n            IOF tax rate\r\n            "feeService": 0.0,\r\n            Service tax value\r\n            "amountTotalTransaction": 0.01,\r\n            Total amount of the transaction with rates and IOF\r\n            "dateUsdExchangeRate": null,\r\n            Closing Date of US Dollar (USD) Exchange Rate\r\n            "sourceCurrentyCode": "986",\r\n            Identification Code of the Currency used in the Transaction, according to ISO 4217 standard\r\n            "destinationCurrencyCode": "986",\r\n            Identification Code of the Transaction Currency after conversion, according to ISO 4217 standard\r\n            "authorizationCode": null,\r\n            card authorization code\r\n            "mccCode": null,\r\n            Identification code of Establishment category\r\n            "groupMcc": null,\r\n            Identification code of Establishment group\r\n            "groupDescriptionMcc": null,\r\n            Description of Establishment group\r\n            "idEstablishment": 0,\r\n            Establishment Identification Code (id)\r\n            "nameEstablishment": "",\r\n            Establishment name\r\n            "tradeNameEstablishment": "",\r\n            Establishment trade name\r\n            "placeEstablishment": null\r\n            Place of establishment\r\n        },\r\n        {\r\n            "idAdjustment": 61976,\r\n            "description": "PagContas: Estorno Tarifa",\r\n            "idAccount": 4,\r\n            "idTransactionReversal": null,\r\n            "creditFlag": 1,\r\n            "status": 0,\r\n            "idAdjustmentType": 1051,\r\n            "maskedCard": "4329********6266",\r\n            "bearerName": "CRISLANDIO LEOPOLDINO",\r\n            "transactionDate": "2019-07-30T17:11:00",\r\n            "amountBrl": 1.0,\r\n            "amountUsd": null,\r\n            "usdExchangeRate": null,\r\n            "amountIof": 0.0,\r\n            "feeService": 0.0,\r\n            "amountTotalTransaction": 1.0,\r\n            "dateUsdExchangeRate": null,\r\n            "sourceCurrentyCode": "986",\r\n            "destinationCurrencyCode": "986",\r\n            "authorizationCode": null,\r\n            "mccCode": null,\r\n            "groupMcc": null,\r\n            "groupDescriptionMcc": null,\r\n            "idEstablishment": 0,\r\n            "nameEstablishment": "",\r\n            "tradeNameEstablishment": "",\r\n            "placeEstablishment": null\r\n        },\r\n        {\r\n            "idAdjustment": 61982,\r\n            "description": "PagContas: Estorno Tarifa",\r\n            "idAccount": 4,\r\n            "idTransactionReversal": null,\r\n            "creditFlag": 1,\r\n            "status": 0,\r\n            "idAdjustmentType": 1051,\r\n            "maskedCard": "4329********6266",\r\n            "bearerName": "CRISLANDIO LEOPOLDINO",\r\n            "transactionDate": "2019-07-30T17:11:00",\r\n            "amountBrl": 1.0,\r\n            "amountUsd": null,\r\n            "usdExchangeRate": null,\r\n            "amountIof": 0.0,\r\n            "feeService": 0.0,\r\n            "amountTotalTransaction": 1.0,\r\n            "dateUsdExchangeRate": null,\r\n            "sourceCurrentyCode": "986",\r\n            "destinationCurrencyCode": "986",\r\n            "authorizationCode": null,\r\n            "mccCode": null,\r\n            "groupMcc": null,\r\n            "groupDescriptionMcc": null,\r\n            "idEstablishment": 0,\r\n            "nameEstablishment": "",\r\n            "tradeNameEstablishment": "",\r\n            "placeEstablishment": null\r\n        },\r\n        {\r\n            "idAdjustment": 61938,\r\n            "description": "PagContas: Estorno Tarifa",\r\n            "idAccount": 4,\r\n            "idTransactionReversal": null,\r\n            "creditFlag": 1,\r\n            "status": 0,\r\n            "idAdjustmentType": 1051,\r\n            "maskedCard": "4329********6266",\r\n            "bearerName": "CRISLANDIO LEOPOLDINO",\r\n            "transactionDate": "2019-07-30T15:29:00",\r\n            "amountBrl": 1.0,\r\n            "amountUsd": null,\r\n            "usdExchangeRate": null,\r\n            "amountIof": 0.0,\r\n            "feeService": 0.0,\r\n            "amountTotalTransaction": 1.0,\r\n            "dateUsdExchangeRate": null,\r\n            "sourceCurrentyCode": "986",\r\n            "destinationCurrencyCode": "986",\r\n            "authorizationCode": null,\r\n            "mccCode": null,\r\n            "groupMcc": null,\r\n            "groupDescriptionMcc": null,\r\n            "idEstablishment": 0,\r\n            "nameEstablishment": "",\r\n            "tradeNameEstablishment": "",\r\n            "placeEstablishment": null\r\n        },\r\n        {\r\n            "idAdjustment": 61949,\r\n            "description": "PagContas: Estorno Tarifa",\r\n            "idAccount": 4,\r\n            "idTransactionReversal": null,\r\n            "creditFlag": 1,\r\n            "status": 0,\r\n            "idAdjustmentType": 1051,\r\n            "maskedCard": "4329********6266",\r\n            "bearerName": "CRISLANDIO LEOPOLDINO",\r\n            "transactionDate": "2019-07-30T15:29:00",\r\n            "amountBrl": 1.0,\r\n            "amountUsd": null,\r\n            "usdExchangeRate": null,\r\n            "amountIof": 0.0,\r\n            "feeService": 0.0,\r\n            "amountTotalTransaction": 1.0,\r\n            "dateUsdExchangeRate": null,\r\n            "sourceCurrentyCode": "986",\r\n            "destinationCurrencyCode": "986",\r\n            "authorizationCode": null,\r\n            "mccCode": null,\r\n            "groupMcc": null,\r\n            "groupDescriptionMcc": null,\r\n            "idEstablishment": 0,\r\n            "nameEstablishment": "",\r\n            "tradeNameEstablishment": "",\r\n            "placeEstablishment": null\r\n        },\r\n        {\r\n            "idAdjustment": 61927,\r\n            "description": "PagContas: Estorno Tarifa",\r\n            "idAccount": 4,\r\n            "idTransactionReversal": null,\r\n            "creditFlag": 1,\r\n            "status": 0,\r\n            "idAdjustmentType": 1051,\r\n            "maskedCard": "4329********6266",\r\n            "bearerName": "CRISLANDIO LEOPOLDINO",\r\n            "transactionDate": "2019-07-30T15:20:00",\r\n            "amountBrl": 1.0,\r\n            "amountUsd": null,\r\n            "usdExchangeRate": null,\r\n            "amountIof": 0.0,\r\n            "feeService": 0.0,\r\n            "amountTotalTransaction": 1.0,\r\n            "dateUsdExchangeRate": null,\r\n            "sourceCurrentyCode": "986",\r\n            "destinationCurrencyCode": "986",\r\n            "authorizationCode": null,\r\n            "mccCode": null,\r\n            "groupMcc": null,\r\n            "groupDescriptionMcc": null,\r\n            "idEstablishment": 0,\r\n            "nameEstablishment": "",\r\n            "tradeNameEstablishment": "",\r\n            "placeEstablishment": null\r\n        },\r\n        {\r\n            "idAdjustment": 61916,\r\n            "description": "PagContas: Estorno Tarifa",\r\n            "idAccount": 4,\r\n            "idTransactionReversal": null,\r\n            "creditFlag": 1,\r\n            "status": 0,\r\n            "idAdjustmentType": 1051,\r\n            "maskedCard": "4329********6266",\r\n            "bearerName": "CRISLANDIO LEOPOLDINO",\r\n            "transactionDate": "2019-07-30T15:15:00",\r\n            "amountBrl": 1.0,\r\n            "amountUsd": null,\r\n            "usdExchangeRate": null,\r\n            "amountIof": 0.0,\r\n            "feeService": 0.0,\r\n            "amountTotalTransaction": 1.0,\r\n            "dateUsdExchangeRate": null,\r\n            "sourceCurrentyCode": "986",\r\n            "destinationCurrencyCode": "986",\r\n            "authorizationCode": null,\r\n            "mccCode": null,\r\n            "groupMcc": null,\r\n            "groupDescriptionMcc": null,\r\n            "idEstablishment": 0,\r\n            "nameEstablishment": "",\r\n            "tradeNameEstablishment": "",\r\n            "placeEstablishment": null\r\n        }\r\n    ]\r\n}', context.response.body);
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>This method allows all denied account transactions to be listed.</p>
<p>It shows only the transactions denied by our authorizer, but it does not shows transactions denied by the acquirer or by the card scheme.</p>

     */
    it("should testMAccountsIdAccountTransactionsDenied response", function testMAccountsIdAccountTransactionsDeniedTest(done) {
        // parameters for the API call
        let sort = 'Array[string] (optional)';
        let page = 'Integer (optional)';
        let limit = 'Integer (optional)';
        let idCard = 'Integer (optional)';
        let authorization = '{{tokenOauth}}';

        controller.getAccountsIdAccountTransactionsDenied(sort, page, limit, idCard, authorization, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            assert.isNotNull(response);
            assert.equal('{\r\n   "previousPage": 1,\r\n   "currentPage": 1,\r\n   "nextPage": 1,\r\n   "last": true,\r\n   "totalPages": 1,\r\n   "totalItems": 4,\r\n   "maxItemsPerPage": 50,\r\n   "totalItemsPage": 4,\r\n   "items": [\r\n       {\r\n           "id": 1234,\r\n           Message identifying code\r\n           "idProduct": 1,\r\n           Product identifying code\r\n           "idCard": 31,\r\n           Card identifying code\r\n           "cardNumber": "1111000000111111",\r\n           Masked card number\r\n           "processingCode": null,\r\n           Processing code\r\n           "descriptionProcessingCode": null,\r\n           Processing code description\r\n           "amount": 1.0,\r\n           Transaction value\r\n           "installments": 1,\r\n           Number of installments for installment\r\n           "establishmentName": "padaria",\r\n           Establishment name where transaction occurred\r\n           "inputDateTime": "2019-01-11T10:13:48",\r\n           Date and time that transaction entered in authorizer\r\n           "outputDateTime": "2019-01-11T10:13:48",\r\n           Date and time that transaction exited from authorizer\r\n           "responseCode": "12",\r\n            Message code of response\r\n           "authorizerResponse": null,\r\n           Authorizer´s response message\r\n           "idDescription": 15,\r\n           Transaction message code\r\n           "applicationDescription": "Código de processamento não cadastrado para o tipo de transação (MTI)",\r\n           Application transaction message\r\n           "terminalDescription": "Entre em contato com o atendimento"\r\n           Terminal transaction message\r\n       }\r\n    ]\r\n}', context.response.body);
            done();
        }).catch(() => undefined);
    });
});
