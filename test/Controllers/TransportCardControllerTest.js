/**
 * BaaSCaradhrasAPIDocumentationLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const chai = require('chai');
const assert = chai.assert;
const TestHelper = require("../TestHelper");
const APIHelper = require("../../lib/APIHelper");
const testerlib = require("../../lib");
const testConfiguration = require("../TestBootstrap");
const baseController = require("../../lib/Controllers/BaseController");

const controller = testerlib.TransportCardController;
const MTransportcardsCardIdSptrans1 = testerlib.MTransportcardsCardIdSptrans1;
const MTransportcardsRecharge2 = testerlib.MTransportcardsRecharge2;
const MTransportcardsRecharge2Request = testerlib.MTransportcardsRecharge2Request;
const MTransportcardsRechargeIdRecharge3 = testerlib.MTransportcardsRechargeIdRecharge3;

describe("TransportCardController Tests", function tests() {
    this.timeout(testConfiguration.TEST_TIMEOUT);

    /**
     * TODO: Add Description
     */
    it("should testMTransportcardsRecharge2 response", function testMTransportcardsRecharge2Test(done) {
        // parameters for the API call
        let authorization = '{{tokenOauth}}';
        let contentType = 'application/json';
        let body = baseController.getObjectMapper().mapObject({
  "accountId": 10057584,
  "cardNumber": 13268001658,
  "creditType": 1,
  "productCode": 691,
  "value": 15.5,
  "amount": 0
}, 'MTransportcardsRecharge2Request');

        controller.createTransportcardsRecharge2(authorization, contentType, body, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = null;
            headers['Content-Length'] = null;
            headers['Connection'] = null;
            headers['Date'] = null;
            headers['x-amzn-RequestId'] = null;
            headers['x-amzn-Remapped-Content-Length'] = null;
            headers['x-amz-apigw-id'] = null;
            headers['X-Amzn-Trace-Id'] = null;
            headers['X-Cache'] = null;
            headers['Via'] = null;
            headers['X-Amz-Cf-Id'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            assert.isNotNull(response);
            assert.isTrue(TestHelper.isProperSubsetOf(context.response.body, {
  "id": "d8de81b5-b802-4f9f-a",
  "productCode": 691,
  "orderNumber": 4037200794235010051,
  "status": "CONFIRMED",
  "value": 15.5,
  "amount": 0,
  "date": "2019-02-25T15: 06: 09.772298Z",
  "transactionDate": "2019-02-25T12: 06: 09.605"
}, false, true, false));
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>Find a transportcard recipient by the idAccount</p>

     */
    it("should testMTransportcardsAccountIdAccount response", function testMTransportcardsAccountIdAccountTest(done) {
        // parameters for the API call
        let contentType = 'application/json';
        let authorization = '{{tokenOauth}}';

        controller.getTransportcardsAccountIdAccount(contentType, authorization, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        }).catch(() => undefined);
    });

    /**
     * <p>Find a transportcard recipient by the idAdjustment</p>

     */
    it("should testMTransportcardsAdjustmentIdAdjustment response", function testMTransportcardsAdjustmentIdAdjustmentTest(done) {
        // parameters for the API call
        let contentType = 'application/json';
        let authorization = '{{tokenOauth}}';

        controller.getTransportcardsAdjustmentIdAdjustment(contentType, authorization, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        }).catch(() => undefined);
    });
});
